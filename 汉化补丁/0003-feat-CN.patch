From 77f8dd7366c08a0709dbf90f5746441f0359bf92 Mon Sep 17 00:00:00 2001
From: kalicyh <34980061+kaliCYH@users.noreply.github.com>
Date: Tue, 21 Jan 2025 03:49:42 +0800
Subject: [PATCH 3/4] =?UTF-8?q?=E2=9C=A8=20feat(CN):=20=E6=B1=89=E5=8C=96?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../main/bad_kb/scenes/bad_kb_scene_config.c  |  40 +-
 .../scenes/bad_kb_scene_config_bt_mac.c       |   2 +-
 .../scenes/bad_kb_scene_config_bt_name.c      |   2 +-
 .../scenes/bad_kb_scene_config_usb_name.c     |   4 +-
 .../scenes/bad_kb_scene_config_usb_vidpid.c   |   2 +-
 .../main/bad_kb/scenes/bad_kb_scene_error.c   |   2 +-
 applications/main/bad_kb/views/bad_kb_view.c  |  40 +-
 .../main/gpio/scenes/gpio_scene_start.c       |  14 +-
 .../main/gpio/scenes/gpio_scene_usb_uart.c    |   6 +-
 .../scenes/gpio_scene_usb_uart_close_rpc.c    |   4 +-
 .../gpio/scenes/gpio_scene_usb_uart_config.c  |  10 +-
 .../main/gpio/views/gpio_i2c_scanner.c        |   4 +-
 applications/main/gpio/views/gpio_i2c_sfp.c   |   2 +-
 applications/main/gpio/views/gpio_test.c      |   4 +-
 .../ibutton/scenes/ibutton_scene_add_value.c  |   2 +-
 .../scenes/ibutton_scene_saved_key_menu.c     |  14 +-
 .../main/ibutton/scenes/ibutton_scene_start.c |   6 +-
 .../infrared/scenes/infrared_scene_edit.c     |  12 +-
 .../infrared/scenes/infrared_scene_start.c    |  28 +-
 .../scenes/infrared_scene_universal.c         |  14 +-
 .../scenes/lfrfid_scene_enter_password.c      |   2 +-
 .../scenes/lfrfid_scene_extra_actions.c       |  26 +-
 .../lfrfid/scenes/lfrfid_scene_raw_name.c     |   2 +-
 .../scenes/lfrfid_scene_read_key_menu.c       |   6 +-
 .../lfrfid/scenes/lfrfid_scene_save_data.c    |   2 +-
 .../lfrfid/scenes/lfrfid_scene_save_name.c    |   2 +-
 .../scenes/lfrfid_scene_saved_key_menu.c      |  14 +-
 .../main/lfrfid/scenes/lfrfid_scene_start.c   |   8 +-
 .../main/lfrfid/views/lfrfid_view_read.c      |   8 +-
 applications/main/momentum_app/momentum_app.c |  14 +-
 .../scenes/momentum_app_scene_interface.c     |  10 +-
 ...momentum_app_scene_interface_filebrowser.c |  29 +-
 .../momentum_app_scene_interface_graphics.c   |  44 +-
 ...mentum_app_scene_interface_graphics_pack.c |   4 +-
 .../momentum_app_scene_interface_lockscreen.c |  70 +--
 .../momentum_app_scene_interface_mainmenu.c   |  22 +-
 ...omentum_app_scene_interface_mainmenu_add.c |   6 +-
 ...entum_app_scene_interface_mainmenu_reset.c |   2 +-
 .../momentum_app_scene_interface_statusbar.c  |  26 +-
 .../scenes/momentum_app_scene_misc.c          |  12 +-
 .../scenes/momentum_app_scene_misc_dolphin.c  |  22 +-
 .../momentum_app_scene_misc_dolphin_xp.c      |   2 +-
 .../scenes/momentum_app_scene_misc_screen.c   |  92 ++--
 .../momentum_app_scene_misc_screen_color.c    |   2 +-
 .../scenes/momentum_app_scene_misc_spoof.c    |  31 +-
 .../momentum_app_scene_misc_spoof_name.c      |   4 +-
 .../scenes/momentum_app_scene_misc_vgm.c      |  60 +--
 .../momentum_app_scene_misc_vgm_color.c       |   2 +-
 .../scenes/momentum_app_scene_protocols.c     |  22 +-
 .../momentum_app_scene_protocols_freqs.c      |  10 +-
 .../momentum_app_scene_protocols_freqs_add.c  |   2 +-
 ...omentum_app_scene_protocols_freqs_hopper.c |   8 +-
 ...omentum_app_scene_protocols_freqs_static.c |   8 +-
 .../scenes/momentum_app_scene_start.c         |   6 +-
 .../main/nfc/scenes/nfc_scene_start.c         |  20 +-
 .../subghz/scenes/subghz_scene_more_raw.c     |   6 +-
 .../subghz/scenes/subghz_scene_need_saving.c  |   8 +-
 .../scenes/subghz_scene_radio_settings.c      |  22 +-
 .../scenes/subghz_scene_receiver_config.c     |  52 +--
 .../subghz/scenes/subghz_scene_saved_menu.c   |   8 +-
 .../main/subghz/scenes/subghz_scene_start.c   |  12 +-
 applications/main/subghz/views/receiver.c     |   8 +-
 .../subghz/views/subghz_frequency_analyzer.c  |   2 +-
 .../main/subghz/views/subghz_read_raw.c       |  18 +-
 applications/main/subghz/views/transmitter.c  |   2 +-
 applications/main/u2f/views/u2f_view.c        |  21 +-
 applications/services/desktop/desktop.c       |   7 +-
 .../services/desktop/desktop_keybinds.c       |   4 +-
 applications/services/gui/README.md           |  76 ++++
 applications/services/gui/canvas.c            |  17 +-
 applications/services/gui/elements.h          |   1 +
 applications/services/gui/kalicyh_font.c      | 422 ++++++++++++++++++
 applications/services/gui/kalicyh_font.h      |  13 +
 .../services/gui/modules/file_browser.c       |   2 +-
 .../power_service/views/power_unplug_usb.c    |   5 +-
 applications/settings/about/about.c           |  36 +-
 applications/settings/about/application.fam   |   2 +-
 .../settings/bt_settings_app/application.fam  |   2 +-
 .../bt_settings_scene_forget_dev_confirm.c    |   8 +-
 .../bt_settings_scene_forget_dev_success.c    |   2 +-
 .../scenes/bt_settings_scene_start.c          |  12 +-
 .../settings/desktop_settings/application.fam |   2 +-
 .../desktop_settings_scene_happy_mode.c       |   8 +-
 ...ktop_settings_scene_keybinds_action_type.c |  12 +-
 .../desktop_settings_scene_keybinds_key.c     |  10 +-
 .../desktop_settings_scene_keybinds_reset.c   |   8 +-
 .../desktop_settings_scene_keybinds_type.c    |   6 +-
 .../scenes/desktop_settings_scene_pin_auth.c  |   4 +-
 .../desktop_settings_scene_pin_disable.c      |   2 +-
 .../scenes/desktop_settings_scene_pin_error.c |   6 +-
 .../scenes/desktop_settings_scene_pin_menu.c  |   8 +-
 .../scenes/desktop_settings_scene_pin_setup.c |   8 +-
 .../desktop_settings_scene_pin_setup_done.c   |   6 +-
 .../scenes/desktop_settings_scene_start.c     |  40 +-
 .../desktop_settings_view_pin_setup_howto.c   |   6 +-
 .../desktop_settings_view_pin_setup_howto2.c  |  10 +-
 .../settings/dolphin_passport/application.fam |   2 +-
 .../settings/dolphin_passport/passport.c      |  16 +-
 .../expansion_settings_app/application.fam    |   2 +-
 .../expansion_settings_app.c                  |   2 +-
 .../notification_settings_app.c               |  24 +-
 .../power_settings_app/application.fam        |   2 +-
 .../scenes/power_settings_scene_power_off.c   |  10 +-
 .../scenes/power_settings_scene_reboot.c      |   6 +-
 .../power_settings_scene_reboot_confirm.c     |  14 +-
 .../scenes/power_settings_scene_start.c       |  10 +-
 .../power_settings_app/views/battery_info.c   |  21 +-
 .../settings/storage_settings/application.fam |   2 +-
 .../scenes/storage_settings_scene_benchmark.c |  10 +-
 ...storage_settings_scene_benchmark_confirm.c |  14 +-
 .../storage_settings_scene_factory_reset.c    |   8 +-
 .../storage_settings_scene_format_confirm.c   |  14 +-
 .../storage_settings_scene_formatting.c       |   8 +-
 .../storage_settings_scene_internal_info.c    |  10 +-
 .../scenes/storage_settings_scene_sd_info.c   |  23 +-
 .../scenes/storage_settings_scene_start.c     |  16 +-
 .../storage_settings_scene_unmount_confirm.c  |  16 +-
 .../scenes/storage_settings_scene_unmounted.c |  14 +-
 .../storage_settings_scene_wipe_device.c      |   8 +-
 applications/settings/system/application.fam  |   2 +-
 .../settings/system/system_settings.c         |  62 ++-
 .../system/updater/util/update_task.c         |  38 +-
 .../system/updater/views/updater_main.c       |   2 +-
 lib/momentum/settings.c                       |   2 +
 lib/momentum/settings.h                       |   1 +
 scripts/fbt/elfmanifest.py                    |   4 +-
 targets/f7/api_symbols.csv                    |   1 +
 targets/f7/furi_hal/furi_hal_crypto.c         |   4 +
 128 files changed, 1321 insertions(+), 763 deletions(-)
 create mode 100644 applications/services/gui/README.md
 create mode 100644 applications/services/gui/kalicyh_font.c
 create mode 100644 applications/services/gui/kalicyh_font.h

diff --git a/applications/main/bad_kb/scenes/bad_kb_scene_config.c b/applications/main/bad_kb/scenes/bad_kb_scene_config.c
index b92f361a7..e13432c35 100644
--- a/applications/main/bad_kb/scenes/bad_kb_scene_config.c
+++ b/applications/main/bad_kb/scenes/bad_kb_scene_config.c
@@ -23,7 +23,7 @@ enum VarItemListIndexUsb {
 void bad_kb_scene_config_connection_callback(VariableItem* item) {
     BadKbApp* bad_kb = variable_item_get_context(item);
     bad_kb->is_bt = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, bad_kb->is_bt ? "BT" : "USB");
+    variable_item_set_current_value_text(item, bad_kb->is_bt ? "蓝牙" : "USB");
     view_dispatcher_send_custom_event(bad_kb->view_dispatcher, VarItemListIndexConnection);
 }
 
@@ -36,14 +36,14 @@ void bad_kb_scene_config_bt_remember_callback(VariableItem* item) {
     if(bad_kb->set_bt_id) {
         bad_kb->id_config.ble.bonding = value;
     }
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开" : "关");
     view_dispatcher_send_custom_event(bad_kb->view_dispatcher, VarItemListIndexBtRemember);
 }
 
 const char* const bt_pairing_names[GapPairingCount] = {
-    "YesNo",
-    "PIN Type",
-    "PIN Y/N",
+    "是/否",
+    "PIN类型",
+    "PIN 是/否",
 };
 void bad_kb_scene_config_bt_pairing_callback(VariableItem* item) {
     BadKbApp* bad_kb = variable_item_get_context(item);
@@ -68,49 +68,49 @@ void bad_kb_scene_config_on_enter(void* context) {
     VariableItemList* var_item_list = bad_kb->var_item_list;
     VariableItem* item;
 
-    item = variable_item_list_add(var_item_list, "Keyboard layout", 0, NULL, bad_kb);
+    item = variable_item_list_add(var_item_list, "键盘布局", 0, NULL, bad_kb);
 
     item = variable_item_list_add(
-        var_item_list, "Connection", 2, bad_kb_scene_config_connection_callback, bad_kb);
+        var_item_list, "连接方式", 2, bad_kb_scene_config_connection_callback, bad_kb);
     variable_item_set_current_value_index(item, bad_kb->is_bt);
-    variable_item_set_current_value_text(item, bad_kb->is_bt ? "BT" : "USB");
+    variable_item_set_current_value_text(item, bad_kb->is_bt ? "蓝牙" : "USB");
 
     if(bad_kb->is_bt) {
         BadKbConfig* cfg = bad_kb->set_bt_id ? &bad_kb->id_config : &bad_kb->config;
 
         item = variable_item_list_add(
-            var_item_list, "BT Remember", 2, bad_kb_scene_config_bt_remember_callback, bad_kb);
+            var_item_list, "记住蓝牙", 2, bad_kb_scene_config_bt_remember_callback, bad_kb);
         variable_item_set_current_value_index(item, cfg->ble.bonding);
-        variable_item_set_current_value_text(item, cfg->ble.bonding ? "ON" : "OFF");
+        variable_item_set_current_value_text(item, cfg->ble.bonding ? "开" : "关");
 
         item = variable_item_list_add(
             var_item_list,
-            "BT Pairing",
+            "蓝牙配对",
             GapPairingCount,
             bad_kb_scene_config_bt_pairing_callback,
             bad_kb);
         variable_item_set_current_value_index(item, cfg->ble.pairing);
         variable_item_set_current_value_text(item, bt_pairing_names[cfg->ble.pairing]);
 
-        item = variable_item_list_add(var_item_list, "BT Device Name", 0, NULL, bad_kb);
+        item = variable_item_list_add(var_item_list, "蓝牙设备名称", 0, NULL, bad_kb);
 
-        item = variable_item_list_add(var_item_list, "BT MAC Address", 0, NULL, bad_kb);
+        item = variable_item_list_add(var_item_list, "蓝牙 MAC 地址", 0, NULL, bad_kb);
         if(cfg->ble.bonding) {
-            variable_item_set_locked(item, true, "Remember\nmust be Off!");
+            variable_item_set_locked(item, true, "记住\n必须关闭！");
         }
 
-        item = variable_item_list_add(var_item_list, "Randomize BT MAC", 0, NULL, bad_kb);
+        item = variable_item_list_add(var_item_list, "随机化蓝牙 MAC", 0, NULL, bad_kb);
         if(cfg->ble.bonding) {
-            variable_item_set_locked(item, true, "Remember\nmust be Off!");
+            variable_item_set_locked(item, true, "记住\n必须关闭！");
         }
     } else {
-        item = variable_item_list_add(var_item_list, "USB Manufacturer", 0, NULL, bad_kb);
+        item = variable_item_list_add(var_item_list, "USB 制造商", 0, NULL, bad_kb);
 
-        item = variable_item_list_add(var_item_list, "USB Product Name", 0, NULL, bad_kb);
+        item = variable_item_list_add(var_item_list, "USB 产品名称", 0, NULL, bad_kb);
 
-        item = variable_item_list_add(var_item_list, "USB VID and PID", 0, NULL, bad_kb);
+        item = variable_item_list_add(var_item_list, "USB VID 和 PID", 0, NULL, bad_kb);
 
-        item = variable_item_list_add(var_item_list, "Randomize USB VID:PID", 0, NULL, bad_kb);
+        item = variable_item_list_add(var_item_list, "随机化 USB VID:PID", 0, NULL, bad_kb);
     }
 
     variable_item_list_set_enter_callback(
diff --git a/applications/main/bad_kb/scenes/bad_kb_scene_config_bt_mac.c b/applications/main/bad_kb/scenes/bad_kb_scene_config_bt_mac.c
index d80a874c7..c9e8dbc29 100644
--- a/applications/main/bad_kb/scenes/bad_kb_scene_config_bt_mac.c
+++ b/applications/main/bad_kb/scenes/bad_kb_scene_config_bt_mac.c
@@ -15,7 +15,7 @@ void bad_kb_scene_config_bt_mac_on_enter(void* context) {
         bad_kb->set_bt_id ? bad_kb->id_config.ble.mac : bad_kb->config.ble.mac,
         sizeof(bad_kb->bt_mac_buf));
     reverse_mac_addr(bad_kb->bt_mac_buf);
-    byte_input_set_header_text(byte_input, "Set BT MAC address");
+    byte_input_set_header_text(byte_input, "设置蓝牙 MAC 地址");
 
     byte_input_set_result_callback(
         byte_input,
diff --git a/applications/main/bad_kb/scenes/bad_kb_scene_config_bt_name.c b/applications/main/bad_kb/scenes/bad_kb_scene_config_bt_name.c
index 67a92c6bf..c31f37c36 100644
--- a/applications/main/bad_kb/scenes/bad_kb_scene_config_bt_name.c
+++ b/applications/main/bad_kb/scenes/bad_kb_scene_config_bt_name.c
@@ -14,7 +14,7 @@ void bad_kb_scene_config_bt_name_on_enter(void* context) {
         bad_kb->bt_name_buf,
         bad_kb->set_bt_id ? bad_kb->id_config.ble.name : bad_kb->config.ble.name,
         sizeof(bad_kb->bt_name_buf));
-    text_input_set_header_text(text_input, "Set BT device name");
+    text_input_set_header_text(text_input, "设置蓝牙设备名称");
 
     text_input_set_result_callback(
         text_input,
diff --git a/applications/main/bad_kb/scenes/bad_kb_scene_config_usb_name.c b/applications/main/bad_kb/scenes/bad_kb_scene_config_usb_name.c
index 0cd9da1c8..ce54f94a4 100644
--- a/applications/main/bad_kb/scenes/bad_kb_scene_config_usb_name.c
+++ b/applications/main/bad_kb/scenes/bad_kb_scene_config_usb_name.c
@@ -15,13 +15,13 @@ void bad_kb_scene_config_usb_name_on_enter(void* context) {
             bad_kb->usb_name_buf,
             bad_kb->set_usb_id ? bad_kb->id_config.usb.manuf : bad_kb->config.usb.manuf,
             sizeof(bad_kb->usb_name_buf));
-        text_input_set_header_text(text_input, "Set USB manufacturer name");
+        text_input_set_header_text(text_input, "设置USB制造商名称");
     } else {
         strlcpy(
             bad_kb->usb_name_buf,
             bad_kb->set_usb_id ? bad_kb->id_config.usb.product : bad_kb->config.usb.product,
             sizeof(bad_kb->usb_name_buf));
-        text_input_set_header_text(text_input, "Set USB product name");
+        text_input_set_header_text(text_input, "设置USB产品名称");
     }
 
     text_input_set_result_callback(
diff --git a/applications/main/bad_kb/scenes/bad_kb_scene_config_usb_vidpid.c b/applications/main/bad_kb/scenes/bad_kb_scene_config_usb_vidpid.c
index 43b131465..678b690b8 100644
--- a/applications/main/bad_kb/scenes/bad_kb_scene_config_usb_vidpid.c
+++ b/applications/main/bad_kb/scenes/bad_kb_scene_config_usb_vidpid.c
@@ -17,7 +17,7 @@ void bad_kb_scene_config_usb_vidpid_on_enter(void* context) {
         bad_kb->usb_vidpid_buf[0] = __REVSH(bad_kb->config.usb.vid);
         bad_kb->usb_vidpid_buf[1] = __REVSH(bad_kb->config.usb.pid);
     }
-    byte_input_set_header_text(byte_input, "Set USB VID:PID");
+    byte_input_set_header_text(byte_input, "设置 USB VID:PID");
 
     byte_input_set_result_callback(
         byte_input,
diff --git a/applications/main/bad_kb/scenes/bad_kb_scene_error.c b/applications/main/bad_kb/scenes/bad_kb_scene_error.c
index b0edac36c..868593db2 100644
--- a/applications/main/bad_kb/scenes/bad_kb_scene_error.c
+++ b/applications/main/bad_kb/scenes/bad_kb_scene_error.c
@@ -24,7 +24,7 @@ void bad_kb_scene_error_on_enter(void* context) {
             FontSecondary,
             "No SD card or\napp data found.\nThis app will not\nwork without\nrequired files.");
         widget_add_button_element(
-            app->widget, GuiButtonTypeLeft, "Back", bad_kb_scene_error_event_callback, app);
+            app->widget, GuiButtonTypeLeft, "返回", bad_kb_scene_error_event_callback, app);
     }
 
     view_dispatcher_switch_to_view(app->view_dispatcher, BadKbAppViewWidget);
diff --git a/applications/main/bad_kb/views/bad_kb_view.c b/applications/main/bad_kb/views/bad_kb_view.c
index 72064190a..f4dabd980 100644
--- a/applications/main/bad_kb/views/bad_kb_view.c
+++ b/applications/main/bad_kb/views/bad_kb_view.c
@@ -28,7 +28,7 @@ static void bad_kb_draw_callback(Canvas* canvas, void* _model) {
 
     FuriString* disp_str = furi_string_alloc_set(
         state == BadKbStateInit ? "( . . . )" :
-        model->state.is_bt      ? "(BT) " :
+        model->state.is_bt      ? "(蓝牙) " :
                                   "(USB) ");
     furi_string_cat_str(disp_str, model->file_name);
     elements_string_fit_width(canvas, disp_str, 128 - 2);
@@ -36,7 +36,7 @@ static void bad_kb_draw_callback(Canvas* canvas, void* _model) {
     canvas_draw_str(canvas, 2, 8, furi_string_get_cstr(disp_str));
 
     if(strlen(model->layout) == 0) {
-        furi_string_set(disp_str, "(default)");
+        furi_string_set(disp_str, "(默认)");
     } else {
         furi_string_printf(disp_str, "(%s)", model->layout);
     }
@@ -56,40 +56,40 @@ static void bad_kb_draw_callback(Canvas* canvas, void* _model) {
 
     if((state == BadKbStateIdle) || (state == BadKbStateDone) ||
        (state == BadKbStateNotConnected)) {
-        elements_button_center(canvas, "Run");
-        elements_button_left(canvas, "Config");
+        elements_button_center(canvas, "运行");
+        elements_button_left(canvas, "配置");
     } else if((state == BadKbStateRunning) || (state == BadKbStateDelay)) {
-        elements_button_center(canvas, "Stop");
+        elements_button_center(canvas, "停止");
         if(!model->pause_wait) {
-            elements_button_right(canvas, "Pause");
+            elements_button_right(canvas, "暂停");
         }
     } else if(state == BadKbStatePaused) {
-        elements_button_center(canvas, "End");
-        elements_button_right(canvas, "Resume");
+        elements_button_center(canvas, "结束");
+        elements_button_right(canvas, "继续");
     } else if(state == BadKbStateWaitForBtn) {
-        elements_button_center(canvas, "Press to continue");
+        elements_button_center(canvas, "按键继续");
     } else if(state == BadKbStateWillRun) {
-        elements_button_center(canvas, "Cancel");
+        elements_button_center(canvas, "取消");
     }
 
     if(state == BadKbStateNotConnected) {
         canvas_draw_icon(canvas, 4, 26, &I_Clock_18x18);
         canvas_set_font(canvas, FontPrimary);
-        canvas_draw_str_aligned(canvas, 127, 31, AlignRight, AlignBottom, "Connect");
-        canvas_draw_str_aligned(canvas, 127, 43, AlignRight, AlignBottom, "to device");
+        canvas_draw_str_aligned(canvas, 127, 31, AlignRight, AlignBottom, "连接");
+        canvas_draw_str_aligned(canvas, 127, 43, AlignRight, AlignBottom, "到设备");
     } else if(state == BadKbStateWillRun) {
         canvas_draw_icon(canvas, 4, 26, &I_Clock_18x18);
         canvas_set_font(canvas, FontPrimary);
-        canvas_draw_str_aligned(canvas, 127, 31, AlignRight, AlignBottom, "Will run");
-        canvas_draw_str_aligned(canvas, 127, 43, AlignRight, AlignBottom, "on connect");
+        canvas_draw_str_aligned(canvas, 127, 31, AlignRight, AlignBottom, "将运行");
+        canvas_draw_str_aligned(canvas, 127, 43, AlignRight, AlignBottom, "连接时");
     } else if(state == BadKbStateFileError) {
         canvas_draw_icon(canvas, 4, 26, &I_Error_18x18);
         canvas_set_font(canvas, FontPrimary);
-        canvas_draw_str_aligned(canvas, 127, 31, AlignRight, AlignBottom, "File");
-        canvas_draw_str_aligned(canvas, 127, 43, AlignRight, AlignBottom, "ERROR");
+        canvas_draw_str_aligned(canvas, 127, 31, AlignRight, AlignBottom, "文件");
+        canvas_draw_str_aligned(canvas, 127, 43, AlignRight, AlignBottom, "错误");
     } else if(state == BadKbStateScriptError) {
         canvas_draw_icon(canvas, 4, 26, &I_Error_18x18);
-        furi_string_printf(disp_str, "line %zu", model->state.error_line);
+        furi_string_printf(disp_str, "行 %zu", model->state.error_line);
         canvas_draw_str_aligned(
             canvas, 127, 46, AlignRight, AlignBottom, furi_string_get_cstr(disp_str));
         furi_string_set_str(disp_str, model->state.error);
@@ -97,7 +97,7 @@ static void bad_kb_draw_callback(Canvas* canvas, void* _model) {
         canvas_draw_str_aligned(
             canvas, 127, 56, AlignRight, AlignBottom, furi_string_get_cstr(disp_str));
         canvas_set_font(canvas, FontPrimary);
-        canvas_draw_str_aligned(canvas, 127, 33, AlignRight, AlignBottom, "ERROR:");
+        canvas_draw_str_aligned(canvas, 127, 33, AlignRight, AlignBottom, "错误:");
     } else if(state == BadKbStateIdle) {
         canvas_draw_icon(canvas, 4, 26, &I_Smile_18x18);
         furi_string_printf(disp_str, "0/%zu", model->state.line_nb);
@@ -137,7 +137,7 @@ static void bad_kb_draw_callback(Canvas* canvas, void* _model) {
         }
         uint32_t delay = model->state.delay_remain / 10;
         if(delay) {
-            furi_string_printf(disp_str, "Delay %lus", delay);
+            furi_string_printf(disp_str, "延迟 %lus", delay);
             canvas_draw_str_aligned(
                 canvas, 4, 61, AlignLeft, AlignBottom, furi_string_get_cstr(disp_str));
         }
@@ -157,7 +157,7 @@ static void bad_kb_draw_callback(Canvas* canvas, void* _model) {
             canvas_draw_icon(canvas, 4, 23, &I_EviWaiting2_18x21);
         }
         if(state != BadKbStateWaitForBtn) {
-            canvas_draw_str_aligned(canvas, 4, 61, AlignLeft, AlignBottom, "Paused");
+            canvas_draw_str_aligned(canvas, 4, 61, AlignLeft, AlignBottom, "已暂停");
         }
         furi_string_printf(disp_str, "%zu/%zu", model->state.line_cur, model->state.line_nb);
         canvas_draw_str_aligned(
diff --git a/applications/main/gpio/scenes/gpio_scene_start.c b/applications/main/gpio/scenes/gpio_scene_start.c
index a3ec8559f..6f24c24ff 100644
--- a/applications/main/gpio/scenes/gpio_scene_start.c
+++ b/applications/main/gpio/scenes/gpio_scene_start.c
@@ -21,8 +21,8 @@ enum GpioOtg {
 };
 
 const char* const gpio_otg_text[GpioOtgSettingsNum] = {
-    "OFF",
-    "ON",
+    "关闭",
+    "开启",
 };
 
 static void gpio_scene_start_var_list_enter_callback(void* context, uint32_t index) {
@@ -59,18 +59,18 @@ void gpio_scene_start_on_enter(void* context) {
     variable_item_list_set_enter_callback(
         var_item_list, gpio_scene_start_var_list_enter_callback, app);
 
-    variable_item_list_add(var_item_list, "USB-UART Bridge", 0, NULL, NULL);
+    variable_item_list_add(var_item_list, "USB-UART 桥接", 0, NULL, NULL);
 
-    variable_item_list_add(var_item_list, "GPIO Manual Control", 0, NULL, NULL);
+    variable_item_list_add(var_item_list, "GPIO 手动控制", 0, NULL, NULL);
 
     item = variable_item_list_add(
         var_item_list,
-        "5V on GPIO",
+        "GPIO 供电 5V",
         GpioOtgSettingsNum,
         gpio_scene_start_var_list_change_callback,
         app);
     if(furi_hal_power_is_charging()) {
-        variable_item_set_locked(item, true, "Unplug USB!");
+        variable_item_set_locked(item, true, "请拔掉 USB！");
     } else if(furi_hal_power_is_otg_enabled()) {
         variable_item_set_current_value_index(item, GpioOtgOn);
         variable_item_set_current_value_text(item, gpio_otg_text[GpioOtgOn]);
@@ -79,7 +79,7 @@ void gpio_scene_start_on_enter(void* context) {
         variable_item_set_current_value_text(item, gpio_otg_text[GpioOtgOff]);
     }
 
-    variable_item_list_add(var_item_list, "I2C-Scanner", 0, NULL, NULL);
+    variable_item_list_add(var_item_list, "I2C-扫描器", 0, NULL, NULL);
     variable_item_list_add(var_item_list, "I2C-SFP", 0, NULL, NULL);
 
     variable_item_list_set_selected_item(
diff --git a/applications/main/gpio/scenes/gpio_scene_usb_uart.c b/applications/main/gpio/scenes/gpio_scene_usb_uart.c
index e3e7e8c24..68e6c78cb 100644
--- a/applications/main/gpio/scenes/gpio_scene_usb_uart.c
+++ b/applications/main/gpio/scenes/gpio_scene_usb_uart.c
@@ -54,9 +54,9 @@ bool gpio_scene_usb_uart_on_event(void* context, SceneManagerEvent event) {
     } else if(event.type == SceneManagerEventTypeBack) {
         DialogEx* dialog = app->dialog;
         dialog_ex_set_context(dialog, app);
-        dialog_ex_set_left_button_text(dialog, "Exit");
-        dialog_ex_set_right_button_text(dialog, "Stay");
-        dialog_ex_set_header(dialog, "Exit USB-UART?", 22, 12, AlignLeft, AlignTop);
+        dialog_ex_set_left_button_text(dialog, "退出");
+        dialog_ex_set_right_button_text(dialog, "停留");
+        dialog_ex_set_header(dialog, "退出 USB-UART？", 22, 12, AlignLeft, AlignTop);
         dialog_ex_set_result_callback(dialog, gpio_scene_usb_uart_dialog_callback);
         view_dispatcher_switch_to_view(app->view_dispatcher, GpioAppViewExitConfirm);
         return true;
diff --git a/applications/main/gpio/scenes/gpio_scene_usb_uart_close_rpc.c b/applications/main/gpio/scenes/gpio_scene_usb_uart_close_rpc.c
index 59ba101f6..c834fdd64 100644
--- a/applications/main/gpio/scenes/gpio_scene_usb_uart_close_rpc.c
+++ b/applications/main/gpio/scenes/gpio_scene_usb_uart_close_rpc.c
@@ -6,7 +6,7 @@ void gpio_scene_usb_uart_close_rpc_on_enter(void* context) {
 
     widget_add_icon_element(app->widget, 78, 0, &I_ActiveConnection_50x64);
     widget_add_string_multiline_element(
-        app->widget, 3, 2, AlignLeft, AlignTop, FontPrimary, "Connection\nIs Active!");
+        app->widget, 3, 2, AlignLeft, AlignTop, FontPrimary, "连接\n处于活动状态!");
     widget_add_string_multiline_element(
         app->widget,
         3,
@@ -14,7 +14,7 @@ void gpio_scene_usb_uart_close_rpc_on_enter(void* context) {
         AlignLeft,
         AlignTop,
         FontSecondary,
-        "Disconnect from\nPC or phone to\nuse this function.");
+        "断开与\nPC或手机的连接\n以使用此功能。");
 
     view_dispatcher_switch_to_view(app->view_dispatcher, GpioAppViewUsbUartCloseRpc);
 }
diff --git a/applications/main/gpio/scenes/gpio_scene_usb_uart_config.c b/applications/main/gpio/scenes/gpio_scene_usb_uart_config.c
index f8b142c63..307458625 100644
--- a/applications/main/gpio/scenes/gpio_scene_usb_uart_config.c
+++ b/applications/main/gpio/scenes/gpio_scene_usb_uart_config.c
@@ -137,13 +137,13 @@ void gpio_scene_usb_uart_cfg_on_enter(void* context) {
     VariableItem* item;
     char br_text[8];
 
-    item = variable_item_list_add(var_item_list, "USB Channel", 2, line_vcp_cb, app);
+    item = variable_item_list_add(var_item_list, "USB 通道", 2, line_vcp_cb, app);
     variable_item_set_current_value_index(item, app->usb_uart_cfg->vcp_ch);
     variable_item_set_current_value_text(item, vcp_ch[app->usb_uart_cfg->vcp_ch]);
 
     item = variable_item_list_add(
         var_item_list,
-        "Baudrate",
+        "波特率",
         sizeof(baudrate_list) / sizeof(baudrate_list[0]) + 1,
         line_baudrate_cb,
         app);
@@ -156,19 +156,19 @@ void gpio_scene_usb_uart_cfg_on_enter(void* context) {
             item, baudrate_mode[app->usb_uart_cfg->baudrate_mode]);
     }
 
-    item = variable_item_list_add(var_item_list, "UART Pins", 2, line_port_cb, app);
+    item = variable_item_list_add(var_item_list, "UART 引脚", 2, line_port_cb, app);
     variable_item_set_current_value_index(item, app->usb_uart_cfg->uart_ch);
     variable_item_set_current_value_text(item, uart_ch[app->usb_uart_cfg->uart_ch]);
 
     item = variable_item_list_add(
-        var_item_list, "RTS/DTR Pins", COUNT_OF(flow_pins), line_flow_cb, app);
+        var_item_list, "RTS/DTR 引脚", COUNT_OF(flow_pins), line_flow_cb, app);
     variable_item_set_current_value_index(item, app->usb_uart_cfg->flow_pins);
     variable_item_set_current_value_text(item, flow_pins[app->usb_uart_cfg->flow_pins]);
     app->var_item_flow = item;
     line_ensure_flow_invariant(app);
 
     item = variable_item_list_add(
-        var_item_list, "DE/RE Pin", COUNT_OF(software_de_re), line_software_de_re_cb, app);
+        var_item_list, "DE/RE 引脚", COUNT_OF(software_de_re), line_software_de_re_cb, app);
     variable_item_set_current_value_index(item, app->usb_uart_cfg->software_de_re);
     variable_item_set_current_value_text(item, software_de_re[app->usb_uart_cfg->software_de_re]);
 
diff --git a/applications/main/gpio/views/gpio_i2c_scanner.c b/applications/main/gpio/views/gpio_i2c_scanner.c
index fc9ed78a7..dcda75b3d 100644
--- a/applications/main/gpio/views/gpio_i2c_scanner.c
+++ b/applications/main/gpio/views/gpio_i2c_scanner.c
@@ -21,12 +21,12 @@ static void gpio_i2c_scanner_draw_callback(Canvas* canvas, void* _model) {
     GpioI2CScannerModel* model = _model;
 
     char temp_str[25];
-    elements_button_center(canvas, "Start scan");
+    elements_button_center(canvas, "开始扫描");
     canvas_draw_line(canvas, 2, 10, 125, 10);
     canvas_draw_line(canvas, 2, 52, 125, 52);
 
     canvas_set_font(canvas, FontPrimary);
-    canvas_draw_str(canvas, 2, 9, "I2C-Scanner");
+    canvas_draw_str(canvas, 2, 9, "I2C-扫描器");
     canvas_draw_str(canvas, 3, 25, "SDA:");
     canvas_draw_str(canvas, 3, 42, "SCL:");
 
diff --git a/applications/main/gpio/views/gpio_i2c_sfp.c b/applications/main/gpio/views/gpio_i2c_sfp.c
index c8e14ce7a..c43f90024 100644
--- a/applications/main/gpio/views/gpio_i2c_sfp.c
+++ b/applications/main/gpio/views/gpio_i2c_sfp.c
@@ -34,7 +34,7 @@ static void gpio_i2c_sfp_draw_callback(Canvas* canvas, void* _model) {
     char temp_str[280];
 
     canvas_set_font(canvas, FontSecondary);
-    elements_button_center(canvas, "Read");
+    elements_button_center(canvas, "读取");
     canvas_draw_str(canvas, 2, 63, "P15 SCL");
     canvas_draw_str(canvas, 92, 63, "P16 SDA");
 
diff --git a/applications/main/gpio/views/gpio_test.c b/applications/main/gpio/views/gpio_test.c
index c154a7275..a3e0c6d74 100644
--- a/applications/main/gpio/views/gpio_test.c
+++ b/applications/main/gpio/views/gpio_test.c
@@ -21,10 +21,10 @@ static bool gpio_test_process_ok(GpioTest* gpio_test, InputEvent* event);
 static void gpio_test_draw_callback(Canvas* canvas, void* _model) {
     GpioTestModel* model = _model;
     canvas_set_font(canvas, FontPrimary);
-    elements_multiline_text_aligned(canvas, 64, 2, AlignCenter, AlignTop, "GPIO Output Mode Test");
+    elements_multiline_text_aligned(canvas, 64, 2, AlignCenter, AlignTop, "GPIO 输出模式测试");
     canvas_set_font(canvas, FontSecondary);
     elements_multiline_text_aligned(
-        canvas, 64, 16, AlignCenter, AlignTop, "Press < or > to change pin");
+        canvas, 64, 16, AlignCenter, AlignTop, "按 < 或 > 更改引脚");
     elements_multiline_text_aligned(
         canvas,
         64,
diff --git a/applications/main/ibutton/scenes/ibutton_scene_add_value.c b/applications/main/ibutton/scenes/ibutton_scene_add_value.c
index 9815e5281..8130dcb22 100644
--- a/applications/main/ibutton/scenes/ibutton_scene_add_value.c
+++ b/applications/main/ibutton/scenes/ibutton_scene_add_value.c
@@ -12,7 +12,7 @@ static void ibutton_scene_add_type_byte_changed_callback(void* context) {
 
 void ibutton_scene_add_value_on_enter(void* context) {
     iButton* ibutton = context;
-    byte_input_set_header_text(ibutton->byte_input, "Enter the key");
+    byte_input_set_header_text(ibutton->byte_input, "输入密钥");
 
     iButtonEditableData editable_data;
     ibutton_protocols_get_editable_data(ibutton->protocols, ibutton->key, &editable_data);
diff --git a/applications/main/ibutton/scenes/ibutton_scene_saved_key_menu.c b/applications/main/ibutton/scenes/ibutton_scene_saved_key_menu.c
index 6727c5458..0ab850757 100644
--- a/applications/main/ibutton/scenes/ibutton_scene_saved_key_menu.c
+++ b/applications/main/ibutton/scenes/ibutton_scene_saved_key_menu.c
@@ -18,26 +18,26 @@ void ibutton_scene_saved_key_menu_on_enter(void* context) {
     const uint32_t features = ibutton_protocols_get_features(
         ibutton->protocols, ibutton_key_get_protocol_id(ibutton->key));
 
-    submenu_add_item(submenu, "Emulate", SubmenuIndexEmulate, ibutton_submenu_callback, ibutton);
+    submenu_add_item(submenu, "仿真", SubmenuIndexEmulate, ibutton_submenu_callback, ibutton);
 
     if(features & iButtonProtocolFeatureWriteId) {
         submenu_add_item(
-            submenu, "Write ID", SubmenuIndexWriteId, ibutton_submenu_callback, ibutton);
+            submenu, "写入 ID", SubmenuIndexWriteId, ibutton_submenu_callback, ibutton);
     }
 
     if(features & iButtonProtocolFeatureWriteCopy) {
         submenu_add_item(
             submenu,
-            "Full Write on Same Type",
+            "同类型完全写入",
             SubmenuIndexWriteCopy,
             ibutton_submenu_callback,
             ibutton);
     }
 
-    submenu_add_item(submenu, "Edit", SubmenuIndexEdit, ibutton_submenu_callback, ibutton);
-    submenu_add_item(submenu, "Rename", SubmenuIndexRename, ibutton_submenu_callback, ibutton);
-    submenu_add_item(submenu, "Delete", SubmenuIndexDelete, ibutton_submenu_callback, ibutton);
-    submenu_add_item(submenu, "Info", SubmenuIndexInfo, ibutton_submenu_callback, ibutton);
+    submenu_add_item(submenu, "编辑", SubmenuIndexEdit, ibutton_submenu_callback, ibutton);
+    submenu_add_item(submenu, "重命名", SubmenuIndexRename, ibutton_submenu_callback, ibutton);
+    submenu_add_item(submenu, "删除", SubmenuIndexDelete, ibutton_submenu_callback, ibutton);
+    submenu_add_item(submenu, "信息", SubmenuIndexInfo, ibutton_submenu_callback, ibutton);
 
     submenu_set_selected_item(
         submenu, scene_manager_get_scene_state(ibutton->scene_manager, iButtonSceneSavedKeyMenu));
diff --git a/applications/main/ibutton/scenes/ibutton_scene_start.c b/applications/main/ibutton/scenes/ibutton_scene_start.c
index 63a4cf869..957f9fbb7 100644
--- a/applications/main/ibutton/scenes/ibutton_scene_start.c
+++ b/applications/main/ibutton/scenes/ibutton_scene_start.c
@@ -14,9 +14,9 @@ void ibutton_scene_start_on_enter(void* context) {
 
     ibutton_reset_key(ibutton);
 
-    submenu_add_item(submenu, "Read", SubmenuIndexRead, ibutton_submenu_callback, ibutton);
-    submenu_add_item(submenu, "Saved", SubmenuIndexSaved, ibutton_submenu_callback, ibutton);
-    submenu_add_item(submenu, "Add Manually", SubmenuIndexAdd, ibutton_submenu_callback, ibutton);
+    submenu_add_item(submenu, "读取", SubmenuIndexRead, ibutton_submenu_callback, ibutton);
+    submenu_add_item(submenu, "已保存", SubmenuIndexSaved, ibutton_submenu_callback, ibutton);
+    submenu_add_item(submenu, "手动添加", SubmenuIndexAdd, ibutton_submenu_callback, ibutton);
 
     submenu_set_selected_item(
         submenu, scene_manager_get_scene_state(ibutton->scene_manager, iButtonSceneStart));
diff --git a/applications/main/infrared/scenes/infrared_scene_edit.c b/applications/main/infrared/scenes/infrared_scene_edit.c
index c22e95396..d4167853b 100644
--- a/applications/main/infrared/scenes/infrared_scene_edit.c
+++ b/applications/main/infrared/scenes/infrared_scene_edit.c
@@ -21,37 +21,37 @@ void infrared_scene_edit_on_enter(void* context) {
 
     submenu_add_item(
         submenu,
-        "Add Button",
+        "添加按钮",
         SubmenuIndexAddButton,
         infrared_scene_edit_submenu_callback,
         context);
     submenu_add_item(
         submenu,
-        "Rename Button",
+        "重命名按钮",
         SubmenuIndexRenameButton,
         infrared_scene_edit_submenu_callback,
         context);
     submenu_add_item(
         submenu,
-        "Move Button",
+        "移动按钮",
         SubmenuIndexMoveButton,
         infrared_scene_edit_submenu_callback,
         context);
     submenu_add_item(
         submenu,
-        "Delete Button",
+        "删除按钮",
         SubmenuIndexDeleteButton,
         infrared_scene_edit_submenu_callback,
         context);
     submenu_add_item(
         submenu,
-        "Rename Remote",
+        "重命名遥控器",
         SubmenuIndexRenameRemote,
         infrared_scene_edit_submenu_callback,
         context);
     submenu_add_item(
         submenu,
-        "Delete Remote",
+        "删除遥控器",
         SubmenuIndexDeleteRemote,
         infrared_scene_edit_submenu_callback,
         context);
diff --git a/applications/main/infrared/scenes/infrared_scene_start.c b/applications/main/infrared/scenes/infrared_scene_start.c
index 11944df19..a900be013 100644
--- a/applications/main/infrared/scenes/infrared_scene_start.c
+++ b/applications/main/infrared/scenes/infrared_scene_start.c
@@ -21,51 +21,51 @@ void infrared_scene_start_on_enter(void* context) {
 
     submenu_add_item(
         submenu,
-        "Universal Remotes",
+        "万能遥控器",
         SubmenuIndexUniversalRemotes,
         infrared_scene_start_submenu_callback,
         infrared);
     submenu_add_item(
         submenu,
-        "Learn New Remote",
+        "学习新遥控器",
         SubmenuIndexLearnNewRemote,
         infrared_scene_start_submenu_callback,
         infrared);
     submenu_add_item(
         submenu,
-        "Saved Remotes",
+        "已保存的遥控器",
         SubmenuIndexSavedRemotes,
         infrared_scene_start_submenu_callback,
         infrared);
     submenu_add_item(
         submenu,
-        "GPIO Settings",
+        "GPIO 设置",
         SubmenuIndexGpioSettings,
         infrared_scene_start_submenu_callback,
         infrared);
 
     submenu_add_lockable_item(
         submenu,
-        "Learn New Remote RAW",
+        "学习新遥控器 RAW",
         SubmenuIndexLearnNewRemoteRaw,
         infrared_scene_start_submenu_callback,
         infrared,
         !infrared->app_state.is_debug_enabled,
-        "Enable\n"
-        "Settings >\n"
-        "System >\n"
-        "Debug");
+        "启用\n"
+        "设置 >\n"
+        "系统 >\n"
+        "调试");
     submenu_add_lockable_item(
         submenu,
-        "Debug RX",
+        "调试 RX",
         SubmenuIndexDebug,
         infrared_scene_start_submenu_callback,
         infrared,
         !infrared->app_state.is_debug_enabled,
-        "Enable\n"
-        "Settings >\n"
-        "System >\n"
-        "Debug");
+        "启用\n"
+        "设置 >\n"
+        "系统 >\n"
+        "调试");
 
     const uint32_t submenu_index =
         scene_manager_get_scene_state(scene_manager, InfraredSceneStart);
diff --git a/applications/main/infrared/scenes/infrared_scene_universal.c b/applications/main/infrared/scenes/infrared_scene_universal.c
index 3616fe06a..91e5d29e6 100644
--- a/applications/main/infrared/scenes/infrared_scene_universal.c
+++ b/applications/main/infrared/scenes/infrared_scene_universal.c
@@ -24,28 +24,28 @@ void infrared_scene_universal_on_enter(void* context) {
 
     submenu_add_item(
         submenu,
-        "TVs",
+        "电视",
         SubmenuIndexUniversalTV,
         infrared_scene_universal_submenu_callback,
         context);
 
     submenu_add_item(
         submenu,
-        "Projectors",
+        "投影仪",
         SubmenuIndexUniversalProjector,
         infrared_scene_universal_submenu_callback,
         context);
 
     submenu_add_item(
         submenu,
-        "Audio",
+        "音频",
         SubmenuIndexUniversalAudio,
         infrared_scene_universal_submenu_callback,
         context);
 
     submenu_add_item(
         submenu,
-        "ACs",
+        "空调",
         SubmenuIndexUniversalAirConditioner,
         infrared_scene_universal_submenu_callback,
         context);
@@ -59,7 +59,7 @@ void infrared_scene_universal_on_enter(void* context) {
 
     submenu_add_item(
         submenu,
-        "Fans",
+        "风扇",
         SubmenuIndexUniversalFan,
         infrared_scene_universal_submenu_callback,
         context);
@@ -73,14 +73,14 @@ void infrared_scene_universal_on_enter(void* context) {
 
     submenu_add_item(
         submenu,
-        "Monitors",
+        "显示器",
         SubmenuIndexUniversalMonitor,
         infrared_scene_universal_submenu_callback,
         context);
 
     submenu_add_item(
         submenu,
-        "Digital Signs",
+        "数字标牌",
         SubmenuIndexUniversalDigitalSign,
         infrared_scene_universal_submenu_callback,
         context);
diff --git a/applications/main/lfrfid/scenes/lfrfid_scene_enter_password.c b/applications/main/lfrfid/scenes/lfrfid_scene_enter_password.c
index d387122eb..d611909a5 100644
--- a/applications/main/lfrfid/scenes/lfrfid_scene_enter_password.c
+++ b/applications/main/lfrfid/scenes/lfrfid_scene_enter_password.c
@@ -20,7 +20,7 @@ void lfrfid_scene_enter_password_on_enter(void* context) {
         bit_lib_num_to_bytes_be(pass, 4, app->password);
     }
 
-    byte_input_set_header_text(byte_input, "Enter the password in hex");
+    byte_input_set_header_text(byte_input, "请输入密码（十六进制）");
 
     byte_input_set_result_callback(
         byte_input, lfrfid_text_input_callback, NULL, app, app->password, 4);
diff --git a/applications/main/lfrfid/scenes/lfrfid_scene_extra_actions.c b/applications/main/lfrfid/scenes/lfrfid_scene_extra_actions.c
index 563f92409..8387b2e8f 100644
--- a/applications/main/lfrfid/scenes/lfrfid_scene_extra_actions.c
+++ b/applications/main/lfrfid/scenes/lfrfid_scene_extra_actions.c
@@ -21,45 +21,45 @@ void lfrfid_scene_extra_actions_on_enter(void* context) {
 
     submenu_add_item(
         submenu,
-        "Read ASK (FDX,Regular)",
+        "读取 ASK (FDX,常规)",
         SubmenuIndexASK,
         lfrfid_scene_extra_actions_submenu_callback,
         app);
     submenu_add_item(
         submenu,
-        "Read PSK (Indala)",
+        "读取 PSK (Indala)",
         SubmenuIndexPSK,
         lfrfid_scene_extra_actions_submenu_callback,
         app);
     submenu_add_item(
         submenu,
-        "Clear T5577 Password",
+        "清除 T5577 密码",
         SubmenuIndexClearT5577,
         lfrfid_scene_extra_actions_submenu_callback,
         app);
 
     submenu_add_lockable_item(
         submenu,
-        "Read RAW RFID data",
+        "读取 RAW RFID 数据",
         SubmenuIndexRAW,
         lfrfid_scene_extra_actions_submenu_callback,
         app,
         !furi_hal_rtc_is_flag_set(FuriHalRtcFlagDebug),
-        "Enable\n"
-        "Settings >\n"
-        "System >\n"
-        "Debug");
+        "启用\n"
+        "设置 >\n"
+        "系统 >\n"
+        "调试");
     submenu_add_lockable_item(
         submenu,
-        "Emulate RAW RFID data",
+        "仿真 RAW RFID 数据",
         SubmenuIndexRAWEmulate,
         lfrfid_scene_extra_actions_submenu_callback,
         app,
         !furi_hal_rtc_is_flag_set(FuriHalRtcFlagDebug),
-        "Enable\n"
-        "Settings >\n"
-        "System >\n"
-        "Debug");
+        "启用\n"
+        "设置 >\n"
+        "系统 >\n"
+        "调试");
 
     submenu_set_selected_item(
         submenu, scene_manager_get_scene_state(app->scene_manager, LfRfidSceneExtraActions));
diff --git a/applications/main/lfrfid/scenes/lfrfid_scene_raw_name.c b/applications/main/lfrfid/scenes/lfrfid_scene_raw_name.c
index 945b8fd8f..4f0d2745c 100644
--- a/applications/main/lfrfid/scenes/lfrfid_scene_raw_name.c
+++ b/applications/main/lfrfid/scenes/lfrfid_scene_raw_name.c
@@ -13,7 +13,7 @@ void lfrfid_scene_raw_name_on_enter(void* context) {
         lfrfid_text_store_set(app, "%s", key_name);
     }
 
-    text_input_set_header_text(text_input, "Name the raw file");
+    text_input_set_header_text(text_input, "命名原始文件");
 
     text_input_set_result_callback(
         text_input,
diff --git a/applications/main/lfrfid/scenes/lfrfid_scene_read_key_menu.c b/applications/main/lfrfid/scenes/lfrfid_scene_read_key_menu.c
index 22b083c76..5f131d4b9 100644
--- a/applications/main/lfrfid/scenes/lfrfid_scene_read_key_menu.c
+++ b/applications/main/lfrfid/scenes/lfrfid_scene_read_key_menu.c
@@ -18,11 +18,11 @@ void lfrfid_scene_read_key_menu_on_enter(void* context) {
     Submenu* submenu = app->submenu;
 
     submenu_add_item(
-        submenu, "Save", SubmenuIndexSave, lfrfid_scene_read_key_menu_submenu_callback, app);
+        submenu, "保存", SubmenuIndexSave, lfrfid_scene_read_key_menu_submenu_callback, app);
     submenu_add_item(
-        submenu, "Emulate", SubmenuIndexEmulate, lfrfid_scene_read_key_menu_submenu_callback, app);
+        submenu, "模拟", SubmenuIndexEmulate, lfrfid_scene_read_key_menu_submenu_callback, app);
     submenu_add_item(
-        submenu, "Write", SubmenuIndexWrite, lfrfid_scene_read_key_menu_submenu_callback, app);
+        submenu, "写入", SubmenuIndexWrite, lfrfid_scene_read_key_menu_submenu_callback, app);
 
     submenu_set_selected_item(
         submenu, scene_manager_get_scene_state(app->scene_manager, LfRfidSceneReadKeyMenu));
diff --git a/applications/main/lfrfid/scenes/lfrfid_scene_save_data.c b/applications/main/lfrfid/scenes/lfrfid_scene_save_data.c
index 20c8a10df..dd074e447 100644
--- a/applications/main/lfrfid/scenes/lfrfid_scene_save_data.c
+++ b/applications/main/lfrfid/scenes/lfrfid_scene_save_data.c
@@ -13,7 +13,7 @@ void lfrfid_scene_save_data_on_enter(void* context) {
         protocol_dict_get_data(app->dict, app->protocol_id, app->new_key_data, size);
     }
 
-    byte_input_set_header_text(byte_input, "Enter the data in hex");
+    byte_input_set_header_text(byte_input, "以十六进制输入数据");
 
     byte_input_set_result_callback(
         byte_input, lfrfid_text_input_callback, NULL, app, app->new_key_data, size);
diff --git a/applications/main/lfrfid/scenes/lfrfid_scene_save_name.c b/applications/main/lfrfid/scenes/lfrfid_scene_save_name.c
index 2f223ae87..bb60f4a2f 100644
--- a/applications/main/lfrfid/scenes/lfrfid_scene_save_name.c
+++ b/applications/main/lfrfid/scenes/lfrfid_scene_save_name.c
@@ -27,7 +27,7 @@ void lfrfid_scene_save_name_on_enter(void* context) {
         path_extract_dirname(furi_string_get_cstr(app->file_path), folder_path);
     }
 
-    text_input_set_header_text(text_input, "Name the card");
+    text_input_set_header_text(text_input, "为卡片命名");
     text_input_set_result_callback(
         text_input,
         lfrfid_text_input_callback,
diff --git a/applications/main/lfrfid/scenes/lfrfid_scene_saved_key_menu.c b/applications/main/lfrfid/scenes/lfrfid_scene_saved_key_menu.c
index 06c835bfb..53ea24a72 100644
--- a/applications/main/lfrfid/scenes/lfrfid_scene_saved_key_menu.c
+++ b/applications/main/lfrfid/scenes/lfrfid_scene_saved_key_menu.c
@@ -22,23 +22,23 @@ void lfrfid_scene_saved_key_menu_on_enter(void* context) {
     Submenu* submenu = app->submenu;
 
     submenu_add_item(
-        submenu, "Emulate", SubmenuIndexEmulate, lfrfid_scene_saved_key_menu_submenu_callback, app);
+        submenu, "模拟", SubmenuIndexEmulate, lfrfid_scene_saved_key_menu_submenu_callback, app);
     submenu_add_item(
-        submenu, "Write", SubmenuIndexWrite, lfrfid_scene_saved_key_menu_submenu_callback, app);
+        submenu, "写入", SubmenuIndexWrite, lfrfid_scene_saved_key_menu_submenu_callback, app);
     submenu_add_item(
         submenu,
-        "Write and set password",
+        "写入并设置密码",
         SubmenuIndexWriteAndSetPass,
         lfrfid_scene_saved_key_menu_submenu_callback,
         app);
     submenu_add_item(
-        submenu, "Edit", SubmenuIndexEdit, lfrfid_scene_saved_key_menu_submenu_callback, app);
+        submenu, "编辑", SubmenuIndexEdit, lfrfid_scene_saved_key_menu_submenu_callback, app);
     submenu_add_item(
-        submenu, "Rename", SubmenuIndexRename, lfrfid_scene_saved_key_menu_submenu_callback, app);
+        submenu, "重命名", SubmenuIndexRename, lfrfid_scene_saved_key_menu_submenu_callback, app);
     submenu_add_item(
-        submenu, "Delete", SubmenuIndexDelete, lfrfid_scene_saved_key_menu_submenu_callback, app);
+        submenu, "删除", SubmenuIndexDelete, lfrfid_scene_saved_key_menu_submenu_callback, app);
     submenu_add_item(
-        submenu, "Info", SubmenuIndexInfo, lfrfid_scene_saved_key_menu_submenu_callback, app);
+        submenu, "信息", SubmenuIndexInfo, lfrfid_scene_saved_key_menu_submenu_callback, app);
 
     submenu_set_selected_item(
         submenu, scene_manager_get_scene_state(app->scene_manager, LfRfidSceneSavedKeyMenu));
diff --git a/applications/main/lfrfid/scenes/lfrfid_scene_start.c b/applications/main/lfrfid/scenes/lfrfid_scene_start.c
index 5d0e6112a..50cf22d1f 100644
--- a/applications/main/lfrfid/scenes/lfrfid_scene_start.c
+++ b/applications/main/lfrfid/scenes/lfrfid_scene_start.c
@@ -12,18 +12,18 @@ void lfrfid_scene_start_on_enter(void* context) {
     Submenu* submenu = app->submenu;
 
     submenu_add_item(
-        submenu, "Read", LfRfidMenuIndexRead, lfrfid_scene_start_submenu_callback, app);
+        submenu, "读取", LfRfidMenuIndexRead, lfrfid_scene_start_submenu_callback, app);
     submenu_add_item(
-        submenu, "Saved", LfRfidMenuIndexSaved, lfrfid_scene_start_submenu_callback, app);
+        submenu, "已保存", LfRfidMenuIndexSaved, lfrfid_scene_start_submenu_callback, app);
     submenu_add_item(
         submenu,
-        "Add Manually",
+        "手动添加",
         LfRfidMenuIndexAddManually,
         lfrfid_scene_start_submenu_callback,
         app);
     submenu_add_item(
         submenu,
-        "Extra Actions",
+        "其他操作",
         LfRfidMenuIndexExtraActions,
         lfrfid_scene_start_submenu_callback,
         app);
diff --git a/applications/main/lfrfid/views/lfrfid_view_read.c b/applications/main/lfrfid/views/lfrfid_view_read.c
index a1c859af9..c8ce5cb0b 100644
--- a/applications/main/lfrfid/views/lfrfid_view_read.c
+++ b/applications/main/lfrfid/views/lfrfid_view_read.c
@@ -22,7 +22,7 @@ static void lfrfid_view_read_draw_callback(Canvas* canvas, void* _model) {
     canvas_set_font(canvas, FontPrimary);
 
     if(model->read_mode == LfRfidReadAsk) {
-        canvas_draw_str(canvas, 70, 16, "Reading 1/2");
+        canvas_draw_str(canvas, 70, 16, "读取 1/2");
 
         canvas_draw_str(canvas, 77, 29, "ASK");
         canvas_draw_icon(canvas, 70, 22, &I_ButtonRight_4x7);
@@ -31,7 +31,7 @@ static void lfrfid_view_read_draw_callback(Canvas* canvas, void* _model) {
         canvas_set_font(canvas, FontSecondary);
         canvas_draw_str(canvas, 77, 43, "PSK");
     } else if(model->read_mode == LfRfidReadPsk) {
-        canvas_draw_str(canvas, 70, 16, "Reading 2/2");
+        canvas_draw_str(canvas, 70, 16, "读取 2/2");
 
         canvas_draw_str(canvas, 77, 43, "PSK");
         canvas_draw_icon(canvas, 70, 36, &I_ButtonRight_4x7);
@@ -40,7 +40,7 @@ static void lfrfid_view_read_draw_callback(Canvas* canvas, void* _model) {
         canvas_set_font(canvas, FontSecondary);
         canvas_draw_str(canvas, 77, 29, "ASK");
     } else {
-        canvas_draw_str(canvas, 72, 16, "Reading");
+        canvas_draw_str(canvas, 72, 16, "读取");
 
         if(model->read_mode == LfRfidReadAskOnly) {
             canvas_draw_str(canvas, 77, 35, "ASK");
@@ -51,7 +51,7 @@ static void lfrfid_view_read_draw_callback(Canvas* canvas, void* _model) {
     }
 
     canvas_set_font(canvas, FontSecondary);
-    canvas_draw_str(canvas, 61, 56, "Don't move card");
+    canvas_draw_str(canvas, 61, 56, "请勿移动卡片");
 }
 
 void lfrfid_view_read_enter(void* context) {
diff --git a/applications/main/momentum_app/momentum_app.c b/applications/main/momentum_app/momentum_app.c
index 9b929ab70..9f4f5222a 100644
--- a/applications/main/momentum_app/momentum_app.c
+++ b/applications/main/momentum_app/momentum_app.c
@@ -16,7 +16,7 @@ bool momentum_app_apply(MomentumApp* app) {
     if(app->save_mainmenu_apps) {
         Stream* stream = file_stream_alloc(app->storage);
         if(file_stream_open(stream, MAINMENU_APPS_PATH, FSAM_READ_WRITE, FSOM_CREATE_ALWAYS)) {
-            stream_write_format(stream, "MenuAppList Version %u\n", 1);
+            stream_write_format(stream, "菜单应用列表 版本 %u\n", 1);
             for(size_t i = 0; i < CharList_size(app->mainmenu_app_exes); i++) {
                 stream_write_format(stream, "%s\n", *CharList_get(app->mainmenu_app_exes, i));
             }
@@ -70,9 +70,9 @@ bool momentum_app_apply(MomentumApp* app) {
         do {
             if(!flipper_format_file_open_always(file, "/ext/subghz/assets/extend_range.txt"))
                 break;
-            if(!flipper_format_write_header_cstr(file, "Flipper SubGhz Setting File", 1)) break;
+            if(!flipper_format_write_header_cstr(file, "Flipper SubGhz 设置文件", 1)) break;
             if(!flipper_format_write_comment_cstr(
-                   file, "Whether to allow extended ranges that can break your flipper"))
+                   file, "是否允许扩展范围，可能会损坏你的设备"))
                 break;
             if(!flipper_format_write_bool(
                    file, "use_ext_range_at_own_risk", &app->subghz_extend, 1))
@@ -123,8 +123,8 @@ bool momentum_app_apply(MomentumApp* app) {
     if(app->show_slideshow) {
         callback_reboot(NULL);
     } else if(app->require_reboot) {
-        popup_set_header(app->popup, "Rebooting...", 64, 26, AlignCenter, AlignCenter);
-        popup_set_text(app->popup, "Applying changes...", 64, 40, AlignCenter, AlignCenter);
+        popup_set_header(app->popup, "正在重启...", 64, 26, AlignCenter, AlignCenter);
+        popup_set_text(app->popup, "正在应用更改...", 64, 40, AlignCenter, AlignCenter);
         popup_set_callback(app->popup, callback_reboot);
         popup_set_context(app->popup, app);
         popup_set_timeout(app->popup, 1000);
@@ -133,8 +133,8 @@ bool momentum_app_apply(MomentumApp* app) {
         return true;
     } else if(app->apply_pack) {
         asset_packs_free();
-        popup_set_header(app->popup, "Reloading...", 64, 26, AlignCenter, AlignCenter);
-        popup_set_text(app->popup, "Applying asset pack...", 64, 40, AlignCenter, AlignCenter);
+        popup_set_header(app->popup, "正在重新加载...", 64, 26, AlignCenter, AlignCenter);
+        popup_set_text(app->popup, "正在应用资源包...", 64, 40, AlignCenter, AlignCenter);
         popup_set_callback(app->popup, NULL);
         popup_set_context(app->popup, NULL);
         popup_set_timeout(app->popup, 0);
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_interface.c b/applications/main/momentum_app/scenes/momentum_app_scene_interface.c
index c6877ab48..97cba6d04 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_interface.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_interface.c
@@ -18,19 +18,19 @@ void momentum_app_scene_interface_on_enter(void* context) {
     VariableItemList* var_item_list = app->var_item_list;
     VariableItem* item;
 
-    item = variable_item_list_add(var_item_list, "Graphics", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "图形", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
-    item = variable_item_list_add(var_item_list, "Mainmenu", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "主菜单", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
-    item = variable_item_list_add(var_item_list, "Lockscreen", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "锁屏", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
-    item = variable_item_list_add(var_item_list, "Statusbar", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "状态栏", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
-    item = variable_item_list_add(var_item_list, "File Browser", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "文件浏览器", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
     variable_item_list_set_enter_callback(
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_interface_filebrowser.c b/applications/main/momentum_app/scenes/momentum_app_scene_interface_filebrowser.c
index 7032b2f9c..f8ebe0769 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_interface_filebrowser.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_interface_filebrowser.c
@@ -22,7 +22,7 @@ void momentum_app_scene_interface_filebrowser_var_item_list_callback(void* conte
 static void momentum_app_scene_interface_filebrowser_sort_dirs_first_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.sort_dirs_first = value;
     app->save_settings = true;
 }
@@ -31,7 +31,7 @@ static void
     momentum_app_scene_interface_filebrowser_show_hidden_files_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.show_hidden_files = value;
     app->save_settings = true;
 }
@@ -40,7 +40,7 @@ static void
     momentum_app_scene_interface_filebrowser_show_internal_tab_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.show_internal_tab = value;
     app->save_settings = true;
 }
@@ -59,7 +59,7 @@ static void momentum_app_scene_interface_filebrowser_favorite_timeout_changed(Va
     uint32_t value = variable_item_get_current_value_index(item);
     char text[6];
     snprintf(text, sizeof(text), "%lu S", value);
-    variable_item_set_current_value_text(item, value ? text : "OFF");
+    variable_item_set_current_value_text(item, value ? text : "关闭");
     momentum_settings.favorite_timeout = value;
     app->save_settings = true;
 }
@@ -71,34 +71,37 @@ void momentum_app_scene_interface_filebrowser_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Folders Above Files",
+        "文件夹在前",
         2,
         momentum_app_scene_interface_filebrowser_sort_dirs_first_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.sort_dirs_first);
-    variable_item_set_current_value_text(item, momentum_settings.sort_dirs_first ? "ON" : "OFF");
+    variable_item_set_current_value_text(
+        item, momentum_settings.sort_dirs_first ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Show Hidden Files",
+        "显示隐藏文件",
         2,
         momentum_app_scene_interface_filebrowser_show_hidden_files_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.show_hidden_files);
-    variable_item_set_current_value_text(item, momentum_settings.show_hidden_files ? "ON" : "OFF");
+    variable_item_set_current_value_text(
+        item, momentum_settings.show_hidden_files ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Show Internal Tab",
+        "显示内部标签",
         2,
         momentum_app_scene_interface_filebrowser_show_internal_tab_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.show_internal_tab);
-    variable_item_set_current_value_text(item, momentum_settings.show_internal_tab ? "ON" : "OFF");
+    variable_item_set_current_value_text(
+        item, momentum_settings.show_internal_tab ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Show Path",
+        "显示路径",
         BrowserPathModeCount,
         momentum_app_scene_interface_filebrowser_browser_path_mode_changed,
         app);
@@ -108,14 +111,14 @@ void momentum_app_scene_interface_filebrowser_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Favorite Timeout",
+        "收藏超时",
         61,
         momentum_app_scene_interface_filebrowser_favorite_timeout_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.favorite_timeout);
     char text[4];
     snprintf(text, sizeof(text), "%lu S", momentum_settings.favorite_timeout);
-    variable_item_set_current_value_text(item, momentum_settings.favorite_timeout ? text : "OFF");
+    variable_item_set_current_value_text(item, momentum_settings.favorite_timeout ? text : "关闭");
 
     variable_item_list_set_enter_callback(
         var_item_list, momentum_app_scene_interface_filebrowser_var_item_list_callback, app);
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_interface_graphics.c b/applications/main/momentum_app/scenes/momentum_app_scene_interface_graphics.c
index b3b781ec3..c69dc87bc 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_interface_graphics.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_interface_graphics.c
@@ -16,7 +16,7 @@ static void momentum_app_scene_interface_graphics_asset_pack_changed(VariableIte
     MomentumApp* app = variable_item_get_context(item);
     uint8_t index = variable_item_get_current_value_index(item);
     variable_item_set_current_value_text(
-        item, index == 0 ? "Default" : *CharList_get(app->asset_pack_names, index - 1));
+        item, index == 0 ? "默认" : *CharList_get(app->asset_pack_names, index - 1));
     strlcpy(
         momentum_settings.asset_pack,
         index == 0 ? "" : *CharList_get(app->asset_pack_names, index - 1),
@@ -63,21 +63,21 @@ static void momentum_app_scene_interface_graphics_anim_speed_changed(VariableIte
 }
 
 const char* const cycle_anims_names[] = {
-    "OFF",
+    "关闭",
     "Meta.txt",
-    "15 S",
-    "30 S",
-    "1 M",
-    "2 M",
-    "5 M",
-    "10 M",
-    "15 M",
-    "30 M",
-    "1 H",
-    "2 H",
-    "6 H",
-    "12 H",
-    "24 H",
+    "15 秒",
+    "30 秒",
+    "1 分钟",
+    "2 分钟",
+    "5 分钟",
+    "10 分钟",
+    "15 分钟",
+    "30 分钟",
+    "1 小时",
+    "2 小时",
+    "6 小时",
+    "12 小时",
+    "24 小时",
 };
 const int32_t cycle_anims_values[COUNT_OF(cycle_anims_names)] = {
     -1,
@@ -107,7 +107,7 @@ static void momentum_app_scene_interface_graphics_cycle_anims_changed(VariableIt
 static void momentum_app_scene_interface_graphics_unlock_anims_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.unlock_anims = value;
     app->save_settings = true;
 }
@@ -120,7 +120,7 @@ void momentum_app_scene_interface_graphics_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Asset Pack",
+        "资源包",
         CharList_size(app->asset_pack_names) + 1,
         momentum_app_scene_interface_graphics_asset_pack_changed,
         app);
@@ -128,12 +128,12 @@ void momentum_app_scene_interface_graphics_on_enter(void* context) {
     variable_item_set_current_value_text(
         item,
         app->asset_pack_index == 0 ?
-            "Default" :
+            "默认" :
             *CharList_get(app->asset_pack_names, app->asset_pack_index - 1));
 
     item = variable_item_list_add(
         var_item_list,
-        "Anim Speed",
+        "动画速度",
         COUNT_OF(anim_speed_names),
         momentum_app_scene_interface_graphics_anim_speed_changed,
         app);
@@ -144,7 +144,7 @@ void momentum_app_scene_interface_graphics_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Cycle Anims",
+        "循环动画",
         COUNT_OF(cycle_anims_names),
         momentum_app_scene_interface_graphics_cycle_anims_changed,
         app);
@@ -155,12 +155,12 @@ void momentum_app_scene_interface_graphics_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Unlock Anims",
+        "解锁动画",
         2,
         momentum_app_scene_interface_graphics_unlock_anims_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.unlock_anims);
-    variable_item_set_current_value_text(item, momentum_settings.unlock_anims ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, momentum_settings.unlock_anims ? "开启" : "关闭");
 
     variable_item_list_set_enter_callback(
         var_item_list, momentum_app_scene_interface_graphics_var_item_list_callback, app);
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_interface_graphics_pack.c b/applications/main/momentum_app/scenes/momentum_app_scene_interface_graphics_pack.c
index a14aca398..be154f2ab 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_interface_graphics_pack.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_interface_graphics_pack.c
@@ -17,7 +17,7 @@ void momentum_app_scene_interface_graphics_pack_on_enter(void* context) {
     Submenu* submenu = app->submenu;
 
     submenu_add_item(
-        submenu, "Default", 0, momentum_app_scene_interface_graphics_pack_submenu_callback, app);
+        submenu, "默认", 0, momentum_app_scene_interface_graphics_pack_submenu_callback, app);
 
     for(size_t i = 0; i < CharList_size(app->asset_pack_names); i++) {
         submenu_add_item(
@@ -28,7 +28,7 @@ void momentum_app_scene_interface_graphics_pack_on_enter(void* context) {
             app);
     }
 
-    submenu_set_header(submenu, "Choose Asset Pack:");
+    submenu_set_header(submenu, "选择资产包：");
 
     submenu_set_selected_item(submenu, app->asset_pack_index);
 
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_interface_lockscreen.c b/applications/main/momentum_app/scenes/momentum_app_scene_interface_lockscreen.c
index f879ddf12..62a260471 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_interface_lockscreen.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_interface_lockscreen.c
@@ -19,7 +19,7 @@ void momentum_app_scene_interface_lockscreen_var_item_list_callback(void* contex
 static void momentum_app_scene_interface_lockscreen_lock_on_boot_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.lock_on_boot = value;
     app->save_settings = true;
 }
@@ -27,7 +27,7 @@ static void momentum_app_scene_interface_lockscreen_lock_on_boot_changed(Variabl
 static void momentum_app_scene_interface_lockscreen_bad_pins_format_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.bad_pins_format = value;
     app->save_settings = true;
 }
@@ -36,7 +36,7 @@ static void
     momentum_app_scene_interface_lockscreen_allow_locked_rpc_usb_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.allow_locked_rpc_usb = value;
     app->save_settings = true;
 }
@@ -45,7 +45,7 @@ static void
     momentum_app_scene_interface_lockscreen_allow_locked_rpc_ble_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.allow_locked_rpc_ble = value;
     app->save_settings = true;
 }
@@ -54,7 +54,7 @@ static void
     momentum_app_scene_interface_lockscreen_lockscreen_poweroff_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.lockscreen_poweroff = value;
     app->save_settings = true;
 }
@@ -62,7 +62,7 @@ static void
 static void momentum_app_scene_interface_lockscreen_lockscreen_time_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.lockscreen_time = value;
     app->save_settings = true;
 }
@@ -71,7 +71,7 @@ static void
     momentum_app_scene_interface_lockscreen_lockscreen_seconds_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.lockscreen_seconds = value;
     app->save_settings = true;
 }
@@ -79,7 +79,7 @@ static void
 static void momentum_app_scene_interface_lockscreen_lockscreen_date_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.lockscreen_date = value;
     app->save_settings = true;
 }
@@ -88,7 +88,7 @@ static void
     momentum_app_scene_interface_lockscreen_lockscreen_statusbar_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.lockscreen_statusbar = value;
     app->save_settings = true;
 }
@@ -96,7 +96,7 @@ static void
 static void momentum_app_scene_interface_lockscreen_lockscreen_prompt_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.lockscreen_prompt = value;
     app->save_settings = true;
 }
@@ -105,7 +105,7 @@ static void
     momentum_app_scene_interface_lockscreen_lockscreen_transparent_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.lockscreen_transparent = value;
     app->save_settings = true;
 }
@@ -117,108 +117,112 @@ void momentum_app_scene_interface_lockscreen_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Lock on Boot",
+        "启动时锁屏",
         2,
         momentum_app_scene_interface_lockscreen_lock_on_boot_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.lock_on_boot);
-    variable_item_set_current_value_text(item, momentum_settings.lock_on_boot ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, momentum_settings.lock_on_boot ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Format on 10 Bad PINs",
+        "10 次错误 PIN 格式化",
         2,
         momentum_app_scene_interface_lockscreen_bad_pins_format_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.bad_pins_format);
-    variable_item_set_current_value_text(item, momentum_settings.bad_pins_format ? "ON" : "OFF");
+    variable_item_set_current_value_text(
+        item, momentum_settings.bad_pins_format ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Allow USB RPC While Locked",
+        "锁定时允许USB",
         2,
         momentum_app_scene_interface_lockscreen_allow_locked_rpc_usb_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.allow_locked_rpc_usb);
     variable_item_set_current_value_text(
-        item, momentum_settings.allow_locked_rpc_usb ? "ON" : "OFF");
+        item, momentum_settings.allow_locked_rpc_usb ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Allow BLE RPC While Locked",
+        "锁定时允许蓝牙",
         2,
         momentum_app_scene_interface_lockscreen_allow_locked_rpc_ble_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.allow_locked_rpc_ble);
     variable_item_set_current_value_text(
-        item, momentum_settings.allow_locked_rpc_ble ? "ON" : "OFF");
+        item, momentum_settings.allow_locked_rpc_ble ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Allow Poweroff",
+        "允许关机",
         2,
         momentum_app_scene_interface_lockscreen_lockscreen_poweroff_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.lockscreen_poweroff);
     variable_item_set_current_value_text(
-        item, momentum_settings.lockscreen_poweroff ? "ON" : "OFF");
+        item, momentum_settings.lockscreen_poweroff ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Show Time",
+        "显示时间",
         2,
         momentum_app_scene_interface_lockscreen_lockscreen_time_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.lockscreen_time);
-    variable_item_set_current_value_text(item, momentum_settings.lockscreen_time ? "ON" : "OFF");
+    variable_item_set_current_value_text(
+        item, momentum_settings.lockscreen_time ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Show Seconds",
+        "显示秒数",
         2,
         momentum_app_scene_interface_lockscreen_lockscreen_seconds_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.lockscreen_seconds);
     variable_item_set_current_value_text(
-        item, momentum_settings.lockscreen_seconds ? "ON" : "OFF");
+        item, momentum_settings.lockscreen_seconds ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Show Date",
+        "显示日期",
         2,
         momentum_app_scene_interface_lockscreen_lockscreen_date_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.lockscreen_date);
-    variable_item_set_current_value_text(item, momentum_settings.lockscreen_date ? "ON" : "OFF");
+    variable_item_set_current_value_text(
+        item, momentum_settings.lockscreen_date ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Show Statusbar",
+        "显示状态栏",
         2,
         momentum_app_scene_interface_lockscreen_lockscreen_statusbar_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.lockscreen_statusbar);
     variable_item_set_current_value_text(
-        item, momentum_settings.lockscreen_statusbar ? "ON" : "OFF");
+        item, momentum_settings.lockscreen_statusbar ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Unlock Prompt",
+        "解锁提示",
         2,
         momentum_app_scene_interface_lockscreen_lockscreen_prompt_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.lockscreen_prompt);
-    variable_item_set_current_value_text(item, momentum_settings.lockscreen_prompt ? "ON" : "OFF");
+    variable_item_set_current_value_text(
+        item, momentum_settings.lockscreen_prompt ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Transparent (see animation)",
+        "透明（显示动画）",
         2,
         momentum_app_scene_interface_lockscreen_lockscreen_transparent_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.lockscreen_transparent);
     variable_item_set_current_value_text(
-        item, momentum_settings.lockscreen_transparent ? "ON" : "OFF");
+        item, momentum_settings.lockscreen_transparent ? "开启" : "关闭");
 
     variable_item_list_set_enter_callback(
         var_item_list, momentum_app_scene_interface_lockscreen_var_item_list_callback, app);
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_interface_mainmenu.c b/applications/main/momentum_app/scenes/momentum_app_scene_interface_mainmenu.c
index afad8f7d2..c7f337fe1 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_interface_mainmenu.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_interface_mainmenu.c
@@ -15,13 +15,13 @@ void momentum_app_scene_interface_mainmenu_var_item_list_callback(void* context,
 }
 
 const char* const menu_style_names[MenuStyleCount] = {
-    "List",
+    "列表",
     "Wii",
     "DSi",
     "PS4",
-    "Vertical",
+    "纵向",
     "C64",
-    "Compact",
+    "紧凑",
     "MNTM",
     "CoverFlow",
 };
@@ -73,14 +73,14 @@ void momentum_app_scene_interface_mainmenu_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Menu Style",
+        "菜单样式",
         MenuStyleCount,
         momentum_app_scene_interface_mainmenu_menu_style_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.menu_style);
     variable_item_set_current_value_text(item, menu_style_names[momentum_settings.menu_style]);
 
-    variable_item_list_add(var_item_list, "Reset Menu", 0, NULL, app);
+    variable_item_list_add(var_item_list, "重置菜单", 0, NULL, app);
 
     size_t count = CharList_size(app->mainmenu_app_labels);
     item = variable_item_list_add(
@@ -94,19 +94,19 @@ void momentum_app_scene_interface_mainmenu_on_enter(void* context) {
             item, *CharList_get(app->mainmenu_app_labels, app->mainmenu_app_index));
     } else {
         app->mainmenu_app_index = 0;
-        variable_item_set_current_value_text(item, "None");
+        variable_item_set_current_value_text(item, "无");
     }
     variable_item_set_current_value_index(item, app->mainmenu_app_index);
 
-    variable_item_list_add(var_item_list, "Add App", 0, NULL, app);
+    variable_item_list_add(var_item_list, "添加应用", 0, NULL, app);
 
     item = variable_item_list_add(
-        var_item_list, "Move App", 3, momentum_app_scene_interface_mainmenu_move_app_changed, app);
+        var_item_list, "移动应用", 3, momentum_app_scene_interface_mainmenu_move_app_changed, app);
     variable_item_set_current_value_text(item, "");
     variable_item_set_current_value_index(item, 1);
-    variable_item_set_locked(item, count < 2, "Can't move\nwith less\nthan 2 apps!");
+    variable_item_set_locked(item, count < 2, "无法移动\n少于2个\n应用！");
 
-    variable_item_list_add(var_item_list, "Remove App", 0, NULL, app);
+    variable_item_list_add(var_item_list, "移除应用", 0, NULL, app);
 
     variable_item_list_set_enter_callback(
         var_item_list, momentum_app_scene_interface_mainmenu_var_item_list_callback, app);
@@ -154,7 +154,7 @@ bool momentum_app_scene_interface_mainmenu_on_event(void* context, SceneManagerE
             } else {
                 app->mainmenu_app_index = 0;
                 variable_item_set_item_label(item, "App");
-                variable_item_set_current_value_text(item, "None");
+                variable_item_set_current_value_text(item, "无");
             }
             variable_item_set_current_value_index(item, app->mainmenu_app_index);
             variable_item_set_values_count(item, count);
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_interface_mainmenu_add.c b/applications/main/momentum_app/scenes/momentum_app_scene_interface_mainmenu_add.c
index 2bb63491c..dd37f39fd 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_interface_mainmenu_add.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_interface_mainmenu_add.c
@@ -68,18 +68,18 @@ void momentum_app_scene_interface_mainmenu_add_on_enter(void* context) {
     MomentumApp* app = context;
     Submenu* submenu = app->submenu;
 
-    submenu_set_header(submenu, "Add Menu App:");
+    submenu_set_header(submenu, "添加菜单应用：");
 
     submenu_add_item(
         submenu,
-        "Main App",
+        "主应用",
         SubmenuIndexMainApp,
         momentum_app_scene_interface_mainmenu_add_submenu_callback,
         app);
 
     submenu_add_item(
         submenu,
-        "External App",
+        "外部应用",
         SubmenuIndexExternalApp,
         momentum_app_scene_interface_mainmenu_add_submenu_callback,
         app);
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_interface_mainmenu_reset.c b/applications/main/momentum_app/scenes/momentum_app_scene_interface_mainmenu_reset.c
index 8fd133ec0..80d1a4545 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_interface_mainmenu_reset.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_interface_mainmenu_reset.c
@@ -15,7 +15,7 @@ void momentum_app_scene_interface_mainmenu_reset_on_enter(void* context) {
     dialog_ex_set_header(dialog_ex, "Reset Menu Apps?", 64, 10, AlignCenter, AlignCenter);
     dialog_ex_set_text(dialog_ex, "Your edits will be lost!", 64, 32, AlignCenter, AlignCenter);
     dialog_ex_set_left_button_text(dialog_ex, "Cancel");
-    dialog_ex_set_right_button_text(dialog_ex, "Reset");
+    dialog_ex_set_right_button_text(dialog_ex, "重置");
 
     dialog_ex_set_context(dialog_ex, app);
     dialog_ex_set_result_callback(
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_interface_statusbar.c b/applications/main/momentum_app/scenes/momentum_app_scene_interface_statusbar.c
index 6035b12c6..202be37c8 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_interface_statusbar.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_interface_statusbar.c
@@ -33,7 +33,7 @@ static void momentum_app_scene_interface_statusbar_battery_icon_changed(Variable
 static void momentum_app_scene_interface_statusbar_statusbar_clock_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     app->desktop_settings.display_clock = value;
     app->save_desktop = true;
 }
@@ -41,7 +41,7 @@ static void momentum_app_scene_interface_statusbar_statusbar_clock_changed(Varia
 static void momentum_app_scene_interface_statusbar_status_icons_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.status_icons = value;
     app->save_settings = true;
 }
@@ -49,7 +49,7 @@ static void momentum_app_scene_interface_statusbar_status_icons_changed(Variable
 static void momentum_app_scene_interface_statusbar_bar_borders_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.bar_borders = value;
     app->save_settings = true;
 }
@@ -57,7 +57,7 @@ static void momentum_app_scene_interface_statusbar_bar_borders_changed(VariableI
 static void momentum_app_scene_interface_statusbar_bar_background_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.bar_background = value;
     app->save_settings = true;
 }
@@ -69,7 +69,7 @@ void momentum_app_scene_interface_statusbar_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Battery Icon",
+        "电池图标",
         BatteryIconCount,
         momentum_app_scene_interface_statusbar_battery_icon_changed,
         app);
@@ -78,39 +78,39 @@ void momentum_app_scene_interface_statusbar_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Show Clock",
+        "显示时钟",
         2,
         momentum_app_scene_interface_statusbar_statusbar_clock_changed,
         app);
     variable_item_set_current_value_index(item, app->desktop_settings.display_clock);
-    variable_item_set_current_value_text(item, app->desktop_settings.display_clock ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, app->desktop_settings.display_clock ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Status Icons",
+        "状态图标",
         2,
         momentum_app_scene_interface_statusbar_status_icons_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.status_icons);
-    variable_item_set_current_value_text(item, momentum_settings.status_icons ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, momentum_settings.status_icons ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Bar Borders",
+        "边框",
         2,
         momentum_app_scene_interface_statusbar_bar_borders_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.bar_borders);
-    variable_item_set_current_value_text(item, momentum_settings.bar_borders ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, momentum_settings.bar_borders ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "Bar Background",
+        "背景",
         2,
         momentum_app_scene_interface_statusbar_bar_background_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.bar_background);
-    variable_item_set_current_value_text(item, momentum_settings.bar_background ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, momentum_settings.bar_background ? "开启" : "关闭");
 
     variable_item_list_set_enter_callback(
         var_item_list, momentum_app_scene_interface_statusbar_var_item_list_callback, app);
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_misc.c b/applications/main/momentum_app/scenes/momentum_app_scene_misc.c
index ca66861f8..bd2722861 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_misc.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_misc.c
@@ -31,16 +31,16 @@ void momentum_app_scene_misc_on_enter(void* context) {
     VariableItem* item;
     uint8_t value_index;
 
-    item = variable_item_list_add(var_item_list, "Screen", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "屏幕", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
-    item = variable_item_list_add(var_item_list, "Dolphin", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "海豚", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
-    item = variable_item_list_add(var_item_list, "Spoofing Options", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "伪装选项", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
-    item = variable_item_list_add(var_item_list, "VGM Options", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "VGM选项", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
     char cap_str[6];
@@ -48,14 +48,14 @@ void momentum_app_scene_misc_on_enter(void* context) {
     snprintf(cap_str, sizeof(cap_str), "%lu%%", (uint32_t)value_index * CHARGE_CAP_INTV);
     item = variable_item_list_add(
         var_item_list,
-        "Charge Cap",
+        "充电上限",
         100 / CHARGE_CAP_INTV,
         momentum_app_scene_misc_charge_cap_changed,
         app);
     variable_item_set_current_value_index(item, value_index - 1);
     variable_item_set_current_value_text(item, cap_str);
 
-    variable_item_list_add(var_item_list, "Show Momentum Intro", 0, NULL, app);
+    variable_item_list_add(var_item_list, "显示固件介绍", 0, NULL, app);
 
     variable_item_list_set_enter_callback(
         var_item_list, momentum_app_scene_misc_var_item_list_callback, app);
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_misc_dolphin.c b/applications/main/momentum_app/scenes/momentum_app_scene_misc_dolphin.c
index 131205ab4..60cd4920a 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_misc_dolphin.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_misc_dolphin.c
@@ -122,7 +122,7 @@ void momentum_app_scene_misc_dolphin_on_enter(void* context) {
     snprintf(level_str, sizeof(level_str), "%u", level);
     item = variable_item_list_add(
         var_item_list,
-        "Dolphin Level",
+        "Dolphin 等级",
         DOLPHIN_LEVEL_COUNT + 1,
         momentum_app_scene_misc_dolphin_dolphin_level_changed,
         app);
@@ -134,7 +134,7 @@ void momentum_app_scene_misc_dolphin_on_enter(void* context) {
     // uin8_t index too small for all levels, use 3 fake items to
     // show buttons and change values in callback
     item = variable_item_list_add(
-        var_item_list, "Dolphin XP", 3, momentum_app_scene_misc_dolphin_dolphin_xp_changed, app);
+        var_item_list, "Dolphin 经验值", 3, momentum_app_scene_misc_dolphin_dolphin_xp_changed, app);
     variable_item_set_current_value_index(
         item,
         app->dolphin_xp == 0              ? 0 :
@@ -146,7 +146,7 @@ void momentum_app_scene_misc_dolphin_on_enter(void* context) {
     snprintf(angry_str, sizeof(angry_str), "%lu", app->dolphin_angry);
     item = variable_item_list_add(
         var_item_list,
-        "Dolphin Angry",
+        "Dolphin 愤怒程度",
         BUTTHURT_MAX + 1,
         momentum_app_scene_misc_dolphin_dolphin_angry_changed,
         app);
@@ -155,14 +155,13 @@ void momentum_app_scene_misc_dolphin_on_enter(void* context) {
     variable_item_set_locked(
         item,
         settings.happy_mode,
-        "Settings >\n"
-        "Desktop >\n"
-        "Happy Mode\n"
-        "is enabled!");
+        "设置>桌面\n"
+        "开心模式\n"
+        "已启用！");
 
     item = variable_item_list_add(
         var_item_list,
-        "Butthurt Timer",
+        "受伤计时器",
         COUNT_OF(butthurt_timer_names),
         momentum_app_scene_misc_dolphin_butthurt_timer_changed,
         app);
@@ -173,10 +172,9 @@ void momentum_app_scene_misc_dolphin_on_enter(void* context) {
     variable_item_set_locked(
         item,
         settings.happy_mode,
-        "Settings >\n"
-        "Desktop >\n"
-        "Happy Mode\n"
-        "is enabled!");
+        "设置>桌面\n"
+        "开心模式\n"
+        "已启用！");
 
     variable_item_list_set_enter_callback(
         var_item_list, momentum_app_scene_misc_dolphin_var_item_list_callback, app);
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_misc_dolphin_xp.c b/applications/main/momentum_app/scenes/momentum_app_scene_misc_dolphin_xp.c
index 0b931d9e4..dafe1abc8 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_misc_dolphin_xp.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_misc_dolphin_xp.c
@@ -16,7 +16,7 @@ void momentum_app_scene_misc_dolphin_xp_on_enter(void* context) {
     MomentumApp* app = context;
     NumberInput* number_input = app->number_input;
 
-    number_input_set_header_text(number_input, "Enter Dolphin XP value");
+    number_input_set_header_text(number_input, "请输入 Dolphin 经验值");
 
     number_input_set_result_callback(
         number_input,
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_misc_screen.c b/applications/main/momentum_app/scenes/momentum_app_scene_misc_screen.c
index 0f2e7def3..b4c9f7185 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_misc_screen.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_misc_screen.c
@@ -21,14 +21,14 @@ void momentum_app_scene_misc_screen_var_item_list_callback(void* context, uint32
 static void momentum_app_scene_misc_screen_dark_mode_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     momentum_settings.dark_mode = value;
     app->save_settings = true;
 }
 
 static void momentum_app_scene_misc_screen_hand_orient_changed(VariableItem* item) {
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     if(value) {
         furi_hal_rtc_set_flag(FuriHalRtcFlagHandOrient);
     } else {
@@ -46,25 +46,25 @@ static const struct {
     RgbColor color;
 } lcd_colors[] = {
     // clang-format off
-    {"Off", {{0, 0, 0}}},
-    {"Orange", {{255, 69, 0}}},
-    {"Red", {{255, 0, 0}}},
-    {"Maroon", {{128, 0, 0}}},
-    {"Yellow", {{255, 255, 0}}},
-    {"Olive", {{128, 128, 0}}},
-    {"Lime", {{0, 255, 0}}},
-    {"Green", {{0, 128, 0}}},
-    {"Aqua", {{0, 255, 127}}},
-    {"Cyan", {{0, 210, 210}}},
-    {"Azure", {{0, 127, 255}}},
-    {"Teal", {{0, 128, 128}}},
-    {"Blue", {{0, 0, 255}}},
-    {"Navy", {{0, 0, 128}}},
-    {"Purple", {{128, 0, 128}}},
-    {"Fuchsia", {{255, 0, 255}}},
-    {"Pink", {{173, 31, 173}}},
-    {"Brown", {{165, 42, 42}}},
-    {"White", {{255, 192, 203}}},
+    {"关闭", {{0, 0, 0}}},
+    {"橙色", {{255, 69, 0}}},
+    {"红色", {{255, 0, 0}}},
+    {"深红", {{128, 0, 0}}},
+    {"黄色", {{255, 255, 0}}},
+    {"橄榄色", {{128, 128, 0}}},
+    {"青色", {{0, 255, 0}}},
+    {"绿色", {{0, 128, 0}}},
+    {"水绿色", {{0, 255, 127}}},
+    {"青色", {{0, 210, 210}}},
+    {"蔚蓝色", {{0, 127, 255}}},
+    {"青绿色", {{0, 128, 128}}},
+    {"蓝色", {{0, 0, 255}}},
+    {"海军蓝", {{0, 0, 128}}},
+    {"紫色", {{128, 0, 128}}},
+    {"洋红", {{255, 0, 255}}},
+    {"粉色", {{173, 31, 173}}},
+    {"棕色", {{165, 42, 42}}},
+    {"白色", {{255, 192, 203}}},
     // clang-format on
 };
 static const size_t lcd_sz = COUNT_OF(lcd_colors);
@@ -94,9 +94,9 @@ static const struct {
 };
 
 const char* const rainbow_lcd_names[RGBBacklightRainbowModeCount] = {
-    "OFF",
-    "Wave",
-    "Static",
+    "关闭",
+    "波动",
+    "静态",
 };
 static void momentum_app_scene_misc_screen_rainbow_lcd_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
@@ -173,25 +173,25 @@ void momentum_app_scene_misc_screen_on_enter(void* context) {
     uint8_t value_index;
 
     item = variable_item_list_add(
-        var_item_list, "Dark Mode", 2, momentum_app_scene_misc_screen_dark_mode_changed, app);
+        var_item_list, "深色模式", 2, momentum_app_scene_misc_screen_dark_mode_changed, app);
     variable_item_set_current_value_index(item, momentum_settings.dark_mode);
-    variable_item_set_current_value_text(item, momentum_settings.dark_mode ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, momentum_settings.dark_mode ? "开启" : "关闭");
 
     item = variable_item_list_add(
-        var_item_list, "Left Handed", 2, momentum_app_scene_misc_screen_hand_orient_changed, app);
+        var_item_list, "左手模式", 2, momentum_app_scene_misc_screen_hand_orient_changed, app);
     value_index = furi_hal_rtc_is_flag_set(FuriHalRtcFlagHandOrient);
     variable_item_set_current_value_index(item, value_index);
-    variable_item_set_current_value_text(item, value_index ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value_index ? "开启" : "关闭");
 
     item = variable_item_list_add(
         var_item_list,
-        "RGB Backlight",
+        "RGB 背光",
         2,
         momentum_app_scene_misc_screen_rgb_backlight_changed,
         app);
     value_index = momentum_settings.rgb_backlight;
     variable_item_set_current_value_index(item, value_index);
-    variable_item_set_current_value_text(item, value_index ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value_index ? "开启" : "关闭");
 
     RgbColor color;
     for(size_t i = 0; i < COUNT_OF(lcd_cols); i++) {
@@ -214,23 +214,23 @@ void momentum_app_scene_misc_screen_on_enter(void* context) {
             snprintf(str, sizeof(str), "%02X%02X%02X", color.r, color.g, color.b);
             variable_item_set_current_value_text(item, str);
         }
-        variable_item_set_locked(item, !momentum_settings.rgb_backlight, "Needs RGB\nBacklight!");
+        variable_item_set_locked(item, !momentum_settings.rgb_backlight, "需要 RGB\n背光！");
     }
 
     item = variable_item_list_add(
         var_item_list,
-        "Rainbow LCD",
+        "彩虹 LCD",
         RGBBacklightRainbowModeCount,
         momentum_app_scene_misc_screen_rainbow_lcd_changed,
         app);
     value_index = rgb_backlight_get_rainbow_mode();
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, rainbow_lcd_names[value_index]);
-    variable_item_set_locked(item, !momentum_settings.rgb_backlight, "Needs RGB\nBacklight!");
+    variable_item_set_locked(item, !momentum_settings.rgb_backlight, "需要 RGB\n背光！");
 
     item = variable_item_list_add(
         var_item_list,
-        "Rainbow Speed",
+        "彩虹速度",
         25,
         momentum_app_scene_misc_screen_rainbow_speed_changed,
         app);
@@ -239,11 +239,11 @@ void momentum_app_scene_misc_screen_on_enter(void* context) {
     char speed_str[4];
     snprintf(speed_str, sizeof(speed_str), "%d", value_index);
     variable_item_set_current_value_text(item, speed_str);
-    variable_item_set_locked(item, !momentum_settings.rgb_backlight, "Needs RGB\nBacklight!");
+    variable_item_set_locked(item, !momentum_settings.rgb_backlight, "需要 RGB\n背光！");
 
     item = variable_item_list_add(
         var_item_list,
-        "Rainbow Interval",
+        "彩虹间隔",
         COUNT_OF(rainbow_interval_values),
         momentum_app_scene_misc_screen_rainbow_interval_changed,
         app);
@@ -253,11 +253,11 @@ void momentum_app_scene_misc_screen_on_enter(void* context) {
         COUNT_OF(rainbow_interval_values));
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, rainbow_interval_names[value_index]);
-    variable_item_set_locked(item, !momentum_settings.rgb_backlight, "Needs RGB\nBacklight!");
+    variable_item_set_locked(item, !momentum_settings.rgb_backlight, "需要 RGB\n背光！");
 
     item = variable_item_list_add(
         var_item_list,
-        "Rainbow Saturation",
+        "彩虹饱和度",
         255,
         momentum_app_scene_misc_screen_rainbow_saturation_changed,
         app);
@@ -266,7 +266,7 @@ void momentum_app_scene_misc_screen_on_enter(void* context) {
     char saturation_str[4];
     snprintf(saturation_str, sizeof(saturation_str), "%d", value_index);
     variable_item_set_current_value_text(item, saturation_str);
-    variable_item_set_locked(item, !momentum_settings.rgb_backlight, "Needs RGB\nBacklight!");
+    variable_item_set_locked(item, !momentum_settings.rgb_backlight, "需要 RGB\n背光！");
 
     variable_item_list_set_enter_callback(
         var_item_list, momentum_app_scene_misc_screen_var_item_list_callback, app);
@@ -295,7 +295,7 @@ bool momentum_app_scene_misc_screen_on_event(void* context, SceneManagerEvent ev
             if(value) {
                 DialogMessage* msg = dialog_message_alloc();
                 dialog_message_set_header(msg, "RGB Backlight", 64, 0, AlignCenter, AlignTop);
-                dialog_message_set_buttons(msg, "No", NULL, "Yes");
+                dialog_message_set_buttons(msg, "No", NULL, "是");
                 dialog_message_set_text(
                     msg,
                     "This option requires installing\na hardware modification!\nIs it installed?",
@@ -319,29 +319,29 @@ bool momentum_app_scene_misc_screen_on_event(void* context, SceneManagerEvent ev
                     variable_item_set_locked(
                         variable_item_list_get(app->var_item_list, VarItemListIndexLcdColor0 + i),
                         !value,
-                        "Needs RGB\nBacklight!");
+                        "需要 RGB\n背光！");
                 }
                 variable_item_set_locked(
                     variable_item_list_get(app->var_item_list, VarItemListIndexRainbowLcd),
                     !value,
-                    "Needs RGB\nBacklight!");
+                    "需要 RGB\n背光！");
                 variable_item_set_locked(
                     variable_item_list_get(app->var_item_list, VarItemListIndexRainbowSpeed),
                     !value,
-                    "Needs RGB\nBacklight!");
+                    "需要 RGB\n背光！");
                 variable_item_set_locked(
                     variable_item_list_get(app->var_item_list, VarItemListIndexRainbowInterval),
                     !value,
-                    "Needs RGB\nBacklight!");
+                    "需要 RGB\n背光！");
                 variable_item_set_locked(
                     variable_item_list_get(app->var_item_list, VarItemListIndexRainbowSaturation),
                     !value,
-                    "Needs RGB\nBacklight!");
+                    "需要 RGB\n背光！");
             } else {
                 value = !value;
             }
             variable_item_set_current_value_index(item, value);
-            variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+            variable_item_set_current_value_text(item, value ? "开启" : "关闭");
             break;
         }
         case VarItemListIndexLcdColor0:
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_misc_screen_color.c b/applications/main/momentum_app/scenes/momentum_app_scene_misc_screen_color.c
index a62dfa888..48475398b 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_misc_screen_color.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_misc_screen_color.c
@@ -14,7 +14,7 @@ void momentum_app_scene_misc_screen_color_on_enter(void* context) {
     MomentumApp* app = context;
     ByteInput* byte_input = app->byte_input;
 
-    byte_input_set_header_text(byte_input, "Set LCD Color (#RRGGBB)");
+    byte_input_set_header_text(byte_input, "设置 LCD 颜色 (#RRGGBB)");
 
     rgb_backlight_get_color(
         scene_manager_get_scene_state(app->scene_manager, MomentumAppSceneMiscScreenColor),
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_misc_spoof.c b/applications/main/momentum_app/scenes/momentum_app_scene_misc_spoof.c
index a9aea7efb..511bacae0 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_misc_spoof.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_misc_spoof.c
@@ -6,10 +6,10 @@ enum VarItemListIndex {
 };
 
 const char* const shell_color_names[FuriHalVersionColorCount] = {
-    "Real",
-    "Black",
-    "White",
-    "Transparent",
+    "真实",
+    "黑色",
+    "白色",
+    "透明",
 };
 static void momentum_app_scene_misc_spoof_shell_color_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
@@ -20,6 +20,16 @@ static void momentum_app_scene_misc_spoof_shell_color_changed(VariableItem* item
     app->require_reboot = true;
 }
 
+// 设备状态变更回调
+static void momentum_app_scene_misc_device_status_changed(VariableItem* item) {
+    MomentumApp* app = variable_item_get_context(item);
+    bool value = variable_item_get_current_value_index(item);
+    variable_item_set_current_value_text(item, value ? "复刻版" : "正版");
+    momentum_settings.spoof_status = value;
+    app->save_settings = true;
+    app->require_reboot = true;
+}
+
 void momentum_app_scene_misc_spoof_var_item_list_callback(void* context, uint32_t index) {
     MomentumApp* app = context;
     view_dispatcher_send_custom_event(app->view_dispatcher, index);
@@ -30,18 +40,27 @@ void momentum_app_scene_misc_spoof_on_enter(void* context) {
     VariableItemList* var_item_list = app->var_item_list;
     VariableItem* item;
 
-    item = variable_item_list_add(var_item_list, "Flipper Name", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "Flipper 名称", 0, NULL, app);
     variable_item_set_current_value_text(item, app->device_name);
 
     item = variable_item_list_add(
         var_item_list,
-        "Shell Color",
+        "外壳颜色",
         FuriHalVersionColorCount,
         momentum_app_scene_misc_spoof_shell_color_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.spoof_color);
     variable_item_set_current_value_text(item, shell_color_names[momentum_settings.spoof_color]);
 
+    item = variable_item_list_add(
+        var_item_list,
+        "设备状态",
+        2,
+        momentum_app_scene_misc_device_status_changed,
+        app);
+    variable_item_set_current_value_index(item, momentum_settings.spoof_status);
+    variable_item_set_current_value_text(item, momentum_settings.spoof_status ? "复刻版" : "正版");
+
     variable_item_list_set_enter_callback(
         var_item_list, momentum_app_scene_misc_spoof_var_item_list_callback, app);
 
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_misc_spoof_name.c b/applications/main/momentum_app/scenes/momentum_app_scene_misc_spoof_name.c
index 1ba6aed7b..b8f9819cc 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_misc_spoof_name.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_misc_spoof_name.c
@@ -21,7 +21,7 @@ static bool momentum_app_scene_misc_spoof_name_validator(
     for(; *text; ++text) {
         const char c = *text;
         if((c < '0' || c > '9') && (c < 'A' || c > 'Z') && (c < 'a' || c > 'z')) {
-            furi_string_printf(error, "Please only\nenter letters\nand numbers!");
+            furi_string_printf(error, "请输入仅包含字母\n和数字的内容！");
             return false;
         }
     }
@@ -33,7 +33,7 @@ void momentum_app_scene_misc_spoof_name_on_enter(void* context) {
     MomentumApp* app = context;
     TextInput* text_input = app->text_input;
 
-    text_input_set_header_text(text_input, "Leave empty for real name");
+    text_input_set_header_text(text_input, "留空以使用真实姓名");
 
     text_input_set_validator(text_input, momentum_app_scene_misc_spoof_name_validator, NULL);
 
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_misc_vgm.c b/applications/main/momentum_app/scenes/momentum_app_scene_misc_vgm.c
index 7c41258b7..955f039cc 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_misc_vgm.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_misc_vgm.c
@@ -15,28 +15,28 @@ static const struct {
     RgbColor color;
 } vgm_colors[] = {
     // clang-format off
-    {"Default", {{0, 0, 0}}},
-    {"Rainbow", {{0, 0, 0}}},
-    {"RgbMod", {{0, 0, 0}}},
-    {"Black", {{0, 0, 0}}},
-    {"Orange", {{255, 130, 0}}},
-    {"Red", {{255, 0, 0}}},
-    {"Maroon", {{128, 0, 0}}},
-    {"Yellow", {{255, 255, 0}}},
-    {"Olive", {{128, 128, 0}}},
-    {"Lime", {{0, 255, 0}}},
-    {"Green", {{0, 128, 0}}},
-    {"Aqua", {{0, 255, 127}}},
-    {"Cyan", {{0, 210, 210}}},
-    {"Azure", {{0, 127, 255}}},
-    {"Teal", {{0, 128, 128}}},
-    {"Blue", {{0, 0, 255}}},
-    {"Navy", {{0, 0, 128}}},
-    {"Purple", {{128, 0, 128}}},
-    {"Fuchsia", {{255, 0, 255}}},
-    {"Pink", {{173, 31, 173}}},
-    {"Brown", {{165, 42, 42}}},
-    {"White", {{255, 192, 203}}},
+    {"默认", {{0, 0, 0}}},
+    {"彩虹", {{0, 0, 0}}},
+    {"RGB 模式", {{0, 0, 0}}},
+    {"黑色", {{0, 0, 0}}},
+    {"橙色", {{255, 130, 0}}},
+    {"红色", {{255, 0, 0}}},
+    {"栗色", {{128, 0, 0}}},
+    {"黄色", {{255, 255, 0}}},
+    {"橄榄绿", {{128, 128, 0}}},
+    {"青柠绿", {{0, 255, 0}}},
+    {"绿色", {{0, 128, 0}}},
+    {"水绿", {{0, 255, 127}}},
+    {"青色", {{0, 210, 210}}},
+    {"蔚蓝", {{0, 127, 255}}},
+    {"深青色", {{0, 128, 128}}},
+    {"蓝色", {{0, 0, 255}}},
+    {"海军蓝", {{0, 0, 128}}},
+    {"紫色", {{128, 0, 128}}},
+    {"品红", {{255, 0, 255}}},
+    {"粉色", {{173, 31, 173}}},
+    {"棕色", {{165, 42, 42}}},
+    {"白色", {{255, 192, 203}}},
     // clang-format on
 };
 
@@ -48,11 +48,11 @@ static void momentum_app_scene_misc_vgm_foreground_changed(VariableItem* item) {
     variable_item_set_current_value_text(item, vgm_colors[index].name);
     momentum_settings.rpc_color_fg.rgb = vgm_colors[index].color;
 
-    if(strcmp("Default", vgm_colors[index].name) == 0) {
+    if(strcmp("默认", vgm_colors[index].name) == 0) {
         momentum_settings.rpc_color_fg.mode = ScreenColorModeDefault;
-    } else if(strcmp("Rainbow", vgm_colors[index].name) == 0) {
+    } else if(strcmp("彩虹", vgm_colors[index].name) == 0) {
         momentum_settings.rpc_color_fg.mode = ScreenColorModeRainbow;
-    } else if(strcmp("RgbMod", vgm_colors[index].name) == 0) {
+    } else if(strcmp("RGB 模式", vgm_colors[index].name) == 0) {
         momentum_settings.rpc_color_fg.mode = ScreenColorModeRgbBacklight;
     } else {
         momentum_settings.rpc_color_fg.mode = ScreenColorModeCustom;
@@ -67,11 +67,11 @@ static void momentum_app_scene_misc_vgm_background_changed(VariableItem* item) {
     variable_item_set_current_value_text(item, vgm_colors[index].name);
     momentum_settings.rpc_color_bg.rgb = vgm_colors[index].color;
 
-    if(strcmp("Default", vgm_colors[index].name) == 0) {
+    if(strcmp("默认", vgm_colors[index].name) == 0) {
         momentum_settings.rpc_color_bg.mode = ScreenColorModeDefault;
-    } else if(strcmp("Rainbow", vgm_colors[index].name) == 0) {
+    } else if(strcmp("彩虹", vgm_colors[index].name) == 0) {
         momentum_settings.rpc_color_bg.mode = ScreenColorModeRainbow;
-    } else if(strcmp("RgbMod", vgm_colors[index].name) == 0) {
+    } else if(strcmp("RGB 模式", vgm_colors[index].name) == 0) {
         momentum_settings.rpc_color_bg.mode = ScreenColorModeRgbBacklight;
     } else {
         momentum_settings.rpc_color_bg.mode = ScreenColorModeCustom;
@@ -88,7 +88,7 @@ void momentum_app_scene_misc_vgm_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Foreground",
+        "前景",
         vgm_colors_count,
         momentum_app_scene_misc_vgm_foreground_changed,
         app);
@@ -121,7 +121,7 @@ void momentum_app_scene_misc_vgm_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Background",
+        "背景",
         vgm_colors_count,
         momentum_app_scene_misc_vgm_background_changed,
         app);
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_misc_vgm_color.c b/applications/main/momentum_app/scenes/momentum_app_scene_misc_vgm_color.c
index 6ca50a7c6..59c3a1b36 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_misc_vgm_color.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_misc_vgm_color.c
@@ -14,7 +14,7 @@ void momentum_app_scene_misc_vgm_color_on_enter(void* context) {
     MomentumApp* app = context;
     ByteInput* byte_input = app->byte_input;
 
-    byte_input_set_header_text(byte_input, "Set VGM Color (#RRGGBB)");
+    byte_input_set_header_text(byte_input, "设置 VGM 颜色 (#RRGGBB)");
 
     if(scene_manager_get_scene_state(app->scene_manager, MomentumAppSceneMiscVgmColor)) {
         app->vgm_color = momentum_settings.rpc_color_bg.rgb;
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_protocols.c b/applications/main/momentum_app/scenes/momentum_app_scene_protocols.c
index 51484b1f8..ab0b71e29 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_protocols.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_protocols.c
@@ -26,7 +26,7 @@ static void momentum_app_scene_protocols_subghz_extend_changed(VariableItem* ite
 static void momentum_app_scene_protocols_file_naming_prefix_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "After" : "Before");
+    variable_item_set_current_value_text(item, value ? "之后" : "之前");
     momentum_settings.file_naming_prefix_after = value;
     app->save_settings = true;
 }
@@ -36,40 +36,40 @@ void momentum_app_scene_protocols_on_enter(void* context) {
     VariableItemList* var_item_list = app->var_item_list;
     VariableItem* item;
 
-    item = variable_item_list_add(var_item_list, "SubGHz Freqs", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "SubGHz 频率", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
     item = variable_item_list_add(
         var_item_list,
-        "SubGHz Bypass Region Lock",
+        "绕过 SubGHz 区域锁定",
         2,
         momentum_app_scene_protocols_subghz_bypass_changed,
         app);
     variable_item_set_current_value_index(item, app->subghz_bypass);
-    variable_item_set_current_value_text(item, app->subghz_bypass ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, app->subghz_bypass ? "开" : "关");
 
     item = variable_item_list_add(
         var_item_list,
-        "SubGHz Extend Freq Bands",
+        "扩展 SubGHz 频段",
         2,
         momentum_app_scene_protocols_subghz_extend_changed,
         app);
     variable_item_set_current_value_index(item, app->subghz_extend);
-    variable_item_set_current_value_text(item, app->subghz_extend ? "ON" : "OFF");
-    variable_item_set_locked(item, !app->subghz_bypass, "Must bypass\nregion lock\nfirst!");
+    variable_item_set_current_value_text(item, app->subghz_extend ? "开" : "关");
+    variable_item_set_locked(item, !app->subghz_bypass, "必须先绕过\n区域锁定！");
 
-    item = variable_item_list_add(var_item_list, "GPIO Pins", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "GPIO 引脚", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
     item = variable_item_list_add(
         var_item_list,
-        "File Naming Prefix",
+        "文件命名前缀",
         2,
         momentum_app_scene_protocols_file_naming_prefix_changed,
         app);
     variable_item_set_current_value_index(item, momentum_settings.file_naming_prefix_after);
     variable_item_set_current_value_text(
-        item, momentum_settings.file_naming_prefix_after ? "After" : "Before");
+        item, momentum_settings.file_naming_prefix_after ? "之后" : "之前");
 
     variable_item_list_set_enter_callback(
         var_item_list, momentum_app_scene_protocols_var_item_list_callback, app);
@@ -138,7 +138,7 @@ bool momentum_app_scene_protocols_on_event(void* context, SceneManagerEvent even
                 value = !value;
             }
             variable_item_set_current_value_index(item, value);
-            variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+            variable_item_set_current_value_text(item, value ? "开启" : "关闭");
             break;
         }
         case VarItemListIndexGpioPins:
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs.c b/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs.c
index c67e76ee0..a36b876b4 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs.c
@@ -14,7 +14,7 @@ void momentum_app_scene_protocols_freqs_var_item_list_callback(void* context, ui
 static void momentum_app_scene_protocols_freqs_use_defaults_changed(VariableItem* item) {
     MomentumApp* app = variable_item_get_context(item);
     bool value = variable_item_get_current_value_index(item);
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     app->subghz_use_defaults = value;
     app->save_subghz_freqs = true;
 }
@@ -26,17 +26,17 @@ void momentum_app_scene_protocols_freqs_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Use Defaults",
+        "使用默认值",
         2,
         momentum_app_scene_protocols_freqs_use_defaults_changed,
         app);
     variable_item_set_current_value_index(item, app->subghz_use_defaults);
-    variable_item_set_current_value_text(item, app->subghz_use_defaults ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, app->subghz_use_defaults ? "开" : "关");
 
-    item = variable_item_list_add(var_item_list, "Static Freqs", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "静态频率", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
-    item = variable_item_list_add(var_item_list, "Hopper Freqs", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "跳频频率", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
     variable_item_list_set_enter_callback(
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs_add.c b/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs_add.c
index 3bbe082da..55de4dd7a 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs_add.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs_add.c
@@ -29,7 +29,7 @@ void momentum_app_scene_protocols_freqs_add_on_enter(void* context) {
     MomentumApp* app = context;
     NumberInput* number_input = app->number_input;
 
-    number_input_set_header_text(number_input, "Use kHz values, like 433920");
+    number_input_set_header_text(number_input, "请输入 kHz 值，例如 433920");
 
     number_input_set_result_callback(
         number_input,
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs_hopper.c b/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs_hopper.c
index 5ee2e5629..643fef45d 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs_hopper.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs_hopper.c
@@ -29,7 +29,7 @@ void momentum_app_scene_protocols_freqs_hopper_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Hopper Freq",
+        "跳频频率",
         FrequencyList_size(app->subghz_hopper_freqs),
         momentum_app_scene_protocols_freqs_hopper_frequency_changed,
         app);
@@ -41,12 +41,12 @@ void momentum_app_scene_protocols_freqs_hopper_on_enter(void* context) {
         snprintf(text, sizeof(text), "%lu.%02lu", value / 1000000, (value % 1000000) / 10000);
         variable_item_set_current_value_text(item, text);
     } else {
-        variable_item_set_current_value_text(item, "None");
+        variable_item_set_current_value_text(item, "无");
     }
 
-    variable_item_list_add(var_item_list, "Remove Hopper Freq", 0, NULL, app);
+    variable_item_list_add(var_item_list, "移除跳频频率", 0, NULL, app);
 
-    variable_item_list_add(var_item_list, "Add Hopper Freq", 0, NULL, app);
+    variable_item_list_add(var_item_list, "添加跳频频率", 0, NULL, app);
 
     variable_item_list_set_enter_callback(
         var_item_list, momentum_app_scene_protocols_freqs_hopper_var_item_list_callback, app);
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs_static.c b/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs_static.c
index f6e226238..c02fc553b 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs_static.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_protocols_freqs_static.c
@@ -29,7 +29,7 @@ void momentum_app_scene_protocols_freqs_static_on_enter(void* context) {
 
     item = variable_item_list_add(
         var_item_list,
-        "Static Freq",
+        "静态频率",
         FrequencyList_size(app->subghz_static_freqs),
         momentum_app_scene_protocols_freqs_static_frequency_changed,
         app);
@@ -41,12 +41,12 @@ void momentum_app_scene_protocols_freqs_static_on_enter(void* context) {
         snprintf(text, sizeof(text), "%lu.%02lu", value / 1000000, (value % 1000000) / 10000);
         variable_item_set_current_value_text(item, text);
     } else {
-        variable_item_set_current_value_text(item, "None");
+        variable_item_set_current_value_text(item, "无");
     }
 
-    variable_item_list_add(var_item_list, "Remove Static Freq", 0, NULL, app);
+    variable_item_list_add(var_item_list, "移除静态频率", 0, NULL, app);
 
-    variable_item_list_add(var_item_list, "Add Static Freq", 0, NULL, app);
+    variable_item_list_add(var_item_list, "添加静态频率", 0, NULL, app);
 
     variable_item_list_set_enter_callback(
         var_item_list, momentum_app_scene_protocols_freqs_static_var_item_list_callback, app);
diff --git a/applications/main/momentum_app/scenes/momentum_app_scene_start.c b/applications/main/momentum_app/scenes/momentum_app_scene_start.c
index 0e97acd4d..a9febdbd8 100644
--- a/applications/main/momentum_app/scenes/momentum_app_scene_start.c
+++ b/applications/main/momentum_app/scenes/momentum_app_scene_start.c
@@ -16,13 +16,13 @@ void momentum_app_scene_start_on_enter(void* context) {
     VariableItemList* var_item_list = app->var_item_list;
     VariableItem* item;
 
-    item = variable_item_list_add(var_item_list, "Interface", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "界面", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
-    item = variable_item_list_add(var_item_list, "Protocols", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "协议", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
-    item = variable_item_list_add(var_item_list, "Misc", 0, NULL, app);
+    item = variable_item_list_add(var_item_list, "杂项", 0, NULL, app);
     variable_item_set_current_value_text(item, ">");
 
     variable_item_list_set_header(var_item_list, furi_string_get_cstr(app->version_tag));
diff --git a/applications/main/nfc/scenes/nfc_scene_start.c b/applications/main/nfc/scenes/nfc_scene_start.c
index 01cf35e41..150cab764 100644
--- a/applications/main/nfc/scenes/nfc_scene_start.c
+++ b/applications/main/nfc/scenes/nfc_scene_start.c
@@ -27,30 +27,30 @@ void nfc_scene_start_on_enter(void* context) {
     // Reset detected protocols list
     nfc_detected_protocols_reset(nfc->detected_protocols);
 
-    submenu_add_item(submenu, "Read", SubmenuIndexRead, nfc_scene_start_submenu_callback, nfc);
+    submenu_add_item(submenu, "读取", SubmenuIndexRead, nfc_scene_start_submenu_callback, nfc);
     submenu_add_item(
         submenu,
-        "Extract MFC Keys",
+        "提取 MF 密钥",
         SubmenuIndexDetectReader,
         nfc_scene_start_submenu_callback,
         nfc);
-    submenu_add_item(submenu, "Saved", SubmenuIndexSaved, nfc_scene_start_submenu_callback, nfc);
+    submenu_add_item(submenu, "已保存", SubmenuIndexSaved, nfc_scene_start_submenu_callback, nfc);
     submenu_add_item(
-        submenu, "Extra Actions", SubmenuIndexExtraAction, nfc_scene_start_submenu_callback, nfc);
+        submenu, "额外操作", SubmenuIndexExtraAction, nfc_scene_start_submenu_callback, nfc);
     submenu_add_item(
-        submenu, "Add Manually", SubmenuIndexAddManually, nfc_scene_start_submenu_callback, nfc);
+        submenu, "手动添加", SubmenuIndexAddManually, nfc_scene_start_submenu_callback, nfc);
 
     submenu_add_lockable_item(
         submenu,
-        "Debug",
+        "调试",
         SubmenuIndexDebug,
         nfc_scene_start_submenu_callback,
         nfc,
         !furi_hal_rtc_is_flag_set(FuriHalRtcFlagDebug),
-        "Enable\n"
-        "Settings >\n"
-        "System >\n"
-        "Debug");
+        "启用\n"
+        "设置 >\n"
+        "系统 >\n"
+        "调试");
 
     submenu_set_selected_item(
         submenu, scene_manager_get_scene_state(nfc->scene_manager, NfcSceneStart));
diff --git a/applications/main/subghz/scenes/subghz_scene_more_raw.c b/applications/main/subghz/scenes/subghz_scene_more_raw.c
index 95d586934..477d16484 100644
--- a/applications/main/subghz/scenes/subghz_scene_more_raw.c
+++ b/applications/main/subghz/scenes/subghz_scene_more_raw.c
@@ -16,21 +16,21 @@ void subghz_scene_more_raw_on_enter(void* context) {
 
     submenu_add_item(
         subghz->submenu,
-        "Decode",
+        "解码",
         SubmenuIndexDecode,
         subghz_scene_more_raw_submenu_callback,
         subghz);
 
     submenu_add_item(
         subghz->submenu,
-        "Rename",
+        "重命名",
         SubmenuIndexEdit,
         subghz_scene_more_raw_submenu_callback,
         subghz);
 
     submenu_add_item(
         subghz->submenu,
-        "Delete",
+        "删除",
         SubmenuIndexDelete,
         subghz_scene_more_raw_submenu_callback,
         subghz);
diff --git a/applications/main/subghz/scenes/subghz_scene_need_saving.c b/applications/main/subghz/scenes/subghz_scene_need_saving.c
index 5095b5ca2..f657990b8 100644
--- a/applications/main/subghz/scenes/subghz_scene_need_saving.c
+++ b/applications/main/subghz/scenes/subghz_scene_need_saving.c
@@ -16,7 +16,7 @@ void subghz_scene_need_saving_on_enter(void* context) {
     SubGhz* subghz = context;
 
     widget_add_string_multiline_element(
-        subghz->widget, 64, 13, AlignCenter, AlignCenter, FontPrimary, "Discard Signals?");
+        subghz->widget, 64, 13, AlignCenter, AlignCenter, FontPrimary, "放弃信号？");
     widget_add_string_multiline_element(
         subghz->widget,
         64,
@@ -24,12 +24,12 @@ void subghz_scene_need_saving_on_enter(void* context) {
         AlignCenter,
         AlignCenter,
         FontSecondary,
-        "All unsaved data\nwill be lost!");
+        "所有未保存的数据\n将会丢失！");
 
     widget_add_button_element(
-        subghz->widget, GuiButtonTypeRight, "Stay", subghz_scene_need_saving_callback, subghz);
+        subghz->widget, GuiButtonTypeRight, "留在此处", subghz_scene_need_saving_callback, subghz);
     widget_add_button_element(
-        subghz->widget, GuiButtonTypeLeft, "Continue", subghz_scene_need_saving_callback, subghz);
+        subghz->widget, GuiButtonTypeLeft, "继续", subghz_scene_need_saving_callback, subghz);
 
     view_dispatcher_switch_to_view(subghz->view_dispatcher, SubGhzViewIdWidget);
 }
diff --git a/applications/main/subghz/scenes/subghz_scene_radio_settings.c b/applications/main/subghz/scenes/subghz_scene_radio_settings.c
index 5031731eb..dee80dbf8 100644
--- a/applications/main/subghz/scenes/subghz_scene_radio_settings.c
+++ b/applications/main/subghz/scenes/subghz_scene_radio_settings.c
@@ -158,7 +158,7 @@ void subghz_scene_radio_settings_on_enter(void* context) {
         value_count_device = 1; // Only 1 item if external disconnected
     item = variable_item_list_add(
         subghz->variable_item_list,
-        "Module",
+        "模块",
         value_count_device,
         subghz_scene_radio_settings_set_device,
         subghz);
@@ -168,11 +168,7 @@ void subghz_scene_radio_settings_on_enter(void* context) {
     variable_item_set_current_value_text(item, radio_device_text[value_index]);
 
     item = variable_item_list_add(
-        variable_item_list,
-        "GPS Baudrate",
-        GPS_COUNT,
-        subghz_scene_receiver_config_set_gps,
-        subghz);
+        variable_item_list, "GPS 波特率", GPS_COUNT, subghz_scene_receiver_config_set_gps, subghz);
     value_index = value_index_uint32(
         subghz->last_settings->gps_baudrate,
         (const uint32_t[]){0, 9600, 19200, 38400, 57600, 115200},
@@ -182,7 +178,7 @@ void subghz_scene_radio_settings_on_enter(void* context) {
 
     item = variable_item_list_add(
         variable_item_list,
-        "Protocol Names",
+        "协议名称",
         ON_OFF_COUNT,
         subghz_scene_receiver_config_set_protocol_file_names,
         subghz);
@@ -192,7 +188,7 @@ void subghz_scene_radio_settings_on_enter(void* context) {
 
     item = variable_item_list_add(
         variable_item_list,
-        "Counter Incr.",
+        "计数器增量",
         furi_hal_rtc_is_flag_set(FuriHalRtcFlagDebug) ? DEBUG_COUNTER_COUNT : 3,
         subghz_scene_receiver_config_set_debug_counter,
         subghz);
@@ -207,7 +203,7 @@ void subghz_scene_radio_settings_on_enter(void* context) {
 
     item = variable_item_list_add(
         variable_item_list,
-        "Debug Pin",
+        "调试引脚",
         DEBUG_P_COUNT,
         subghz_scene_receiver_config_set_debug_pin,
         subghz);
@@ -217,10 +213,10 @@ void subghz_scene_radio_settings_on_enter(void* context) {
     variable_item_set_locked(
         item,
         !furi_hal_rtc_is_flag_set(FuriHalRtcFlagDebug),
-        "Enable\n"
-        "Settings >\n"
-        "System >\n"
-        "Debug");
+        "启用\n"
+        "设置 >\n"
+        "系统 >\n"
+        "调试");
 
     view_dispatcher_switch_to_view(subghz->view_dispatcher, SubGhzViewIdVariableItemList);
 }
diff --git a/applications/main/subghz/scenes/subghz_scene_receiver_config.c b/applications/main/subghz/scenes/subghz_scene_receiver_config.c
index e5e7c1d05..99d4eb8fd 100644
--- a/applications/main/subghz/scenes/subghz_scene_receiver_config.c
+++ b/applications/main/subghz/scenes/subghz_scene_receiver_config.c
@@ -110,10 +110,10 @@ const float hopping_mode_value[HOPPING_MODE_COUNT] = {
 
 #define REPEATER_COUNT 4
 const char* const repeater_text[REPEATER_COUNT] = {
-    "OFF",
-    "Normal",
-    "Long",
-    "Short",
+    "关闭",
+    "正常",
+    "长",
+    "短",
 };
 const uint32_t repeater_value[REPEATER_COUNT] = {
     SubGhzRepeaterStateOff,
@@ -280,13 +280,13 @@ static void subghz_scene_receiver_config_set_hopping(VariableItem* item) {
         variable_item_set_current_value_index(
             frequency_item, subghz_setting_get_frequency_default_index(setting));
 
-        variable_item_set_item_label(item, "Hopping");
+        variable_item_set_item_label(item, "跳频");
     } else {
         variable_item_set_current_value_text(frequency_item, " -----");
         variable_item_set_current_value_index(
             frequency_item, subghz_setting_get_frequency_default_index(setting));
 
-        variable_item_set_item_label(item, "Hopping RSSI");
+        variable_item_set_item_label(item, "跳频 RSSI");
     }
     subghz->last_settings->enable_hopping = index != 0;
     subghz->last_settings->hopping_threshold = hopping_mode_value[index];
@@ -502,7 +502,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
 
     item = variable_item_list_add(
         subghz->variable_item_list,
-        "Frequency",
+        "频率",
         subghz_setting_get_frequency_count(setting),
         subghz_scene_receiver_config_set_frequency,
         subghz);
@@ -520,7 +520,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
 
     item = variable_item_list_add(
         subghz->variable_item_list,
-        "Modulation",
+        "调制",
         subghz_setting_get_preset_count(setting),
         subghz_scene_receiver_config_set_preset,
         subghz);
@@ -536,7 +536,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
         value_index = subghz_scene_receiver_config_hopper_value_index(subghz);
         item = variable_item_list_add(
             subghz->variable_item_list,
-            value_index ? "Hopping RSSI" : "Hopping",
+            value_index ? "跳频 RSSI" : "跳频",
             HOPPING_MODE_COUNT,
             subghz_scene_receiver_config_set_hopping,
             subghz);
@@ -549,7 +549,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
        SubGhzCustomEventManagerSet) {
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "Bin RAW",
+            "二进制 RAW",
             COMBO_BOX_COUNT,
             subghz_scene_receiver_config_set_bin_raw,
             subghz);
@@ -558,11 +558,11 @@ void subghz_scene_receiver_config_on_enter(void* context) {
         variable_item_set_current_value_index(item, value_index);
         variable_item_set_current_value_text(item, combobox_text[value_index]);
         variable_item_set_locked(
-            item, subghz->repeater != SubGhzRepeaterStateOff, "Turn off\nRepeater\nto do that!");
+            item, subghz->repeater != SubGhzRepeaterStateOff, "关闭\n中继器\n以执行此操作！");
 
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "Repeater",
+            "中继器",
             REPEATER_COUNT,
             subghz_scene_receiver_config_set_repeater,
             subghz);
@@ -573,7 +573,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
 
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "Remove Duplicates",
+            "删除重复项",
             COMBO_BOX_COUNT,
             subghz_scene_receiver_config_set_duplicates,
             subghz);
@@ -584,7 +584,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
 
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "Delete Old Signals on Full Memory",
+            "内存满时删除旧信号",
             COMBO_BOX_COUNT,
             subghz_scene_receiver_config_set_delete_old_signals,
             subghz);
@@ -595,7 +595,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
 
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "Autosave",
+            "自动保存",
             COMBO_BOX_COUNT,
             subghz_scene_receiver_config_set_autosave,
             subghz);
@@ -606,7 +606,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
 
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "Ignore Starline",
+            "忽略 Starline",
             COMBO_BOX_COUNT,
             subghz_scene_receiver_config_set_starline,
             subghz);
@@ -618,7 +618,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
 
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "Ignore Cars",
+            "忽略 汽车报警",
             COMBO_BOX_COUNT,
             subghz_scene_receiver_config_set_auto_alarms,
             subghz);
@@ -630,7 +630,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
 
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "Ignore Magellan",
+            "忽略 Magellan",
             COMBO_BOX_COUNT,
             subghz_scene_receiver_config_set_magellan,
             subghz);
@@ -642,7 +642,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
 
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "Ignore Princeton",
+            "忽略 Princeton",
             COMBO_BOX_COUNT,
             subghz_scene_receiver_config_set_princeton,
             subghz);
@@ -654,7 +654,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
 
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "Ignore Nice Flor-S / Nice One",
+            "忽略 Nice Flor-S / Nice One",
             COMBO_BOX_COUNT,
             subghz_scene_receiver_config_set_niceflors,
             subghz);
@@ -666,7 +666,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
 
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "Ignore Weather",
+            "忽略 天气",
             COMBO_BOX_COUNT,
             subghz_scene_receiver_config_set_weather,
             subghz);
@@ -678,7 +678,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
 
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "Ignore TPMS",
+            "忽略 TPMS",
             COMBO_BOX_COUNT,
             subghz_scene_receiver_config_set_tpms,
             subghz);
@@ -692,7 +692,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
     // Enable speaker, will send all incoming noises and signals to speaker so you can listen how your remote sounds like :)
     item = variable_item_list_add(
         subghz->variable_item_list,
-        "Sound",
+        "声音",
         COMBO_BOX_COUNT,
         subghz_scene_receiver_config_set_speaker,
         subghz);
@@ -704,7 +704,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
     if(scene_manager_get_scene_state(subghz->scene_manager, SubGhzSceneReadRAW) !=
        SubGhzCustomEventManagerSet) {
         // Reset to default
-        variable_item_list_add(subghz->variable_item_list, "Reset to Default", 1, NULL, NULL);
+        variable_item_list_add(subghz->variable_item_list, "恢复默认", 1, NULL, NULL);
 
         variable_item_list_set_enter_callback(
             subghz->variable_item_list,
@@ -714,7 +714,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
     if(scene_manager_get_scene_state(subghz->scene_manager, SubGhzSceneReadRAW) !=
        SubGhzCustomEventManagerSet) {
         // Lock keyboard
-        variable_item_list_add(subghz->variable_item_list, "Lock Keyboard", 1, NULL, NULL);
+        variable_item_list_add(subghz->variable_item_list, "锁定键盘", 1, NULL, NULL);
         variable_item_list_set_enter_callback(
             subghz->variable_item_list,
             subghz_scene_receiver_config_var_list_enter_callback,
@@ -725,7 +725,7 @@ void subghz_scene_receiver_config_on_enter(void* context) {
        SubGhzCustomEventManagerSet) {
         item = variable_item_list_add(
             subghz->variable_item_list,
-            "RSSI Threshold:",
+            "RSSI 阈值:",
             RAW_THRESHOLD_RSSI_COUNT,
             subghz_scene_receiver_config_set_raw_threshold_rssi,
             subghz);
diff --git a/applications/main/subghz/scenes/subghz_scene_saved_menu.c b/applications/main/subghz/scenes/subghz_scene_saved_menu.c
index ec155e32b..eba51d597 100644
--- a/applications/main/subghz/scenes/subghz_scene_saved_menu.c
+++ b/applications/main/subghz/scenes/subghz_scene_saved_menu.c
@@ -16,21 +16,21 @@ void subghz_scene_saved_menu_on_enter(void* context) {
     SubGhz* subghz = context;
     submenu_add_item(
         subghz->submenu,
-        "Emulate",
+        "模拟",
         SubmenuIndexEmulate,
         subghz_scene_saved_menu_submenu_callback,
         subghz);
 
     submenu_add_item(
         subghz->submenu,
-        "Rename",
+        "重命名",
         SubmenuIndexEdit,
         subghz_scene_saved_menu_submenu_callback,
         subghz);
 
     submenu_add_item(
         subghz->submenu,
-        "Delete",
+        "删除",
         SubmenuIndexDelete,
         subghz_scene_saved_menu_submenu_callback,
         subghz);
@@ -39,7 +39,7 @@ void subghz_scene_saved_menu_on_enter(void* context) {
        !isnanf(subghz_txrx_get_longitude(subghz->txrx)) || subghz->gps) {
         submenu_add_item(
             subghz->submenu,
-            "Geographic info",
+            "地理信息",
             SubmenuIndexGeo,
             subghz_scene_saved_menu_submenu_callback,
             subghz);
diff --git a/applications/main/subghz/scenes/subghz_scene_start.c b/applications/main/subghz/scenes/subghz_scene_start.c
index fd5ce9990..765f73426 100644
--- a/applications/main/subghz/scenes/subghz_scene_start.c
+++ b/applications/main/subghz/scenes/subghz_scene_start.c
@@ -25,30 +25,30 @@ void subghz_scene_start_on_enter(void* context) {
     }
 
     submenu_add_item(
-        subghz->submenu, "Read", SubmenuIndexRead, subghz_scene_start_submenu_callback, subghz);
+        subghz->submenu, "读取", SubmenuIndexRead, subghz_scene_start_submenu_callback, subghz);
     submenu_add_item(
         subghz->submenu,
-        "Read RAW",
+        "读取 RAW",
         SubmenuIndexReadRAW,
         subghz_scene_start_submenu_callback,
         subghz);
     submenu_add_item(
-        subghz->submenu, "Saved", SubmenuIndexSaved, subghz_scene_start_submenu_callback, subghz);
+        subghz->submenu, "已保存", SubmenuIndexSaved, subghz_scene_start_submenu_callback, subghz);
     submenu_add_item(
         subghz->submenu,
-        "Add Manually",
+        "手动添加",
         SubmenuIndexAddManually,
         subghz_scene_start_submenu_callback,
         subghz);
     submenu_add_item(
         subghz->submenu,
-        "Frequency Analyzer",
+        "频率分析仪",
         SubmenuIndexFrequencyAnalyzer,
         subghz_scene_start_submenu_callback,
         subghz);
     submenu_add_item(
         subghz->submenu,
-        "Radio Settings",
+        "无线电设置",
         SubmenuIndexExtSettings,
         subghz_scene_start_submenu_callback,
         subghz);
diff --git a/applications/main/subghz/views/receiver.c b/applications/main/subghz/views/receiver.c
index af4a68f1d..0093ad89a 100644
--- a/applications/main/subghz/views/receiver.c
+++ b/applications/main/subghz/views/receiver.c
@@ -344,11 +344,11 @@ void subghz_view_receiver_draw(Canvas* canvas, SubGhzViewReceiverModel* model) {
                                                                         &I_Fishing_123x52);
             canvas_set_font(canvas, FontPrimary);
             if(model->repeater_state != SubGhzRepeaterStateOff) {
-                canvas_draw_str(canvas, 59, 46, "Repeater...");
+                canvas_draw_str(canvas, 59, 46, "中继器...");
             } else if(model->hopping_enabled) {
-                canvas_draw_str(canvas, 59, 46, "Hopper scan...");
+                canvas_draw_str(canvas, 59, 46, "跳频扫描...");
             } else {
-                canvas_draw_str(canvas, 59, 46, "Fixed scan...");
+                canvas_draw_str(canvas, 59, 46, "固定扫描...");
             }
             //canvas_draw_line(canvas, 46, 51, 125, 51);
             canvas_set_font(canvas, FontSecondary);
@@ -366,7 +366,7 @@ void subghz_view_receiver_draw(Canvas* canvas, SubGhzViewReceiverModel* model) {
                 (model->device_type == SubGhzRadioDeviceTypeInternal) ? &I_Scanning_123x52 :
                                                                         &I_Fishing_123x52);
             canvas_set_font(canvas, FontPrimary);
-            canvas_draw_str(canvas, 63, 46, "Decoding...");
+            canvas_draw_str(canvas, 63, 46, "解码中...");
             canvas_set_font(canvas, FontSecondary);
         }
     }
diff --git a/applications/main/subghz/views/subghz_frequency_analyzer.c b/applications/main/subghz/views/subghz_frequency_analyzer.c
index b070d6f83..3ee4ff872 100644
--- a/applications/main/subghz/views/subghz_frequency_analyzer.c
+++ b/applications/main/subghz/views/subghz_frequency_analyzer.c
@@ -161,7 +161,7 @@ void subghz_frequency_analyzer_draw(Canvas* canvas, SubGhzFrequencyAnalyzerModel
     canvas_set_font(canvas, FontSecondary);
 
     //canvas_draw_str(canvas, 0, 7, model->is_ext_radio ? "Ext" : "Int");
-    canvas_draw_str(canvas, 20, 7, "Frequency Analyzer");
+    canvas_draw_str(canvas, 20, 7, "频率分析仪");
 
     // RSSI
     canvas_draw_str(canvas, 33, 62, "RSSI");
diff --git a/applications/main/subghz/views/subghz_read_raw.c b/applications/main/subghz/views/subghz_read_raw.c
index c9c01e2ec..0aa275472 100644
--- a/applications/main/subghz/views/subghz_read_raw.c
+++ b/applications/main/subghz/views/subghz_read_raw.c
@@ -300,7 +300,7 @@ void subghz_read_raw_draw(Canvas* canvas, SubGhzReadRAWModel* model) {
         // TODO
         canvas_draw_str(
             canvas,
-            77,
+            67,
             7,
             (model->device_type == SubGhzRadioDeviceTypeInternal) ? "R: Int" : "R: Ext");
     } else {
@@ -317,16 +317,16 @@ void subghz_read_raw_draw(Canvas* canvas, SubGhzReadRAWModel* model) {
 
     switch(model->status) {
     case SubGhzReadRAWStatusIDLE:
-        elements_button_left(canvas, "Erase");
-        elements_button_center(canvas, "Send");
-        elements_button_right(canvas, "Save");
+        elements_button_left(canvas, "清除");
+        elements_button_center(canvas, "发送");
+        elements_button_right(canvas, "保存");
         break;
     case SubGhzReadRAWStatusLoadKeyIDLE:
         if(!model->raw_send_only) {
             elements_button_left(canvas, "New");
             elements_button_right(canvas, "More");
         }
-        elements_button_center(canvas, "Send");
+        elements_button_center(canvas, "发送");
         elements_text_box(
             canvas,
             4,
@@ -344,16 +344,16 @@ void subghz_read_raw_draw(Canvas* canvas, SubGhzReadRAWModel* model) {
     case SubGhzReadRAWStatusLoadKeyTX:
     case SubGhzReadRAWStatusLoadKeyTXRepeat:
         graphics_mode = 0;
-        elements_button_center(canvas, "Hold to repeat");
+        elements_button_center(canvas, "长按以重复");
         break;
 
     case SubGhzReadRAWStatusStart:
-        elements_button_left(canvas, "Config");
-        elements_button_center(canvas, "REC");
+        elements_button_left(canvas, "配置");
+        elements_button_center(canvas, "录制");
         break;
 
     default:
-        elements_button_center(canvas, "Stop");
+        elements_button_center(canvas, "暂停");
         break;
     }
 
diff --git a/applications/main/subghz/views/transmitter.c b/applications/main/subghz/views/transmitter.c
index d4f15f22c..c7855f907 100644
--- a/applications/main/subghz/views/transmitter.c
+++ b/applications/main/subghz/views/transmitter.c
@@ -118,7 +118,7 @@ void subghz_view_transmitter_draw(Canvas* canvas, SubGhzViewTransmitterModel* mo
             58,
             62,
             (model->device_type == SubGhzRadioDeviceTypeInternal) ? "R: Int" : "R: Ext");
-        subghz_view_transmitter_button_right(canvas, "Send");
+        subghz_view_transmitter_button_right(canvas, "发送");
     }
 }
 
diff --git a/applications/main/u2f/views/u2f_view.c b/applications/main/u2f/views/u2f_view.c
index 3b905f640..302eaaaa9 100644
--- a/applications/main/u2f/views/u2f_view.c
+++ b/applications/main/u2f/views/u2f_view.c
@@ -17,30 +17,29 @@ static void u2f_view_draw_callback(Canvas* canvas, void* _model) {
     U2fModel* model = _model;
 
     canvas_draw_icon(canvas, 8, 14, &I_Drive_112x35);
-    canvas_set_font(canvas, FontSecondary);
+    // canvas_set_font(canvas, FontSecondary);
+    canvas_set_custom_u8g2_font(canvas, kalicyh);
 
     if(model->display_msg == U2fMsgNotConnected) {
         canvas_draw_icon(canvas, 22, 15, &I_Connect_me_62x31);
-        canvas_draw_str_aligned(canvas, 128 / 2, 3, AlignCenter, AlignTop, "Connect to a device");
+        canvas_draw_str_aligned(canvas, 128 / 2, 3, AlignCenter, AlignTop, "连接到设备");
     } else if(model->display_msg == U2fMsgIdle) {
         canvas_draw_icon(canvas, 22, 15, &I_Connected_62x31);
-        canvas_draw_str_aligned(canvas, 128 / 2, 3, AlignCenter, AlignTop, "Connected!");
+        canvas_draw_str_aligned(canvas, 128 / 2, 3, AlignCenter, AlignTop, "已连接！");
     } else if(model->display_msg == U2fMsgRegister) {
-        elements_button_center(canvas, "OK");
+        elements_button_center(canvas, "确定");
         canvas_draw_icon(canvas, 22, 15, &I_Auth_62x31);
-        canvas_draw_str_aligned(canvas, 128 / 2, 3, AlignCenter, AlignTop, "Press OK to register");
+        canvas_draw_str_aligned(canvas, 128 / 2, 3, AlignCenter, AlignTop, "按确定进行注册");
     } else if(model->display_msg == U2fMsgAuth) {
-        elements_button_center(canvas, "OK");
+        elements_button_center(canvas, "确定");
         canvas_draw_icon(canvas, 22, 15, &I_Auth_62x31);
-        canvas_draw_str_aligned(
-            canvas, 128 / 2, 3, AlignCenter, AlignTop, "Press OK to authenticate");
+        canvas_draw_str_aligned(canvas, 128 / 2, 3, AlignCenter, AlignTop, "按确定进行认证");
     } else if(model->display_msg == U2fMsgSuccess) {
         canvas_draw_icon(canvas, 22, 15, &I_Connected_62x31);
-        canvas_draw_str_aligned(
-            canvas, 128 / 2, 3, AlignCenter, AlignTop, "Authentication successful!");
+        canvas_draw_str_aligned(canvas, 128 / 2, 3, AlignCenter, AlignTop, "认证成功！");
     } else if(model->display_msg == U2fMsgError) {
         canvas_draw_icon(canvas, 22, 15, &I_Error_62x31);
-        canvas_draw_str_aligned(canvas, 128 / 2, 3, AlignCenter, AlignTop, "Certificate error");
+        canvas_draw_str_aligned(canvas, 128 / 2, 3, AlignCenter, AlignTop, "证书错误");
     }
 }
 
diff --git a/applications/services/desktop/desktop.c b/applications/services/desktop/desktop.c
index bcd10e0d9..d22cd829c 100644
--- a/applications/services/desktop/desktop.c
+++ b/applications/services/desktop/desktop.c
@@ -455,11 +455,11 @@ int32_t desktop_shutdown(void* context) {
     if(result != LoaderStatusOk) {
         // Mimic applications/settings/power_settings_app/scenes/power_settings_scene_power_off.c
         DialogMessage* message = dialog_message_alloc();
-        dialog_message_set_header(message, "Turn Off Device?", 64, 0, AlignCenter, AlignTop);
+        dialog_message_set_header(message, "是否关机?", 64, 2, AlignCenter, AlignTop);
         dialog_message_set_text(
-            message, "   I will be\nwaiting for\n you here...", 78, 14, AlignLeft, AlignTop);
+            message, "   我会在这里\n等待你...", 78, 14, AlignLeft, AlignTop);
         dialog_message_set_icon(message, &I_dolph_cry_49x54, 14, 10);
-        dialog_message_set_buttons(message, "Cancel", NULL, "Power Off");
+        dialog_message_set_buttons(message, "取消", NULL, "关机");
         DialogMessageButton res = dialog_message_show(furi_record_open(RECORD_DIALOGS), message);
         furi_record_close(RECORD_DIALOGS);
         dialog_message_free(message);
@@ -472,6 +472,7 @@ int32_t desktop_shutdown(void* context) {
     return 0;
 }
 
+
 void desktop_set_stealth_mode_state(Desktop* desktop, bool enabled) {
     desktop->in_transition = true;
 
diff --git a/applications/services/desktop/desktop_keybinds.c b/applications/services/desktop/desktop_keybinds.c
index 7f74520b7..425a3416b 100644
--- a/applications/services/desktop/desktop_keybinds.c
+++ b/applications/services/desktop/desktop_keybinds.c
@@ -63,7 +63,7 @@ const char* desktop_keybinds_defaults[DesktopKeybindTypeMAX][DesktopKeybindKeyMA
         {
             [DesktopKeybindKeyUp] = "Lock Menu",
             [DesktopKeybindKeyDown] = "Archive",
-            [DesktopKeybindKeyRight] = "Passport",
+            [DesktopKeybindKeyRight] = "护照",
             [DesktopKeybindKeyLeft] = "Clock",
         },
     [DesktopKeybindTypeHold] =
@@ -208,7 +208,7 @@ void desktop_run_keybind(Desktop* desktop, InputType _type, InputKey _key) {
         loader_start_detached_with_gui_error(
             desktop->loader, EXT_PATH("apps/Tools/nightstand.fap"), "");
     } else if(furi_string_equal(keybind, "Device Info")) {
-        loader_start_detached_with_gui_error(desktop->loader, "Power", "about_battery");
+        loader_start_detached_with_gui_error(desktop->loader, "电源", "about_battery");
     } else if(furi_string_equal(keybind, "Lock Menu")) {
         view_dispatcher_send_custom_event(desktop->view_dispatcher, DesktopMainEventOpenLockMenu);
     } else if(furi_string_equal(keybind, "Lock Keypad")) {
diff --git a/applications/services/gui/README.md b/applications/services/gui/README.md
new file mode 100644
index 000000000..f2edf86f6
--- /dev/null
+++ b/applications/services/gui/README.md
@@ -0,0 +1,76 @@
+## 汉化方式
+
+### 一、大部分内容汉化
+
+#### （1）、生成字库数据
+
+利用[u8g2_cn_tools](https://github.com/kalicyh/u8g2_cn_tools)
+
+#### （2）、挂载字库
+
+创建导入的文件`kalicyh_font.h`和`kalicyh_font.c`便于维护
+
+修改`canvas.c`文件
+
+添加以下代码
+```C
+#include "kalicyh_font.h"
+canvas_set_custom_u8g2_font(canvas, kalicyh);
+```
+
+##### 示例：
+```C
+#include "kalicyh_font.h"
+
+void canvas_draw_str(Canvas* canvas, int32_t x, int32_t y, const char* str) {
+    canvas_set_custom_u8g2_font(canvas, kalicyh);
+    furi_check(canvas);
+    if(!str) return;
+    x += canvas->offset_x;
+    y += canvas->offset_y;
+    u8g2_DrawUTF8(&canvas->fb, x, y, str);
+}
+```
+
+### 二、部分特殊汉化
+
+#### 设置内的APP列表
+
+修改`Momentum-Firmware\applications\settings`目录内的`*.fam`的`name`字段
+
+修改`scripts\fbt\elfmanifest.py`内的`self.name.encode("UTF-8")`
+
+```PY
+@dataclass
+class ElfManifestV1:
+    stack_size: int
+    app_version: int
+    name: str = ""
+    icon: bytes = field(default=b"")
+
+    def as_bytes(self):
+        return struct.pack(
+            "<hI32s?32s",
+            self.stack_size,
+            self.app_version,
+            bytes(self.name.encode("UTF-8")),
+            bool(self.icon),
+            self.icon,
+        )
+```
+
+## 正则表达式
+
+```
+"([^\u4e00-\u9fa5"]*)"
+```
+
+方便搜索未修改的内容
+
+## 目前字库内容
+
+中文需要放在符号之前，中文的符号需要放在ABCD之前
+
+```
+一万三上下不与丢个中为主义之乐习书了二于些交产亮仅介他代以仪件份仿休伙会伤伪位住何余作你佳使例供保信值倾停储儿允充先光入全公六关其具内册写军决冷准凑出击分切列删利别到制刻前剥剩剪力功加动助勿包化匹区匿十升协卓单卡却卸厂压原厨发取受变口只可右号吃同名后向否含听启呀告命和品哎商器回因围固图在地圾址坏块垃型域基堆填增声壳处备复外多大天失头夹夺好如始姓字存学安完定实家容密对将小少尝局屏展崩左差已布帮常幕干并序应度延建开异弃式引弹当录形彩影待很得循心必志忘忙快忽态怒性总恢息您情感愤憩成我或战房所扇手打执扩扫扰找投护报拔拟择持挂按损据捷掉接控描提插搜操擦收改攻放效数整文断新方无日旧时明星是显景暂暴更最有期未本机杂束来析果某柠查标栈栏栗样核格框桌档桥检棕榄槽模橄橙次止正此步段母每比气水永池汽没法波注泻洋洪活流测浏海消深添清溃源满激炸照片版牌牙特状率玩环现理生用电画界留略白的监盖盘目看真眠着睡知短码破硬确示禁离秒称移程空窗符等签管箭米类粉粘糕糟系索紧紫繁红级纵线绍经结绕绝统继续维绿缀编置群翻而耗耳背胜能脚自致般色节英苹范获菜蓝蔚藏虚虹行表被装要规视览角解警计认议记许设证试误请读调谢豚贴资超距跟跳踪车轰载较辑输边过运近返这进远连迟退送选透通速造道遥邮部配里重量针钟钥钮锁错键长闪闭问闲间阅阈限除陪随隐隔需震青静面音页项须频题颜额风饱验高黄黑默！，：？
+```
diff --git a/applications/services/gui/canvas.c b/applications/services/gui/canvas.c
index 0a9ef6612..b651c748a 100644
--- a/applications/services/gui/canvas.c
+++ b/applications/services/gui/canvas.c
@@ -7,6 +7,7 @@
 #include <u8g2_glue.h>
 #include <momentum/asset_packs_i.h>
 #include <momentum/settings.h>
+#include "kalicyh_font.h"
 
 const CanvasFontParameters canvas_font_params[FontTotalNumber] = {
     [FontPrimary] = {.leading_default = 12, .leading_min = 11, .height = 8, .descender = 2},
@@ -190,19 +191,24 @@ void canvas_set_font(Canvas* canvas, Font font) {
     }
     switch(font) {
     case FontPrimary:
-        u8g2_SetFont(&canvas->fb, u8g2_font_helvB08_tr);
+        // u8g2_SetFont(&canvas->fb, u8g2_font_helvB08_tr);
+        canvas_set_custom_u8g2_font(canvas, kalicyh);
         break;
     case FontSecondary:
-        u8g2_SetFont(&canvas->fb, u8g2_font_haxrcorp4089_tr);
+        // u8g2_SetFont(&canvas->fb, u8g2_font_haxrcorp4089_tr);
+        canvas_set_custom_u8g2_font(canvas, kalicyh);
         break;
     case FontKeyboard:
-        u8g2_SetFont(&canvas->fb, u8g2_font_profont11_mr);
+        // u8g2_SetFont(&canvas->fb, u8g2_font_profont11_mr);
+        canvas_set_custom_u8g2_font(canvas, kalicyh);
         break;
     case FontBigNumbers:
-        u8g2_SetFont(&canvas->fb, u8g2_font_profont22_tn);
+        // u8g2_SetFont(&canvas->fb, u8g2_font_profont22_tn);
+        canvas_set_custom_u8g2_font(canvas, kalicyh);
         break;
     case FontBatteryPercent:
-        u8g2_SetFont(&canvas->fb, u8g2_font_5x7_tr); //u8g2_font_micro_tr);
+        // u8g2_SetFont(&canvas->fb, u8g2_font_5x7_tr); //u8g2_font_micro_tr);
+        canvas_set_custom_u8g2_font(canvas, kalicyh);
         break;
     default:
         furi_crash();
@@ -217,6 +223,7 @@ void canvas_set_custom_u8g2_font(Canvas* canvas, const uint8_t* font) {
 }
 
 void canvas_draw_str(Canvas* canvas, int32_t x, int32_t y, const char* str) {
+    canvas_set_custom_u8g2_font(canvas, kalicyh);
     furi_check(canvas);
     if(!str) return;
     x += canvas->offset_x;
diff --git a/applications/services/gui/elements.h b/applications/services/gui/elements.h
index 565d9c053..f2423c516 100644
--- a/applications/services/gui/elements.h
+++ b/applications/services/gui/elements.h
@@ -11,6 +11,7 @@
 #include <stdint.h>
 #include <furi.h>
 #include "canvas.h"
+#include "kalicyh_font.h"
 
 #ifdef __cplusplus
 extern "C" {
diff --git a/applications/services/gui/kalicyh_font.c b/applications/services/gui/kalicyh_font.c
new file mode 100644
index 000000000..a74eeab20
--- /dev/null
+++ b/applications/services/gui/kalicyh_font.c
@@ -0,0 +1,422 @@
+// kalicyh_font.c
+
+#include "kalicyh_font.h"
+
+const uint8_t kalicyh[] = 
+  "\235\0\3\2\4\4\3\5\5\11\12\0\377\7\377\10\377\1\77\2|\3\242 \5\0\314\25!\7q\206"
+  "\25\203\22\42\7#\255\25\211\22#\15t\204\65\311\240$\222\222\14J\2$\15\224|U\321\220\64i"
+  "\322\240%\0%\13t\204\25Q\26eQ-\12&\13t\204\65Q\322TY\242$'\6!\256\25\2"
+  "(\13\223}UI\224D\265(\13)\14\223|\25Y\224E\225(\211\0*\10S\215\25Iei+"
+  "\12T\214UY\62DY\2,\7\42}\65\12\0-\7\24\234\25C\0.\6\21\206\25\1/\13\224"
+  "|u\245,\312JY\6\60\15t\204\65J\244\14\211$%\12\0\61\10s\205\65\211\324e\62\13t"
+  "\204\65J\224EmC\0\63\14t\204\65J\224E\241\224(\0\64\13t\204UJ\213$\15Z\0\65"
+  "\13t\204\25\203\226\215\331\220\0\66\14t\204\65J\244-\221\224(\0\67\12t\204\25CV\312Z\0"
+  "\70\15t\204\65J$%J$%\12\0\71\14t\204\65J$%\233\224(\0:\7Q\206\25Y\0"
+  ";\10b}\65\71\240\0<\10S\215UI\255\0=\10\64\224\25C\70\4>\10S\215\25Y\245\4"
+  "\77\14t\204\65J\224EY\16$\0@\12t\204\65J\244<*\0A\12t\204\65Jd\32&)"
+  "B\15t\204\25K$\15I$\15\11\0C\13t\204\65J\244\65%\12\0D\12t\204\25K\344i"
+  "H\0E\13t\204\25\203\226-Y\66\4F\12t\204\25\203\226-Y\15G\12t\204\65J\244U\246"
+  "dH\12t\204\25\221i\230L\1I\12t\204\25C\224u\31\2J\12t\204um\222\224(\0K"
+  "\13t\204\25\221%\221\222\222\24L\11t\204\25YoC\0M\12t\204\25\321p\210\234\2N\12t"
+  "\204\25\321\262(')O\12t\204\65J\344)Q\0P\13t\204\25K$\15IV\3Q\12t\204"
+  "\65J\344%J\2R\13t\204\25K$\15Id\12S\12t\204\65J$\232\22\5T\11t\204\25"
+  "C\224\365\2U\11t\204\25\221O\211\2V\12t\204\25\221K/\22\0W\12t\204\25\221\323p\210"
+  "\2X\13t\204\25\221)Q\42S\0Y\13t\204\25\221\224t\312*\0Z\13t\204\25C\26\325\242"
+  "l\10[\11\223}\25C\324\247\1\134\13\224|\25Y\230\205Y\61\13]\11\223|\25S\237\206\0^"
+  "\6#\255\65\15_\7\24|\25C\0`\7\42\255\25Q\0a\12T\204\65b\62D\311\0b\13t"
+  "\204\25Y\266D\246!\1c\12T\204\65J\244E\211\2d\12t\204u\225!\62%\3e\12T\204"
+  "\65J\64\214\12\0f\13t\204UJ\64$Y\23\0g\13d|\65C$%[\242\0h\12t\204"
+  "\25Y\266DN\1i\11t\204U\351\326\62\4j\11\203|U\331\324\264\0k\13t\204\25YII"
+  "\244\244\24l\10t\204\25Z\217\2m\12T\204\25\321p\210\244\0n\10T\204\25K\344\24o\12T"
+  "\204\65JdJ\24\0p\13d|\25K$\15I\226\1q\12d|\65C$%[\1r\12T\204"
+  "\25\311\20e\65\0s\12T\204\65C(\16\11\0t\12t\204\65Y\64$YQu\10T\204\25\221"
+  "S\62v\11T\204\25\221\245E\2w\12T\204\25\221\64\34\242\0x\12T\204\25\221\224(\221\24y"
+  "\13d|\25\221\224tJ$\0z\11T\204\25C\324\66\4{\13\224|UJV\12\263\242\0|\6"
+  "\221~\25\17}\13\224|\25bV\214\262\212\4~\10$\234\65\211\222\0\0\0\0\24SA\10.^"
+  "\217\10Qg:\10\261y\322\10~\377\377N\0\7\31\234\32\17N\7\23\231|\32o\71\222#\203\230"
+  "\25\263\60J\223P\2N\11\16\231|:\303\220s\32t.\303\1N\12\23\231|\232\71\222#\71\62"
+  "\244\71\222#\71\22\16\7N\13\23\231|\32\217\71\222#:\220\304Q\232#\71\22\2N\15\25\231|"
+  "\32\257\71\220\3J\230D\211\224\205\71\222#!\0N\16\26\231|Z\71\62\14Q\16\344\310\60\350\310"
+  "\60(\71\222.\0N\42\24\231|\332\322\240\3\351\60\244\341p\313\201\60\32\226\0N*\24\231|\232"
+  "\71\220\244Y$Eb\216\344H\216\344H\10N-\24\231|\232\71\22\16\207,\323\262\341\20\346H\216"
+  "\204\0N:\25\231|\32Q\234\244\303-\314\222\250\226DYRV\25\0N;\22\231|z\71\24\16"
+  "\307\34I\207!\315\221p\70NI\21\231|zq\324[\61K\223\34\210\25I\25NK\24\231|z"
+  "\71\24\16\203\16\344@\16\344@,G\303\0NP\22\231|\272\323\220\346H\24\16\307\64\252d\65\21"
+  "N`\22\230}\32\7\35H\304\254\16\204J\244\255\251\2Nf\23\231|z\305\312\260Fi\24\15\267"
+  "\60\13\263H\1N\206\21\230}\32\7\35\210S\71\7r \7\322\15N\214\13y\204:\303\220\363q"
+  "\70N\216\23\231|:\303\220\346H\216\204\303\61Gr$\36\1N\233\25\231|Z\265d\30\224(K"
+  "\206h\310vl\30rl\70N\244\23\231|\232\341p\312\252I-\311\222\34\210\25I\25N\247\24\231"
+  "|\232\351\60Ha)\33\6%Gr$\7r\4N\256\24\231|\232\341p\312\302A\7\207C\222%"
+  "Q\26\211\3N\305\27\231|Z\311 \245I\224MY\222%Q\226DaV\211\22-N\313\24\231|"
+  "\232\71\220\244Y\244JY\230\205Y\230\25#\0N\326\27\231|ZY\230\324\242d\220\226\212\322\224d"
+  "Q\32eI\64\10N\343\23\231|Z=&\303 fa\226Fi\24'q\0N\345\24\231|:i"
+  "\224dQ\327(\215\222(\332b%\23\3N\352\24\231|Z\325,)eS[\22\205Y\230U\242D"
+  "\13N\366\27\231|ZI\61\251E\303\220DY\230%\303\22fa\26F\0N\375\30\231|Z\231\226"
+  "D]\224\60\211\6%\213\222,J\242,\211*\0N\377\30\231|ZY\230U\206A\13\263!\311\242"
+  "$\312\222(KJ\12\0O\21\25\231|Z\325(L\206A\13\243-i\222*Y\230e\0O\31\26"
+  "\231|Z\305,ZJI')\314\302(\311\242$K\62\1O\32\26\231|\232\71\220\244Y\244,:"
+  "\66\14a\16d\331\240$\0O$\27\231|ZI\32\15C\22ga\62,Y\224dQ\22eIM"
+  "O*\27\231|ZI\61+\15C\230\324\242$\213\222(i\312\222\232\0OM\21\231|Z\325\254\62"
+  "\14:\22\365\217Y\62\14OO\25\231|Z\325\254\62\14b\26f\321\240\204Y\230%\303\0OU\27"
+  "\231|Z\311 \205Q\262$JS\322\224\64%K\224F\241\2OY\22\231|\232\261\42\251\322 \247"
+  "\303\220\226*\221\26O\134\27\231|ZI\234\14J\233\222\14I\26fa\66$Y\230e\0O`\26"
+  "\231|ZI\234\14J\224-Q\26fQ\42U:%\65\11Os\27\231|ZY\230\14J\30)\303"
+  "\22f\321\240\204Y\230%\303\0O\177\30\231|ZY\70\14I\30)\303RJ*\303\22%Y\246%"
+  "\222\0O\213\30\231|:\203\224\224\22II\224\26\245eQ\22-I\244p\10\5O\233\25\231|Z"
+  "I\224%Qe\30\244\276\14K\216D-a\0O\335\27\231|Z\311 %Y\22e\323\240\204Y\62"
+  ",\331T\351\24\1O\341\26\231|Z\325\254\62\14:\22\15J\216D\203\22eI\64\10P<\27\231"
+  "|Z\311 e\265a\213\222\312\220\64%\225!)'\303\0P>\30\231|Z\321\220\224\262$\31\226"
+  ")iJZ\224Z\224(mQ\0P\134\26\231|ZY\70\14IT\221Z\206\245\230DC\24f\231"
+  "\4P\250\27\231|:\265\250\262\244I\242\14I)i\31\222RRQ:\15Q\77\24\231|Z\325("
+  "\215\322(\215\322(\314\242$\213\304!QA\23\231|z\71\220U\223\341\226\304I\234DM\333\20Q"
+  "E\23\231|\232\341p\213\302\322\260dI\234DM\333\20QH\25\231|:Q:\14Q\61\13\207["
+  "\22'i\24mC\0QI\23\231|\232iTK\312\341pK\342$\215\242m\10Qe\24\231|Z"
+  "\71\224C\71\222\3I\234\244Y\65\311\201\0Qh\23\231|zkVM\222A\11\323aHs$\34"
+  "\16Ql\27\231|zC\26fi\22eI\24FY\22e-\321\20%\0Qm\21\231|\232\71\22"
+  "\16wr\230\205Q\254\3\1Qs\23\231|:iV\33\206\64G\302\341\226\244Y\244\12Qv\23\231"
+  "|ZY\64\234\262p\20\263h\270\203Y\244\12Qw\26\231|:\303\20\245\321\60Di\64\14Q\232"
+  "\14\247,R\5Q\205\24\231|\232\71\22\16\207,\223\222H\311\22\35\320\1YQ\214\25\231|:\247"
+  "\244)iJZ\206K\247\244)\351\262(\0Q\231\25\231|\32\17I\32\15[\216\14;\222\14K\216"
+  "\244\23\0Q\233\25\231|\32\17Q\230\14C\226\3Q:\14i\70\34C\0Q\263\25\231|\32i\26"
+  "\15r\22'\331\260\204Y\30\205II\13Q\267\24\231|\32\341T\253#\303\216%\303\222Eb$&"
+  "\2Q\306\25\231|\232Q\22\15K)\34\206,\312\222a)\365\64\14Q\321\24\231|\332Q\64,Y"
+  "<\214I\247,\32\306\244\244\5Q\372\23\231|\232i\324\323\60\244a\226i\231\226\15\207\0Q\373\23"
+  "\231|\232\71\222\16C\32\16\307\64\352i\30\22\0R\6\25\231|Z\311\220\205Q\32\305\312\60HY"
+  "\230\25\263H\2R\7\30\231|:\311\260dQ\322\224H\321\26%Q\226DY\262\305\22\0R\27\25"
+  "\231|\32\247Z\22-MI\242t\213\222,J\242t\25R \26\231|\32\313\242\264(-J\313p"
+  "PZ\224\26\245E\351\0R)\30\231|z\332\220%Q\226\14K)K\42)I\224\212\222F\241\0"
+  "R+\27\231|\32\203\246%\211\226$\303R\312\222aiJ\232\62)\23R\60\27\231|\32\203\26e"
+  "I)I\206\245\224%\303R\312\222h[\5R\66\30\231|\32I:,\211\222%\303R\312\222aI"
+  "\224\26e\213B\1R;\26\231|z\341\60(Q\226\224\222NI\224%SR\22'ERM\26\231"
+  "|Z\265\341\16\15I$%\321\240DR\22\15\242\224\11Re\30\231|\32\203\26&\311\260\24\223d"
+  "\30\24\245\313\224(\265DJ\4Ri\32\231|\32\203\26e\311\60(Q\322\242T\224d\211\244$Q"
+  "\62%J\4Rj\26\231|ZY\64\34\242$\32\224H\312th\270\205C\246\0R\233\22\231|\232"
+  "\71\22\16\307,\314\212Y\30\245\243\2R\237\27\231|\332\321V\31\226,J\262(\311\242$\312\206$"
+  "\213\25\0R\240\27\231|Z\71\222\15\203\322\224\64%MI\242%\211\226\224\244\1R\250\27\231|:"
+  "C\222#\71\360\322\230\64%R\22\15I\26&\12\0R\251\27\231|\32C\324i\70D\25\251\62("
+  "\221\224DR\70,\12\0R\377\27\231|Z\71\62\14I\224\64%\211T\221\222\250K\224\225\24\0S"
+  "\5\26\231|Z\71pPbe\210\224\250\64$R\216\244\321\60\4S\26\27\231|ZI\234dIT"
+  "\221\222,\22\243\64\312\222(K\242AS\71\21\231|\32\17Q\377\213\222\15:\220#\303\1S:\26"
+  "\231|\32\17\71\22eI\226DaV\211\22-\311\221\341\0S\77\25\231|\32\17Q\313\260d\341p"
+  "\210\322dX\242,\31\16SA\23\231|\232\71\222#\341p\314\221\34\311\221\34\11\1SG\24\231|"
+  "zJ\264\205Y\230E\303)\13\263b\224F\0SO\27\231|:Y\230\205\311\240LI\224%QR"
+  "Q:u\211\24\0SS\24\231|\232\71\62\210\351\60Di\64\14Q\232\14\307\20SU\24\231|Z"
+  "Y\66\14Q\323\60DM\303\220\206\303\61\4Sa\22\231|z\71\62\244\71\222\16\267\34\231#\61\5"
+  "St\25\231|Z\321p\210\372\64\14Q\222E\232\64(\211\232\1Sx\30\231|:\331\220\14\222\22"
+  "E\303\20uR\42%\212\224(\31\6\15S\202\25\231|:\303\240\344H\216\344H\216\344H\216\344@"
+  "\216\0S\213\27\231|:\303\240\344H\26fa\62\14a\26&q\24\15C\0S\237\31\231|:\303"
+  "\240da\62HI\26%\203\224dQ\62HI/R\0S\250\27\231|\32\17q\62HI\70\234\222"
+  "LI\6\251\222%\203\242\0S\321\25\231|:\245,\311\222\341\224#\303\224dIT\336\66\1S\326"
+  "\26\231|\32/Q\226\14Y\22%\225!i\352eP\212R\0S\327\25\231|:\303\220EI\30E"
+  "\303!\7\222a\314\322\355\0S\330\23\231|\232\341pK\302\244S\22%\303\220U\267\3S\343\13w"
+  "\205\32\7\325\353\60\10S\352\24\231|:\303\20\245Q\32\245\321\60\344hVMr S\357\21\231|"
+  "\32\357@\64D\375\247!\312\221x\1S\363\23\231|\232\341p\313\221\34\70\211I\61\13\263a\1S"
+  "\367\25\231|:\303\20\245\321\60\344\330p\312\201C\224\246\23\0T\3\27\231|\232\341\62,j\222\14"
+  "K\26%Q\226\324\206$\13\7\1T\14\26\231|\32\17\71\240\14\212\16(\203\242d\211\62(: "
+  "\13T\15\22\231|z\71p\22\223\250\254\16\227\60\13\263aT\16\25\231|\272\323\220\346\310\60(\71"
+  "\222\14K\61)J\303\0T\21\26\231|z\71\20\17\207\34P\6E\311\22%K\224A\221\5T&"
+  "\25\231|\32\257\261\22-Q\232%\303\20\245Q\32\15C\2T+\27\231|zk\226\15C\222\3\321"
+  "\240\3\341\60Di\64\14\11\0T,\27\231|\372\300\240LI\61I\206\245\224\64%M\311\220\205Y"
+  "\2T/\25\231|\232\351\60Di\64\14Q\216$\303RL\212\322\60T@\30\231|z\303%J\232"
+  "\222\246$\31\6%SJI\262Da\244\0TJ\26\231|:Q:\14I\26\16wl\30\242\64J"
+  "\243aH\0T}\27\231|zk\26)\213\16\15\311 %\221\224D\203\222\250\31\0T\214\25\231|"
+  "z\342\64D\245a\210\272,QbR\242!\212\1T\301\27\231|Z\203\230\205Y\70\350\340\220\14R"
+  "\22II\64(C\0T\316\26\231|\232Q\62\34\222RRNJI)i\213\246$\324\2UF\23"
+  "\231|\232\341p\312\242\341\220d\311S\22I\223,Vh\25\231|:\247\244iY\223h\70e\321\220"
+  "\14I\247e\1V\336\27\231|\32\17\71\240\14\212\222%J\226(Y\242\14\212\16<\4V\340\26\231"
+  "|\32\17\71\240e\312\240h\231\224DJ\226\350\300C\0V\364\27\231|\32\17Y\246\14\212\226)\203"
+  "\242e\312\240hI\62\34\2V\372\26\231|\32\17Y\246\14\212\226)\203\242d\211\62(:\360\20V"
+  "\376\26\231|\32\17Q\250\14\312\22%\322\244\264,\331\226\15\207\0W(\24\231|z\351p\312\221("
+  "\314\62e\220\262\60\13\223aW\60\30\231|:Q\222EI\26%\303\262T\224\246\244\242\204R\26\16"
+  "\2W>\27\231|:\311 \265,\265hP\242,iJJ\312\220T\263\0W@\27\231|:a\26"
+  "FK-J\226(\311\242$\213\222h\251\16\3WO\27\231|:\311\260\244\311\30\205Y\246E\211\224"
+  "D\311\220\345H\4WW\27\231|:Y\230e\313\20eI\224%Q\62\234r \11\65\1W\203\21"
+  "\231|:a\226\14w \352\277D[:\14W\213\24\231|\32\203\322)\31\226\216R&\246\303\220\206"
+  "\303\1W\337\25\231|:aR\31n\225!iQzJ\226dKB)W\372\26\231|ZY\64\234"
+  "\262p\20\263h\270$K\255\62\14\11\0X\6\27\231|:Y\22E\303\240D\225a\211\232\6%\252"
+  "\14R:\10Xk\22\231|\332Y\62,Q\345\20\365\313pJ\322,X\236\30\231|:Q\313pH"
+  "\242$\31\226\246$\31\226(\33\222,\34\4X\360\24\231|\232\341pL\207!j\32\206(Gr "
+  "G\0X\363\23\231|\232\341p\14\207C\16D\203\230\205Y\62\16Y\4\25\231|:a\26fC\22"
+  "e\211T\351\24f\225\64\33\4Y\7\26\231|Z\303\62f\203\226&\303%*\15C\324\64\14\11\0"
+  "Y\15\25\231|:\71\62\134\302l\330\302l\30\222Z\70D\243\0Y\26\30\231|:a\66$Y\224"
+  "DI\62%\25\61J\262(\314\42\61\2Y\32\24\231|\232\71\60dZ\32m\323\220di\22\213#"
+  "\0Y'\23\231|\232\71\22\16\307\34\311\201$N\322,R\5Y)\24\231|:\303\220\346H\70\34"
+  "s$\7\222\64\213T\1Y\61\24\231|:Q:\14Q\61\13\207c\16$i\26\251\2Y\64\22\231"
+  "|Z\345$\314\322(\7\302\341\26\205\25\71Y\71\23\231|\232\341pL\243ZR\32nI\232E\252"
+  "\0Y:\22\231|\232\341pK\262s\64\234\262\64\312\1\11Y}\25\231|Z\311 \245\203\26%Q"
+  "iX\264\60\253DE\11Y\202\27\231|Z\71\22\15\203\22%MI\223\224DISiXR\0Y"
+  "\313\26\231|ZY\230EC\22%\225A\212\245!ji\222\222!Y\323\25\231|:Q\222EI\64"
+  "\134J\335\224A\312*Qi\30[W\23\231|\232\341p\310\1eP\322l\70\346H<\2[X\25"
+  "\231|z\351p\312\221d\210\322D\314\222a\11\263L\2[f\24\231|:Qe\70\344\200\62(i"
+  "\66\34s$\36\1[\211\23\231|\232\341p\310\201,\35NY\230\205C&\16[\214\25\231|\232\341"
+  "p\310\1ePrh\270%i\24mC\0[\232\25\231|\232\341p\310\201d\30\322\70\31\262$M"
+  "\304p\10[\236\25\231|\232\341pH\322,\11\263\64\312\206c\22\15\231\0[\266\26\231|\232\341p"
+  "\310\201d\30\262$\233\224L\221\264D\23\1[\271\25\231|\232\341pH\262\244TL\322,\32NY"
+  "\70H\0[\306\26\231|\232\341p\210\302$K\272E\303\42\245Qi\30\22\0[\371\27\231|\372@"
+  "\62d\341\260\324JI\224DR\222%q\16(\0\134\6\30\231|:\311\260D\331\20%Q\22\247\321"
+  "pH\243$\213*\12\0\134\17\21\231|\232\71\222F\375\246eZ\61\7D\0\134\21\22\231|\232\71"
+  "\222F\335\264\34\220r \26W\0\134\35\25\231|:Qe\70\344@\64\350\340p\313\201,\33\224\4"
+  "\134@\27\231|:\303\20\245\321\60D\71\62\14J\234$S\322$-\2\134O\30\231|:\303\240\304"
+  "\311\60(\265h\30\224\250\222\14\203\26eZ\2\134U\27\231|:\303\240\304\311\60(Qi\30\224\250"
+  "\222\14\203T\234\4])\31\231|\32Y\66\34rhH\6)\211\6e\220\222hP\6)\211\2]"
+  "\346\24\231|z\351p\312\221\34H\206%+fa:\14\1]\356\23\231|ZY\64\34\323aH\303"
+  "\341T\323\322a\10]\362\25\231|\32\7\35)'q\62\14J\216\344H\16$\303 ^\3\22\231|"
+  "\232\341p\313\201C\42EJ\324/j\6^.\26\231|\32\203\62e\311\260h\225a\221\302l\30\242"
+  "^\24\0^\70\24\231|:Qe\70$Y\22\15r:\14Q/j\10^U\26\231|ZY\64\234"
+  "\262l\30\242\64\31NIi\270D\25\0^r\24\231|:\303\220\346H\216\204\303\61Gr$GB"
+  "\0^v\25\231|ZY\30e\303-J\243h\270Ea\26\211\21\0^\217\26\231|\272\341\60(\71"
+  "\222\14K\32U\242h\30\322$\225\0^\224\26\231|\272\341\60(\71\22e\211T\351\224dQ\30%"
+  "\303\20^\246\30\231|\272\341\60(Q\222\15\203\22%Y\62HI\26ES\242\11^\366\25\231|\32"
+  "\243\224la\264MI)i\213\206E\315\6\1^\372\27\231|\32[\230\14J\230\14\207(K\224d"
+  "P\302(Q\263A_\0\23\231|\32OY\230\205Y\64\234\262b\26Fi\4_\2\25\231|\32\7"
+  "\35\211\206!\212\223a\220\262h\70e\305\10_\3\24\231|\232\341p\213\302\322\260dQ\64\334\242L"
+  "\213\0_\17\23\231|\272I\34\15\207\64\33\326,\314\222\350\20\7_\25\24\230|\32\203\24Fa\64"
+  "L\362\60\205Q\30%[\0_\71\31\231|\32S\222%\303\240T\264aK\222!\31\244,L\206!"
+  "\214\0_S\20\227}z\245Jc\66\14\361\60\310\303 _U\26\231|:\303\220#\321\60\344H\62"
+  "\134\242Z\262E\225H\13_b\30\231|\32\247\244\26%Q\226\204\303\220DI\224%\241\224%Q\11"
+  "_i\26\231|\32\203\26%Q\22\325\342(L\6%L\223-\351\4_q\27\231|\32\203\246E\311"
+  "\240DY\66L-\331\220II\213\24\1_\205\26\231|:YiX\323aH\322D\31\226\64J\262"
+  "\250\242\0_\210\26\231|:\321\260\25\7)\311\222h\30\242$\213\222\246&)_\227\27\231|:\321"
+  "\260\25\7)\311\222h\30\342$\31\226(K\262D_\252\30\231|:\311\60D\325a\222\262$\31\226"
+  "RR\31\222\246$\33\2_\303\24\231|z:\224S\262(\11\223\242\224#Y:$\0_\305\25\231"
+  "|Z:\244cQ\222EI\311&\345\200\226HC\2_\327\23\231|\232\341p\314\221t\30\322\70J"
+  "Z\245!\2_\330\23\231|\232\341p\311\221\34\32\326\70JZ\245!\2_\331\26\231|ZY\230E"
+  "\311\60(\305\244\230\24\223r\22GC\0_\353\30\231|ZY\230\14K\226(Y\242\14\203\222EI"
+  "\26FI\266\5_\375\27\231|Z\71\62\14I\224$R%j\214\342\60\311\222hH\2`\1\24\231"
+  "|\232\341p\312J\225\60\12+Q\322\232\15\21\0`\22\27\231|Z\321pK\242\244S\22i\211\224"
+  "T\303$K\242!\11`'\30\231|ZI\61)%\311\260H\225,J\222a\311\302,\34\206\0`"
+  ";\26\231|ZY\66\14Q\32\245\321\60\244a\22%\255\331\20\1`b\27\231|Z\303\20eQ\322"
+  "\242\264(-J\26%Y\30%\331\26`o\27\231|z\361\60Di\64\14Q\32\15C\32&QR"
+  "\31\224\0`\250\31\231|ZI\32\15C\22eQ\42%Q\222\212I\230d\211\64$\1`\305\31\231"
+  "|ZY\70\14J\26%\311\260dQ\62\14J-J\6)\311\2a\37\26\231|\272\321pP\232\222"
+  "\26eJ\322$K\302$K\262%a$\26\231|ZY\70\14J\213\62\14JMiQ:U\262$"
+  "\13a\251\30\231|\32\203\22F\303!*\15\203\22I\311\60HY\22JC\22b\20\26\231|\272I"
+  "\64\14J\26.\245\244)iJ\242lJ\64Eb\21\22\231|zIe\352\66\234\252Je\13\263$"
+  "qb\26\25\231|\272\321p\210\263!iJ*C\224\3\312T\323\2b\30\32\231|:Y\224,Q"
+  "\22\15J\30\15Q\42eI\224%Qe\30\242\0b\77\26\231|\32/q\62\14J\224\16\203R\215"
+  "\206!I\223P\1b@\30\231|\32C\246JC\222E\311 %\225!i\213\222,J\342\4bG"
+  "\23\231|\32\357\330\60(q\62\134Z$S\322E\22bK\22\231|\272\323\220#\351\60\244\341p\314"
+  "\221x\4bS\25\231|:\311\260\244\311\30\245Q\32\211\211\32\245\211\266\0bg\27\231|:Y\230"
+  "e\313\20eI\24)\221\264hI\324\242d\2bi\25\231|:a\26\15\203\222F\251\22Ji\224"
+  "F\241\222\2bk\26\231|Z\321\20\245\203\30\245Q\64D\342\220Fi\242\14\2bp\27\231|:"
+  "Y\224d\331\62(Y\230\205JIJ\262$J\226hb~\26\231|:aRL\206C\22fa\222"
+  "h\212\230U\22[\0b\225\25\231|:\321\20\265\14R\223\222#\312\220Hm\222\42\11b\244\27\231"
+  "|:\321\240\344\300\62(Q\226D\203\242\204R\232\244J\12b\245\27\231|Z\311 %\331\60II"
+  "<\14\211\222)\235\222(R\32b\324\30\231|:Y\224d\321pH\242$S*K\26%Y\24&"
+  "\223\24b\337\32\231|:Y\22%-CRJ\232\222,\332\22%J*J\262DI\0b\351\30\231"
+  "|:\311\260D\331\20M\211\226\204\231\62\14a\226\14\203\30\1c\1\27\231|:Y\230\14\247\60\31"
+  "\226\64Q\206%\215\222,\221\22\5c\2\26\231|:a\26\15\203V\31\226\60S\206!\314\302H\31"
+  "\6c\11\26\231|:Y\230\14\207\60\311\302dX\224(\221\332$E\22c_\31\231|:\321\240D"
+  "\331\220\14J\224%QRQ*S\322\226$\266\0cn\30\231|:\311\260\24\207CR\312\222aP"
+  "\242L\31\224(\233\6\1cw\27\231|:a\226\14\267\244\62,a\222\14\223\22-\311\20\215\2c"
+  "\211\31\231|:Y\230\15\203\22F\203\22e\211\62\14Q\226$\303 F\0c\245\25\231|:a\226"
+  "\14\227\250\62,Y\70\34\242\246I\311\4c\247\26\231|:a\66\34\242\244)\311\246AG\222a\11"
+  "\243\341\0c\317\27\231|:Y\22%\303)\211\222a\231\222\303RJ\232\222\303\0c\320\30\231|:"
+  "\321\240D\331pH\242,\211\6E\213\244d\211&E\22c\322\26\231|:\311\260\204\321p\11\263D"
+  "\71%\213\262\224\222\303\0d\34\27\231|:a\226(\303\20%\25e)%\311p\210\332$E\22d"
+  "\315\26\231|:\321\20\265\14\227\212R\31n\225a\211\22K\224\4d\346\26\231|:Y\70\34\224\236"
+  "\62E\31rd\30\224,I\26)e\66\30\231|ZI\230$\303RJ\22-)%MI\262EI"
+  "$N\2e\71\25\231|\232\341\62HI\224i\311\224\24\223\266hR%\1e;\25\231|\232\341\62"
+  "(QK\26%MY\22\205\321\244J\2e>\24\231|:Y\66\134\242\326hiJ\232\252\211\246D"
+  "\2eH\25\231|ZY\64(KQK\312I[\61J\242D\223\2ep\27\231|\32IS\42\15"
+  "\247D\251(Y\62\14I\324\64%\232\24et\26\231|ZY\64\234J\303\224T\226d\210\223A\211"
+  "\302\341\0e\207\23\231|z\71\24\16\247,\314\322$\7r \311\16e\255\31\231|\32I\64\14\211"
+  "\226(\331pH\242hP\42%\212\206-\314\2e\260\31\231|Z\321p\10\223b\222\14\207$\213\222"
+  "dHJJ\224\64%\0e\271\24\231|\232\341p\313\221\34\31\264\60\13\243\64\11%\0e\340\24\231"
+  "|:\303\220\346H\70\34s \211\223\250i\33\2e\345\15\227}\32\7\325:\134\255\303 e\347\26"
+  "\230}\32\311\60$\241\22*\241\62\14I\250\204J\250\14\3e\366\26\231|\372@\62&\225a\11\223"
+  "%JJIc\62\346\200\2f\16\27\231|\32\313\260\324\224d\30\224L\251)\311\60(Y\230\325\4"
+  "f\37\26\231|:\303\20\245\321\60Di\64\14I\226\16C\32\16\7f/\26\231|:\303\20\245\321"
+  "\60Di\62\34\323h\210\224\60\32\6f>\27\231|:\303\20\245\321\60Di\64\14I\224DI\307"
+  "$\33\16fo\26\231|:\303\20\245\321\60Di\62\234\262p\320\242J\244\5f\202\30\231|Z\321"
+  "p\10\223dH\272\14\203\224F\303\20\245\321\60$\0f\264\25\231|:\303\20\245\311p\312\242\341\22"
+  "U\372T\211\264\0f\364\25\231|\32\217\351\60DM\303\20\65\15C\226\204C\62\4g\0\27\231|"
+  ":\303\20\245\321\60Di\62\134\242\244\62$M\225A)g\11\24\231|z\351p\312\201CR\314\206"
+  "-\314\206-L\0g\37\27\231|:\225\341\20%\225!Y\242\244i\70\244Q\322\244E\2g*\23"
+  "\231|\232\351\60\244\71\22\16\267\65)I\221\30\2g,\24\231|\232\71\22\16\267\65)&\265\250\222"
+  "\14J\30\2g:\31\231|Z\311\220%Q\62HY\22EJ\24)Q\322\224\264Eb\0gB\23"
+  "\231|\232\351\260Fa\226\214c\70\134\242J\244\5g_\23\231|\232\341pL\207!j\32\206pM"
+  "JR$ge\23\231|\232\351\60\244qR\32nkR\213*Y\1g\220\27\231|Z\241\224L\203"
+  "\234\14\212\22EJ\224\64%\211VL\0g\234\25\231|:\303\20\65\15C\324\64\14i\70\234\222\222"
+  "\24\11g\320\25\231|ZY\64\234\262p\20\263h\270)a\22%R\26g\340\26\231|ZY\230\14"
+  "\207,\312\1eP\246J\26fa$\1g\345\24\231|\232\341pJjQe\270\244\321\60Di\62"
+  "\34h\7\27\231|:\321\20\345\300\16$\303 FKb\211\222b\226I\0h\10\30\231|Z\225,"
+  "\31\6)M\6E\12\245\244-J\42%J\42\1h\17\24\231|Z\275$\7)\7t@Z\312I"
+  "\216$\203\0h\27\25\231|\32oI\70\14Q\322\64\14i\70\234\222\222\24\11h\67\25\231|Z\275"
+  "$\7)\313\244I\213\222dX\262\60\213\0h\70\25\231|ZY\70\34\242\226(RjR\244\224\222"
+  "\222\70\11h<\26\231|:Q\32\15\311\220E-\223E\32\242!\352\64$\0hF\27\231|Z\311"
+  " %\341pJ\242HI\16QR\31\226r\62\10hL\25\231|\232\203\230\16C\224F\303\20\245\311"
+  "pJJR$hc\26\231|ZY\230T\6e\253)\203\62*\311 \245Q\62\10he\30\231|"
+  "Z\311 e\321\62H\225H\311\22)iJ:eI\224\0h\300\30\231|Z\221\230D\311\20F\311"
+  "\20\351\200RQZ\224\60\33\206\0h\325\25\231|ZY\70\34\322(\31\42\35x\311\242\244\223\224\4"
+  "i\204\27\231|:\235\222\312\260hIE\211\262D\251LI\233\226(\3i\375\26\231|ZIq\70"
+  "$M\303\220(-\303\245\246\324\242d\20j!\30\231|Z\303\20U\222\203\224d\211\62(J\246\14"
+  "\203\22%\331\26jD\27\231|:\303\26%\303)\251(\225!\351EY\242E\251E\1jY\32\231"
+  "|ZC\222E\311\260lI\226\14\203\242dJ\62,Q\222\15C\0k!\26\231|\32Y\32\15b"
+  "R\213\222,\312\302,\214\302\244\244\5kb\23\231|\232\71\222#i\224FCT\215\322(\34\16k"
+  "c\23\231|\32\217\71\222Fi\64D\325(\215\302\341\0kd\27\231|Z\325(\215\42eH\232\244"
+  "$\312\222(K\206h\33\2ke\22\231|\232i\64D\305\341\230Fad\325\206\20k\265\27\231|"
+  "\32\313\220dQ\262DI\26\15r\66\34\242$\224\42\3k\315\26\231|:\303\20%Y\324\62\134\322"
+  "$\312\222,J\206s\4k\317\25\231|:\71\62\334\261aK\242d\270dI\64\14r\4k\324\26"
+  "\231|:Y\230\205Y\224,\245L+fQ\222LC\64\4l\24\24\231|:\71\62\334\221a\320\261"
+  "a\320\221\34\312\221\0l\64\24\231|\232\71\222\15I\224%\305\244\26u\323j\42\0l\70\24\231|"
+  "ZC\16\17Q\232D\213\232\324\242JV\23\1l`\26\231|\32i\26%q\62dKE)&a"
+  "\222F\231\66\10l}\24\231|\32Q\234\14S\34\15R\216\15:\22\305:\20l\241\24\231|\32\331"
+  "\20\265FI\224)\71\66\250QM\212\14l\325\24\231|\32aeX\263\260\62\254I\32U\242D\232"
+  "\2l\342\26\231|\32i\226\14[\224H\265d\330\222\250\245M\311\244\0l\350\22\231|\32a\353\60"
+  "\244Y\30\17RV\214\242al\373\24\231|\32\321\260\64\245KX\33r$\33\222\262\252\0m\13\25"
+  "\231|\32Y\324\222\16C\232%\303\234#Y\62\14i\4m*\24\231|\32Y\324q\30\262\250\333\60"
+  "\344XT\211\302\0m;\30\231|\32\251\224\354H\226\14C\222\305\203\224dQ\222%\321\240\0mA"
+  "\24\231|\32aeX\263Re\330\321\244\224tJ\22\1mK\31\231|\32\321\220\64%Y\224H\225"
+  "\26%K\224\64J\242$\221*\1mO\30\231|\32Q\230\224\222hP\224.J[\224\64%J-"
+  "J\42\1mw\26\231|\32Q\234\14S\34\15R\322\66\14I\247d\30\342\4m\210\26\231|\32i"
+  "\226DI\230(i\226\14[\230\15KQ\312\4m\361\24\231|\32\321\260tNJ\226\60\35V-J"
+  "\224\250\22m\373\31\231|\32\321 e\71\222%\303\220D\305$j)%\221\222(\11\0n\5\24\231"
+  "|\32i\226\14s\224\15J\230\16c\226D\303Vn\203\26\231|\32i\226\14[\224H\303\22ea"
+  "\322\30\205II\13n\220\30\231|\32\321\260\224\322d\220\222(\251\14Y\22%\225!)U:n\341"
+  "\26\231|\32YT\31\306(\211\206%\213\207\245IZ\246D\11o\300\27\231|\32Qm\30\244\222\62"
+  "(MI\64$a\322IQ\22)p\270\27\231|ZI\230$\303\242dI\64DE)L\222A\323"
+  "\302\14qg\27\231|\32\313\260d\311\20EJ\62,\265!\31t,\351\226\24rG\25\231|:Y"
+  "\230\205\303\240\344H\216\14[\30\245Q\32\1rH\27\231|\32I\62,\305\244\270\14[\66(\221\22"
+  "%mJE\12rL\33\231|\32I\224%\311\260\264\14\311\260%\311\220\14K\224T\206A\11\23\0"
+  "rY\25\231|:\303\220\25\263\60\213\206c\222Fa\26i\22\0ry\26\231|ZY\224$\303\251"
+  "\222\14R\32\15\207\64J\262\250\42r\266\26\231|ZY\242dI\62\14R\26fa\226II\267H"
+  "\14s\207\23\231|\232\341p\211\212q\262\324\262\341\20\346H\10s\251\25\231|z\303\35\310\221d\70"
+  "%Q\226DY\222,Qfs\257\25\231|z\303\61\12\263LZ\22)\211\222b\264\345H\4s\260"
+  "\27\231|\232\303\240dI\224\64%\311\220tJ\332\222dJBIt\6\27\231|\232\303\240t\32\224"
+  "(I\206dP\302L\31\206\60\35\6u\37\24\231|:Q\32\245\303\20\25\263t\30\322\34\11\207\3"
+  "u(\32\231|:\303\240DY\62\14J\224%Q\226\14\203\22eI\224i\221\0u\65\27\231|z"
+  "\351\60(Q\226\14\203\22eI\224%\303 \26\7\1u;\25\231|\32\357\340 %-\312\240(-"
+  "\312\240\350\300C\0uL\24\231|:\303\20\65\15C\324\66h\226Z\22e\305\10uY\27\231|\32"
+  "\313\260&RE\211\242\341\220D\245a\210\232\206!\1ue\27\231|\272\331pHjJ\242$\203\242"
+  "\224\42%\31\16Y\70\10v}\17\227}zi\70\14\252:\134\325a\20v\204\25\231|Z\305l\270"
+  "I\241\224D\203\224H\241\24\16\222\2v\321\27\231|\32I\224%\321\240\64%\245\34\34\206(iJ"
+  "Z\206\3v\326\22\231|Z\265\341\230\16C\32\16\227NI\313pv\330\25\231|z\71\60\210Ii"
+  "\70%\305,\33\206(i\31\16v\356\17\227}\32\7U\35\256\303U\35\6\1w\13\24\231|\32\217"
+  "\351\60\204\351p\12\243aH\212\331\260\0w\37\22\231|\32\217\361 f\341 f\321p\312\42Uw"
+  " \27\231|\32\313\260\324\206$S\222a)%\207\245\224\264\15\311\22w@\25\231|zQ\64\34\323"
+  "a\320*\303IK\224,\34\24\0wa\27\231|\32\17I\26\15\207\244E\31\16IE\31\6%\213"
+  "\206\3w\345\24\231|:\71\62\134\242H\211\242a\210\372\245I\33\4w\355\26\231|\32\331pM\222"
+  "AJ\262a\213\222A\252DI\267Ax\1\27\231|\32\313\20\245I\26%K\224T\206%U\6e"
+  "Hc\5x\64\27\231|\32[eXJ\211T\32\16I\24)Q\322\246,R\0xl\30\231|\32"
+  "\313\240\204Q\66\14JEI\206\245EI\206A\212\225\1xn\27\231|\32\323\224H\245aK\222!"
+  "\31\226\26%\31\226\332\240\11y:\22\231|:\303\220S\207c\216\244Q%\253\211\0y\201\26\231|"
+  "ZY\64\234\42MI\224dPrh\270D\225H\13y\273\24\231|\232\341pK\302\250\245e\70D"
+  "\241\22E\312Ry\322\26\231|zJ\264\205IeXJY&I\211\30eZ\242\1y\360\30\231|"
+  "zI\66\15Q\222\15R\230eJ\42)\25S\22E\22\0y\373\30\231|Z\312\60eI\226$C"
+  "\224e\303\242%R\22eZ\42\2z\13\27\231|z\311\60DM\303\240\3\311 e\331\62(Y\230"
+  "\14\2zz\24\231|\232\341p\310\201(\213Te\30\322\34\11\207\3z\227\26\231|\232\341p\210\222"
+  "\250m\70D\225!\221\264$\31\16\1{&\26\231|:Y\270\14J)\13\243d\30\324(\311\242\216"
+  "\12\0{I\25\231|:Y\270\14J)M\207!\7\242\341\224\245\211\4{~\22\231|:Y\270\14"
+  "J)\334nqT+\15\7{\241\27\231|:Y\270\14J)\15\207C\22E\312\240DY\70H\0"
+  "{\255\27\231|:Y\270\14J)\31\356\320\220DR\22\15J$e\2|s\23\231|\232iTK"
+  "\312\341p[\223\222\24\211!\0|{\23\231|:Q-)\15\247\244\26U\303\341\226d\7|\211\27"
+  "\231|Z\321RL\332\242$\33\16Q\313\22)\265(I\24\0|\230\30\231|ZY\224\64%\322\224"
+  "EC\24&\203\242dJ-J\6\1|\325\25\231|Z%%JZ\6)\213\206d\253)\303\222#"
+  "\35|\337\30\231|ZI)\31\6\245\323pH\232\206!Q\62\245\26%\203\0|\373\25\231|:\303"
+  "\20\346@\226&\71\220\15\207\60\215*Y\1}\42\26\231|\232\351\60\244\341p\210\222\250\22%\303)"
+  "\211\22)\13}'\27\231|\32I\62,Q\244DK[)\214\242\341\220D\225H\13}+\26\231|"
+  "Z\265D\31\224(\33\246,\232j\303)\211\22)\13~A\26\231|:Y\70\34\222\246A\211\222\344"
+  "\60UJ\303%\252\0~\242\24\231|Z\71\20\15k\264\25\243\64\332r$Z\6\1~\247\30\231|"
+  ":\311\240dQ\262\24\223d\211\62)\211\206LN\222%\13~\265\26\231|ZI\324%\213\222%\352"
+  "\22%\225-I\243!\311\2~\277\26\231|Z\225(\32\306l\31\224\254\230$[\16(C\22\11~"
+  "\315\30\231|Z\311\240d\221\30\15I\244\344@\66\14J\26fC\62\10~\317\26\231|Z\311\240\244"
+  "I\32MIT\323\206A\313\221h\31\4~\323\25\231|ZYe\30\322h\253\14C\216\34\304lH"
+  "\6\1~\325\27\231|ZI\232\14C\26%\223R\221vD\31\306$R\242\1~\335\27\231|Z\321"
+  "\324\222F\313\240DI\242\15\203\222#\331\220\14\2~\337\26\231|:Y\230\14C\230-Qe\270\224"
+  "\223\60\251,\321\0~\347\24\231|:\211\322e\211J\303\245\324rPjQ\64\34~\355\25\231|:"
+  "a\26\15k\264\14J\26\15Iu\230*\211-~\364\26\231|Z\225(\32&)\71(Q%\33\6"
+  "%J\243\344 ~\377\26\231|Z\311\20\245I\64\334*J\42.K[\224\14\221\4\177\0\25\231|"
+  "Z\313\22%\211\224%Kw \71,m\225\245\1\177\26\26\231|ZYi\330\262!\31\224(\314\206"
+  "Ai\34\6\245\1\177n\26\231|:\303\20%-\303\61\35\206(\215\206!J\223\341\0\177\244\30\231"
+  "|\32C\22%]\206K)\32\222!\11\263\341\220D\331\24\1\177\373\32\231|\32C\62(-\303\240"
+  "$J\62\14J\242T\206C\242\264\14K\1\200\14\27\231|\32\217\71\220\16\207(\211\244$\222\222H"
+  "J\42)I\4\200\27\25\231|Z\341p\314\242!\232\222i\210\246d\233\22%\33\200\63\24\231|\32"
+  "Oa\66la\66l\241\64,j\216$\0\200\314\25\231|Z\245!\332\242t\270F\303\20\245\321\60"
+  "Di\2\200\334\30\231|\32K)iZ\206\245)\311\242eX\262(\311\242$\31\4\200\375\31\231|"
+  ":Y$%\207$G\206A\311\242d\30\224,J\42E\31\2\201\32\32\231|\32K\62$\203\62$"
+  "\25\245E\31\224!\251\230\22e\30\224,\2\201\352\17\227}zi\70\14\352p\35\256\303 \201\364\30"
+  "\231|\32C\222FC\22U\6)\213\222dHj\305H\32$\1\202,\27\231|:\331\62$MI"
+  "\305\64\245\303!J\242%R\222!\12\202r\24\231|Z\203V\33\6\251O\303\20\345H\234\14\203\0"
+  "\202\202\24\231|ZY\64\234\262\34\35\206\60\13\263\60\22S\0\202\361\23\231|ZY\64\234\262\70\35"
+  "\206\250e\270%\331\1\202\371\23\231|ZY\64\234\262h\70%\265\250\32\16\307\20\203\3\24\231|Z"
+  "Y\64\134\302\312\260U\242dL\243L\33\4\203\267\27\231|ZY\64\234\262(\211*\311\60$Q("
+  "eI[\222\11\203\334\26\231|ZY\64\234\262l\30\262$\12\243h\70%%)\22\204\335\26\231|"
+  "ZY\64\234jI\64(MI\30\15C\224\264\14\7\205\32\25\231|ZY\64\234\262h\320\264\341\220"
+  "\211\321\260$JI\205\317\30\231|ZY\64\234\262(\31\16Q\222\15\311\240DI\62(JT\206Z"
+  "\26\231|\232\351\60(Q\226\14CT\215\206EJ\244\332\60\10\206y\27\231|Z\321\20\205\311 %"
+  "MIS\62HY\230%Q\62\34\210L\25\231|:\321\260c\71\220\14\203\32\245Q\32\245Q\266\0"
+  "\210h\23\231|\232\341pL\207!\15\207S\22%\232\266\11\210\253\27\231|:a\226\14\207(\311\242"
+  "p\30\222\246\245\224\204R\62\5\210\305\26\231|\32Q-\31\266(K\206!J\207S\22%\232\266\11"
+  "\211\201\26\231|\32oI\70\14Q\322\64\14a:\334\242L\31\22\0\211\304\26\231|Z\311p\310\242"
+  "\244)\251\14K)\351)K\272E\2\211\306\30\231|:\303 f\303RJ*J\213\262$J\224\64"
+  "%Y\22\11\211\310\30\231|\32I\224%\321\240\64%\245h\330\302,\211\302$\233\6\1\211\322\25\231"
+  "|Z\303\24F\303%\312\222aP\242,\31\356\200,\211\343\31\231|:\7\251\62,\211\222(\303\20"
+  "%\225\341\20%\331\60I\11\0\213f\27\231|\32I\224\15\207\244eH\22mPrh\70e\341 "
+  "\1\213\241\25\231|\32i\26\346H\244\14K\230\205Y\22eZ\61\2\213\244\25\231|\32a-G\62"
+  "-\314\302(\311\224Z\222Ej\0\213\256\23\231|:Y\232%a\66\265%Q\230i-\241\26\213\260"
+  "\26\231|:\321 \245\71\62\15J\224Fi\224*Y\22\15\2\213\270\25\231|:Q\234\14Z\24\211"
+  "Y\62,a\26fZ\61\2\213\276\26\231|:\321\220%Q\32%R\244\344H\62HM\266D\22\213"
+  "\301\30\231|\32\321\260\204\71\22II\26%K\224dQ\222)\265d\30\213\325\25\231|\32iRL"
+  "\262a\20\263d\310\242\236\224\250\62\5\213\357\30\231|:\321 %Y\70\14\71\22\15J\230%\303\42"
+  "%Q\242\5\213\367\30\231|\32i\26\15r\244\14K\224%\321\240DY\242\14J\224\5\213\373\30\231"
+  "|\32i\26\15r\244\14K\26%Q\222%\303\42%Q\242\5\214\3\30\231|:\311\60II\66\14"
+  "J\224T\206\245)\251\14\311\230\324\4\214\42\27\231|\32Y%\231\262dX\246\244\242T\26%\213\222"
+  "\246\304\1\214Z\30\231|\32\17I\224-\245DJ\224hYJ\211\244\324\22%\321\0\215\64\24\231|"
+  "\32C\324\247!j\221*\312\20\265\64I\311\20\215D\25\231|\32Y\232\14S\313\60%\231\226\64%"
+  "\325D\32\5\215\205\26\231|Z\311pJ\242\322\60G\203\242DJ\64\14q\64\14\215\335\30\231|\32"
+  "C\62HI\26%\303\240D\235\206A\211\262$\312\206\3\215\337\27\231|\32\17Y\246\15\207,J\6"
+  "i\211\222\26\245\224\14S\0\215\363\30\231|\32K)iQ\26e)&\211\222,\211\322\224\264\14\322"
+  "\0\216*\30\231|\32CT\32\206(\34\224-G\206A\311\242\244e\220\222\0\217f\24\231|z\361"
+  "\60\204\71\20\205\303\20g\303\65G\62\0\217p\26\231|z\351pJ\302\341\30\16\311\220\224\222(L"
+  "\224D\11\217}\26\231|Z\225dH\242\266\341\224E\203\322-\31\224Z\22\5\217\203\27\231|ZY"
+  "\264\14J\226t\33\224Z\224dR\64%Y\222\5\217\221\26\231|Z\311p\310\222hX\342\341\224d"
+  "\321pH\262(\15\217\223\30\231|Z\311\220\14a\22\15K<\14I\224\64\15\312\220\64%\15\217\271"
+  "\25\231|\32ae\30\302(\311\242\64\232\262\244\266\304\321\60\217\307\26\231|\32q\224\206\303\30%Z"
+  "\22\245Q(\345@\62\14\1\217\320\30\231|\32\321\260\344@\64,Y\16D\211\222E\311\220(q\64"
+  "\14\217\321\25\231|:\241\226h\325h\20\243d\211\262\60J\322l\20\217\324\26\231|\32\331\240Da"
+  "\66(Q\26&\311(E\226\70\32\6\217\331\25\231|\32ae\330\201\64J\244\66-\221\224\34H\206"
+  "!\217\333\27\231|\32YT\31\306(\215\22eX\242\226,\312\201d\30\2\217\334\27\231|\32\331\20"
+  "\345@\64,Q\22'\221\224t\32\222\70\32\6\217\336\26\231|\32aePs \311\224A\312\302d"
+  "\220\262\312\60\4\217\337\27\231|\32\331\240D\231\66(Q\22'\221\222EI\250\304\321\60\220\0\25\231"
+  "|\32\331\240D\231\66(Q\26\16C\324d\211\243a\220\1\25\231|\32Y\324\22E\303\22\246\303\240"
+  "%QM\211\243a\220\11\30\231|\32Y\222E\203\26E\312\260DI\26%\235\206$\216\206\1\220\17"
+  "\27\231|\32\321\260\204Q\64,Q\61\31\266(\211\242%\216\206\1\220\32\30\231|\32\321\260\244I\64"
+  ",\245$\33\6%J\232\22%\216\206\1\220\37\25\231|\32ae\220\343AQ\232\222A\212\304\244\313"
+  "\60\4\220 \30\231|\32Y\222E\203\26\345H\244\14K\216D\203\22e\312\60\4\220S\26\231|\32"
+  "Y\324\22E\303\22\306\303\20eI\64,\65i\30\220e\26\231|\32\321\260DI\35\10\207A\314\242"
+  "\244iX\342h\30\220\256\30\231|Z\331\224%\303\222(\25\245\313\260$J\213RQ\6%\2\220\350"
+  "\31\231|Z\331pHJIS\242\14C\22'\303\222h\211\62(\21\0\221M\32\231|\32C\62$"
+  "\361 .\311\240(Y\224dC\22II\64(C\0\221\314\24\231|:\303\20\65\15C\324\64\14i"
+  ":\14i\70\34\221\315\24\231|:\303\220\206\303%*\15C\324\64\14i\70\34\221\317\25\231|:\303"
+  "\20\245\311p\211J\303\20\65\15C\32\16\7\224\210\25\231|:a\66U\243eP\302h\210\262\60\323"
+  "\212\21\0\224\237\26\231|:a\66\325\206CRJ*\303!\312\302,\224\42\0\224\245\30\231|:\321"
+  "\240\14\231\66\34\262$\312\206C\22e\211\222%\65\1\224\256\30\231|:\321\240L\211\232\14RR\32"
+  ".Q\222E\211T\211\6\1\225\1\27\231|:QR\31\222D\215\206K\224\15KSR\221\222\250\26"
+  "\225\31\31\231|:Y\22)\303\230$S\22%\303%K\242A\211\262D\31\4\225.\31\231|:\331"
+  "\220$J\242\15\203\322\313\60$\265dX\224Z\222\14\1\225\177\24\231|:i\224i\211\232\3/Q"
+  "\232\205I\224\211\2\225\352\25\231|\32\321\260\304a\246eZ&%\221\222%: \13\225\355\27\231|"
+  "\32\321\260\304i$F\312\240h\222\224DJ\24i\212\0\225\356\27\231|\32\321\260\304\321\240(Y\242"
+  "d\211\222%\312\240\350\200,\225\362\25\231|\32\321\260\304a\246\14\212\226I\223\322\242e\262\0\225\364"
+  "\30\231|\32\321\260\304\321\240(Y\242\14\212\222%J\226(\203\42\13\226\5\32\231|\32\321\260\304Y"
+  "\224HI\244\14\212\222%\312\240HI\244DJ\0\226\10\26\231|\32\321\260\304Z\222\14\7\245EY"
+  "\22QQ\226D\26\226P\30\231|\32\313\260\324\224d\30\242LI\206\245IJ\22-J\62)\226d"
+  "\26\231|\32\323\322\246\250\312\60$Y\224\14\307\250E\211\224\0\226j\27\231|\32[\224\14\203RJ"
+  "\244J\62\14J,\15[\246\15\2\226\217\31\231|\32c\222(\203\222E\212\62$\311\242T\206\245\242"
+  "\205Q\62\4\226\220\27\231|\32\323\322\224T\206!V\222aI\227a\210\222NJ\0\226\224\27\231|"
+  "\32\17I)\251\14\211\16$\303\240\264\14\332\222,JT\227\0\26\231|:\303\220\206\303!i\221\214"
+  "\341p\210\222HJ\22\1\227\7\26\231|:\303\220\206\303!\351\62\14Q\216\14\227,J&\1\227R"
+  "\25\231|\232\351\60\244\341pI\243a\210\322h\30\242\64\1\227Y\27\231|:\321\220\14Y\24\15\247"
+  "\244\64\234\22i\70D-\22\0\227b\27\231|\32\217\341pH\262D\31\24%K\224AQ\262d\70"
+  "\4\227\363\25\231|\232\351\60d\305,\32.i\64\14Q\32\15C\2\230u\20\231|\32\217\351\60D"
+  "i\324/m%U\230y\26\231|z\303)\214\6%\312\222(iJ\222!iMB-\230{\27\231"
+  "|Z\303\220d\265AJ\262$J\22-)%\335\222\222\26\230\221\30\231|Z\311\260(Y\222\14\207"
+  ",J*\312RQ\232\224\212\224\5\230\230\31\231|\32C\62H\245!\31\244$\32\224D\312\242D\211"
+  "\206\70\32\6\230\234\31\231|Z\321p\311\222d\70DJ\224\14Ie)%J\224(Q\1\230\235\31"
+  "\231|:\321p\311\222dP\242L\351\246$C\26%Q\222,Y\0\230\316\24\231|:\303\20\245\221"
+  "\224DIS\277\64iC\16\4\231q\27\231|:Q\252\14S\230DK)iJ\262hS\262$\32"
+  "\4\232\214\26\231|\32\323\226dJ\234$\303\240#-C\322\24F\303 \232\330\24\231|\232\341p\312"
+  "\302A\7\207C\222%\312\240\310\2\236\304\26\231|ZY\64\234\262h\270D\245a\210\232\206!\311\201"
+  "\0\236\321\26\231|:\303\20)\211\224,Q\323\60\244\341p\207*Q\0\236\330\27\231|\32\203\222("
+  "-\303\22%\311pH\302,\32\226\70\351\26\377\1\10\221~\32\207$\377\14\11B}\32C\242\0\377"
+  "\32\11r\205\32C<\4\377\37\16\225|:K\246\205Y\61\207\42\0\0";
\ No newline at end of file
diff --git a/applications/services/gui/kalicyh_font.h b/applications/services/gui/kalicyh_font.h
new file mode 100644
index 000000000..56899993b
--- /dev/null
+++ b/applications/services/gui/kalicyh_font.h
@@ -0,0 +1,13 @@
+#ifndef KALICYH_FONT_H
+#define KALICYH_FONT_H
+
+#include <stdint.h>
+
+extern const uint8_t kalicyh[];
+
+#endif // KALICYH_FONT_H
+
+
+// #include "kalicyh_font.h"
+// #include <gui/kalicyh_font.h>
+// canvas_set_custom_u8g2_font(canvas, kalicyh);
diff --git a/applications/services/gui/modules/file_browser.c b/applications/services/gui/modules/file_browser.c
index ef1d9b04e..8ca745b37 100644
--- a/applications/services/gui/modules/file_browser.c
+++ b/applications/services/gui/modules/file_browser.c
@@ -635,7 +635,7 @@ static void browser_draw_list(Canvas* canvas, FileBrowserModel* model) {
             canvas_height(canvas) / 2,
             AlignCenter,
             AlignCenter,
-            "<Empty>");
+            "<空>");
     }
 
     furi_string_free(filename);
diff --git a/applications/services/power/power_service/views/power_unplug_usb.c b/applications/services/power/power_service/views/power_unplug_usb.c
index da230d892..885bc3501 100644
--- a/applications/services/power/power_service/views/power_unplug_usb.c
+++ b/applications/services/power/power_service/views/power_unplug_usb.c
@@ -16,9 +16,10 @@ static void power_unplug_usb_draw_callback(Canvas* canvas, void* _model) {
     canvas_draw_icon(canvas, 0, (64 - 10), &I_Unplug_bg_bottom_128x10);
 
     canvas_set_color(canvas, ColorWhite);
-    canvas_set_font(canvas, FontPrimary);
+    // canvas_set_font(canvas, FontPrimary);
+    canvas_set_custom_u8g2_font(canvas, kalicyh);
     elements_multiline_text_aligned(
-        canvas, 64, 32, AlignCenter, AlignCenter, "It's now safe to unplug\nthe USB cable");
+        canvas, 64, 32, AlignCenter, AlignCenter, "现在可以安全地拔掉USB线了");
 }
 
 PowerUnplugUsb* power_unplug_usb_alloc(void) {
diff --git a/applications/settings/about/about.c b/applications/settings/about/about.c
index 3052e63b8..1274c5fa0 100644
--- a/applications/settings/about/about.c
+++ b/applications/settings/about/about.c
@@ -18,7 +18,7 @@ static DialogMessageButton about_screen_product(DialogsApp* dialogs, DialogMessa
     DialogMessageButton result;
 
     FuriString* screen_header = furi_string_alloc_printf(
-        "Product: %s\n"
+        "产品: %s\n"
         "Model: %s",
         furi_hal_version_get_model_name(),
         furi_hal_version_get_model_code());
@@ -30,9 +30,9 @@ static DialogMessageButton about_screen_product(DialogsApp* dialogs, DialogMessa
         furi_hal_version_get_ic_id());
 
     dialog_message_set_header(
-        message, furi_string_get_cstr(screen_header), 0, 0, AlignLeft, AlignTop);
+        message, furi_string_get_cstr(screen_header), 0, 3, AlignLeft, AlignTop);
     dialog_message_set_text(
-        message, furi_string_get_cstr(screen_text), 0, 26, AlignLeft, AlignTop);
+        message, furi_string_get_cstr(screen_text), 0, 29, AlignLeft, AlignTop);
     result = dialog_message_show(dialogs, message);
 
     furi_string_free(screen_header);
@@ -68,6 +68,19 @@ static DialogMessageButton about_screen_compliance(DialogsApp* dialogs, DialogMe
     return result;
 }
 
+static DialogMessageButton about_screen_group(DialogsApp* dialogs, DialogMessage* message) {
+    DialogMessageButton result;
+
+    const char* screen_text = "QQ交流群：716547787\n"
+                              "固件源码地址:\n"
+                              "kalicyh/Momentum-Firmware";
+
+    dialog_message_set_text(message, screen_text, 0, 3, AlignLeft, AlignTop);
+    result = dialog_message_show(dialogs, message);
+
+    return result;
+}
+
 static DialogMessageButton about_screen_icon1(DialogsApp* dialogs, DialogMessage* message) {
     DialogMessageButton result;
 
@@ -145,14 +158,14 @@ static DialogMessageButton about_screen_hw_version(DialogsApp* dialogs, DialogMe
         furi_hal_region_get_name(),
         my_name ? my_name : "Unknown");
 
-    furi_string_cat_printf(buffer, "Serial Number:\n");
+    furi_string_cat_printf(buffer, "序列号:\n");
     const uint8_t* uid = furi_hal_version_uid();
     for(size_t i = 0; i < furi_hal_version_uid_size(); i++) {
         furi_string_cat_printf(buffer, "%02X", uid[i]);
     }
 
-    dialog_message_set_header(message, "Hardware Info:", 0, 0, AlignLeft, AlignTop);
-    dialog_message_set_text(message, furi_string_get_cstr(buffer), 0, 13, AlignLeft, AlignTop);
+    dialog_message_set_header(message, "硬件信息:", 0, 3, AlignLeft, AlignTop);
+    dialog_message_set_text(message, furi_string_get_cstr(buffer), 0, 16, AlignLeft, AlignTop);
     result = dialog_message_show(dialogs, message);
     furi_string_free(buffer);
 
@@ -194,8 +207,8 @@ static DialogMessageButton about_screen_fw_version(DialogsApp* dialogs, DialogMe
         }
     }
 
-    dialog_message_set_header(message, "Firmware Info:", 0, 0, AlignLeft, AlignTop);
-    dialog_message_set_text(message, furi_string_get_cstr(buffer), 0, 13, AlignLeft, AlignTop);
+    dialog_message_set_header(message, "固件信息:", 0, 3, AlignLeft, AlignTop);
+    dialog_message_set_text(message, furi_string_get_cstr(buffer), 0, 14, AlignLeft, AlignTop);
     result = dialog_message_show(dialogs, message);
     furi_string_free(buffer);
 
@@ -206,6 +219,7 @@ const AboutDialogScreen about_screens[] = {
     about_screen_product,
     about_screen_hw_version,
     about_screen_fw_version,
+    about_screen_group,
     about_screen_compliance,
     about_screen_address,
     about_screen_icon1,
@@ -235,11 +249,11 @@ int32_t about_settings_app(void* p) {
     int32_t ret = 0;
     while(1) {
         if(screen_index >= COUNT_OF(about_screens) - 1) {
-            dialog_message_set_buttons(message, "Prev.", NULL, NULL);
+            dialog_message_set_buttons(message, "上一页", NULL, NULL);
         } else if(screen_index == 0) {
-            dialog_message_set_buttons(message, NULL, NULL, "Next");
+            dialog_message_set_buttons(message, NULL, NULL, "下一页");
         } else {
-            dialog_message_set_buttons(message, "Prev.", NULL, "Next");
+            dialog_message_set_buttons(message, "上一页", NULL, "下一页");
         }
 
         screen_result = about_screens[screen_index](dialogs, message);
diff --git a/applications/settings/about/application.fam b/applications/settings/about/application.fam
index e7b474c22..cbf0c32d3 100644
--- a/applications/settings/about/application.fam
+++ b/applications/settings/about/application.fam
@@ -1,6 +1,6 @@
 App(
     appid="about",
-    name="About",
+    name="关于",
     apptype=FlipperAppType.SETTINGS,
     entry_point="about_settings_app",
     cdefines=["APP_ABOUT"],
diff --git a/applications/settings/bt_settings_app/application.fam b/applications/settings/bt_settings_app/application.fam
index 3807fe426..65324e25a 100644
--- a/applications/settings/bt_settings_app/application.fam
+++ b/applications/settings/bt_settings_app/application.fam
@@ -1,6 +1,6 @@
 App(
     appid="bt_settings",
-    name="Bluetooth",
+    name="蓝牙",
     apptype=FlipperAppType.SETTINGS,
     entry_point="bt_settings_app",
     stack_size=1 * 1024,
diff --git a/applications/settings/bt_settings_app/scenes/bt_settings_scene_forget_dev_confirm.c b/applications/settings/bt_settings_app/scenes/bt_settings_scene_forget_dev_confirm.c
index cfc945751..6bcdb3e9f 100644
--- a/applications/settings/bt_settings_app/scenes/bt_settings_scene_forget_dev_confirm.c
+++ b/applications/settings/bt_settings_app/scenes/bt_settings_scene_forget_dev_confirm.c
@@ -11,11 +11,11 @@ void bt_settings_scene_forget_dev_confirm_dialog_callback(DialogExResult result,
 void bt_settings_scene_forget_dev_confirm_on_enter(void* context) {
     BtSettingsApp* app = context;
     DialogEx* dialog = app->dialog;
-    dialog_ex_set_header(dialog, "Unpair All Devices?", 64, 0, AlignCenter, AlignTop);
+    dialog_ex_set_header(dialog, "取消配对所有设备？", 64, 2, AlignCenter, AlignTop);
     dialog_ex_set_text(
-        dialog, "All previous pairings\nwill be lost!", 64, 14, AlignCenter, AlignTop);
-    dialog_ex_set_left_button_text(dialog, "Cancel");
-    dialog_ex_set_right_button_text(dialog, "Unpair");
+        dialog, "所有之前的配对\n将会丢失！", 64, 16, AlignCenter, AlignTop);
+    dialog_ex_set_left_button_text(dialog, "取消");
+    dialog_ex_set_right_button_text(dialog, "取消配对");
     dialog_ex_set_context(dialog, app);
     dialog_ex_set_result_callback(dialog, bt_settings_scene_forget_dev_confirm_dialog_callback);
 
diff --git a/applications/settings/bt_settings_app/scenes/bt_settings_scene_forget_dev_success.c b/applications/settings/bt_settings_app/scenes/bt_settings_scene_forget_dev_success.c
index b7ed63f63..a734e85f1 100644
--- a/applications/settings/bt_settings_app/scenes/bt_settings_scene_forget_dev_success.c
+++ b/applications/settings/bt_settings_app/scenes/bt_settings_scene_forget_dev_success.c
@@ -11,7 +11,7 @@ void bt_settings_scene_forget_dev_success_on_enter(void* context) {
     Popup* popup = app->popup;
 
     popup_set_icon(popup, 48, 6, &I_DolphinDone_80x58);
-    popup_set_header(popup, "Done", 14, 15, AlignLeft, AlignTop);
+    popup_set_header(popup, "完成", 14, 15, AlignLeft, AlignTop);
     popup_set_timeout(popup, 1500);
     popup_set_context(popup, app);
     popup_set_callback(popup, bt_settings_app_scene_forget_dev_success_popup_callback);
diff --git a/applications/settings/bt_settings_app/scenes/bt_settings_scene_start.c b/applications/settings/bt_settings_app/scenes/bt_settings_scene_start.c
index a76740bd1..3e6a5237b 100644
--- a/applications/settings/bt_settings_app/scenes/bt_settings_scene_start.c
+++ b/applications/settings/bt_settings_app/scenes/bt_settings_scene_start.c
@@ -13,8 +13,8 @@ enum BtSettingIndex {
 };
 
 const char* const bt_settings_text[BtSettingNum] = {
-    "OFF",
-    "ON",
+    "关闭",
+    "开启",
 };
 
 static void bt_settings_scene_start_var_list_change_callback(VariableItem* item) {
@@ -42,7 +42,7 @@ void bt_settings_scene_start_on_enter(void* context) {
     if(furi_hal_bt_is_gatt_gap_supported()) {
         item = variable_item_list_add(
             var_item_list,
-            "Bluetooth",
+            "蓝牙",
             BtSettingNum,
             bt_settings_scene_start_var_list_change_callback,
             app);
@@ -53,12 +53,12 @@ void bt_settings_scene_start_on_enter(void* context) {
             variable_item_set_current_value_index(item, BtSettingOff);
             variable_item_set_current_value_text(item, bt_settings_text[BtSettingOff]);
         }
-        variable_item_list_add(var_item_list, "Unpair All Devices", 1, NULL, NULL);
+        variable_item_list_add(var_item_list, "取消配对所有设备", 1, NULL, NULL);
         variable_item_list_set_enter_callback(
             var_item_list, bt_settings_scene_start_var_list_enter_callback, app);
     } else {
-        item = variable_item_list_add(var_item_list, "Bluetooth", 1, NULL, NULL);
-        variable_item_set_current_value_text(item, "Broken");
+        item = variable_item_list_add(var_item_list, "蓝牙", 1, NULL, NULL);
+        variable_item_set_current_value_text(item, "损坏");
     }
 
     view_dispatcher_switch_to_view(app->view_dispatcher, BtSettingsAppViewVarItemList);
diff --git a/applications/settings/desktop_settings/application.fam b/applications/settings/desktop_settings/application.fam
index 09d7b97ae..94196c6d7 100644
--- a/applications/settings/desktop_settings/application.fam
+++ b/applications/settings/desktop_settings/application.fam
@@ -1,6 +1,6 @@
 App(
     appid="desktop_settings",
-    name="Desktop",
+    name="桌面",
     apptype=FlipperAppType.SETTINGS,
     entry_point="desktop_settings_app",
     requires=[
diff --git a/applications/settings/desktop_settings/scenes/desktop_settings_scene_happy_mode.c b/applications/settings/desktop_settings/scenes/desktop_settings_scene_happy_mode.c
index 31fcbfd2a..d5562b0eb 100644
--- a/applications/settings/desktop_settings/scenes/desktop_settings_scene_happy_mode.c
+++ b/applications/settings/desktop_settings/scenes/desktop_settings_scene_happy_mode.c
@@ -26,17 +26,17 @@ void desktop_settings_scene_happy_mode_on_enter(void* context) {
     dolphin_get_settings(dolphin, &settings);
     furi_record_close(RECORD_DOLPHIN);
 
-    dialog_ex_set_header(app->dialog_ex, "Happy Mode", 64, 0, AlignCenter, AlignTop);
+    dialog_ex_set_header(app->dialog_ex, "快乐模式", 64, 2, AlignCenter, AlignTop);
     dialog_ex_set_text(
         app->dialog_ex,
-        "I will never get angry at you\nfor not spending time with me\nas long as this mode is enabled",
+        "只要启用了这个模式\n我永远不会因为你\n没陪我而生气",
         64,
         30,
         AlignCenter,
         AlignCenter);
-    dialog_ex_set_left_button_text(app->dialog_ex, settings.happy_mode ? "Disable" : "Go back");
+    dialog_ex_set_left_button_text(app->dialog_ex, settings.happy_mode ? "禁用" : "返回");
     dialog_ex_set_right_button_text(
-        app->dialog_ex, settings.happy_mode ? "Keep enabled" : "Enable");
+        app->dialog_ex, settings.happy_mode ? "保持开启" : "启用");
     dialog_ex_set_result_callback(app->dialog_ex, desktop_settings_scene_happy_mode_done_callback);
     dialog_ex_set_context(app->dialog_ex, app);
     view_dispatcher_switch_to_view(app->view_dispatcher, DesktopSettingsAppViewDialogEx);
diff --git a/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_action_type.c b/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_action_type.c
index b3a001c2d..2dc4d398b 100644
--- a/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_action_type.c
+++ b/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_action_type.c
@@ -84,35 +84,35 @@ void desktop_settings_scene_keybinds_action_type_on_enter(void* context) {
 
     submenu_add_item(
         submenu,
-        "Main App",
+        "主应用",
         DesktopSettingsAppKeybindActionTypeMainApp,
         desktop_settings_scene_keybinds_action_type_submenu_callback,
         app);
 
     submenu_add_item(
         submenu,
-        "External App",
+        "外部应用",
         DesktopSettingsAppKeybindActionTypeExternalApp,
         desktop_settings_scene_keybinds_action_type_submenu_callback,
         app);
 
     submenu_add_item(
         submenu,
-        "Open File",
+        "打开文件",
         DesktopSettingsAppKeybindActionTypeOpenFile,
         desktop_settings_scene_keybinds_action_type_submenu_callback,
         app);
 
     submenu_add_item(
         submenu,
-        "More Actions",
+        "更多操作",
         DesktopSettingsAppKeybindActionTypeMoreActions,
         desktop_settings_scene_keybinds_action_type_submenu_callback,
         app);
 
     submenu_add_item(
         submenu,
-        "Remove Keybind",
+        "移除快捷键",
         DesktopSettingsAppKeybindActionTypeRemoveKeybind,
         desktop_settings_scene_keybinds_action_type_submenu_callback,
         app);
@@ -151,7 +151,7 @@ void desktop_settings_scene_keybinds_action_type_on_enter(void* context) {
         }
     }
 
-    submenu_set_header(submenu, "Keybind action:");
+    submenu_set_header(submenu, "快捷键操作：");
     submenu_set_selected_item(submenu, selected);
 
     view_dispatcher_switch_to_view(app->view_dispatcher, DesktopSettingsAppViewMenu);
diff --git a/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_key.c b/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_key.c
index a2a1f8a76..ad478ec9f 100644
--- a/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_key.c
+++ b/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_key.c
@@ -15,33 +15,33 @@ void desktop_settings_scene_keybinds_key_on_enter(void* context) {
 
     submenu_add_item(
         submenu,
-        "Up",
+        "上",
         DesktopKeybindKeyUp,
         desktop_settings_scene_keybinds_key_submenu_callback,
         app);
 
     submenu_add_item(
         submenu,
-        "Down",
+        "下",
         DesktopKeybindKeyDown,
         desktop_settings_scene_keybinds_key_submenu_callback,
         app);
 
     submenu_add_item(
         submenu,
-        "Right",
+        "右",
         DesktopKeybindKeyRight,
         desktop_settings_scene_keybinds_key_submenu_callback,
         app);
 
     submenu_add_item(
         submenu,
-        "Left",
+        "左",
         DesktopKeybindKeyLeft,
         desktop_settings_scene_keybinds_key_submenu_callback,
         app);
 
-    submenu_set_header(submenu, "Keybind key:");
+    submenu_set_header(submenu, "快捷键按键：");
 
     submenu_set_selected_item(
         submenu,
diff --git a/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_reset.c b/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_reset.c
index ed91bb05c..689ea9b21 100644
--- a/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_reset.c
+++ b/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_reset.c
@@ -12,10 +12,10 @@ void desktop_settings_scene_keybinds_reset_on_enter(void* context) {
     DesktopSettingsApp* app = context;
     DialogEx* dialog_ex = app->dialog_ex;
 
-    dialog_ex_set_header(dialog_ex, "Reset Desktop Keybinds?", 64, 10, AlignCenter, AlignCenter);
-    dialog_ex_set_text(dialog_ex, "Your edits will be lost!", 64, 32, AlignCenter, AlignCenter);
-    dialog_ex_set_left_button_text(dialog_ex, "Cancel");
-    dialog_ex_set_right_button_text(dialog_ex, "Reset");
+    dialog_ex_set_header(dialog_ex, "重置桌面快捷键？", 64, 10, AlignCenter, AlignCenter);
+    dialog_ex_set_text(dialog_ex, "您的更改将会丢失！", 64, 32, AlignCenter, AlignCenter);
+    dialog_ex_set_left_button_text(dialog_ex, "取消");
+    dialog_ex_set_right_button_text(dialog_ex, "重置");
 
     dialog_ex_set_context(dialog_ex, app);
     dialog_ex_set_result_callback(
diff --git a/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_type.c b/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_type.c
index 8d52e6ffa..448040582 100644
--- a/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_type.c
+++ b/applications/settings/desktop_settings/scenes/desktop_settings_scene_keybinds_type.c
@@ -15,19 +15,19 @@ void desktop_settings_scene_keybinds_type_on_enter(void* context) {
 
     submenu_add_item(
         submenu,
-        "Press",
+        "按下",
         DesktopKeybindTypePress,
         desktop_settings_scene_keybinds_type_submenu_callback,
         app);
 
     submenu_add_item(
         submenu,
-        "Hold",
+        "长按",
         DesktopKeybindTypeHold,
         desktop_settings_scene_keybinds_type_submenu_callback,
         app);
 
-    submenu_set_header(submenu, "Keybind type:");
+    submenu_set_header(submenu, "快捷键类型：");
 
     submenu_set_selected_item(
         submenu,
diff --git a/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_auth.c b/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_auth.c
index 0d1543359..a2d523e56 100644
--- a/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_auth.c
+++ b/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_auth.c
@@ -38,10 +38,10 @@ void desktop_settings_scene_pin_auth_on_enter(void* context) {
     desktop_view_pin_input_set_context(app->pin_input_view, app);
     desktop_view_pin_input_set_back_callback(app->pin_input_view, pin_auth_back_callback);
     desktop_view_pin_input_set_done_callback(app->pin_input_view, pin_auth_done_callback);
-    desktop_view_pin_input_set_label_button(app->pin_input_view, "OK");
+    desktop_view_pin_input_set_label_button(app->pin_input_view, "确定");
     desktop_view_pin_input_set_label_primary(app->pin_input_view, 0, 0, NULL);
     desktop_view_pin_input_set_label_secondary(
-        app->pin_input_view, 0, 8, "Enter your current PIN:");
+        app->pin_input_view, 0, 8, "输入您当前的PIN码：");
     desktop_view_pin_input_reset_pin(app->pin_input_view);
     desktop_view_pin_input_unlock_input(app->pin_input_view);
     view_dispatcher_switch_to_view(app->view_dispatcher, DesktopSettingsAppViewIdPinInput);
diff --git a/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_disable.c b/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_disable.c
index a97ce8aaa..90a65d3b7 100644
--- a/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_disable.c
+++ b/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_disable.c
@@ -22,7 +22,7 @@ void desktop_settings_scene_pin_disable_on_enter(void* context) {
     popup_set_context(app->popup, app);
     popup_set_callback(app->popup, pin_disable_back_callback);
     popup_set_icon(app->popup, 0, 2, &I_DolphinMafia_119x62);
-    popup_set_header(app->popup, "Removed", 100, 10, AlignCenter, AlignTop);
+    popup_set_header(app->popup, "已移除", 100, 10, AlignCenter, AlignTop);
     popup_set_timeout(app->popup, 1500);
     popup_enable_timeout(app->popup);
     view_dispatcher_switch_to_view(app->view_dispatcher, DesktopSettingsAppViewIdPopup);
diff --git a/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_error.c b/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_error.c
index 695f431a0..321ff11a9 100644
--- a/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_error.c
+++ b/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_error.c
@@ -34,14 +34,14 @@ void desktop_settings_scene_pin_error_on_enter(void* context) {
     uint32_t state =
         scene_manager_get_scene_state(app->scene_manager, DesktopSettingsAppScenePinError);
     if(state == SCENE_STATE_PIN_ERROR_MISMATCH) {
-        desktop_view_pin_input_set_label_primary(app->pin_input_view, 29, 8, "PIN mismatch!");
+        desktop_view_pin_input_set_label_primary(app->pin_input_view, 29, 8, "PIN不匹配！");
     } else if(state == SCENE_STATE_PIN_ERROR_WRONG) {
-        desktop_view_pin_input_set_label_primary(app->pin_input_view, 35, 8, "Wrong PIN!");
+        desktop_view_pin_input_set_label_primary(app->pin_input_view, 35, 8, "PIN错误！");
     } else {
         furi_crash();
     }
     desktop_view_pin_input_set_label_secondary(app->pin_input_view, 0, 8, NULL);
-    desktop_view_pin_input_set_label_button(app->pin_input_view, "Retry");
+    desktop_view_pin_input_set_label_button(app->pin_input_view, "重试");
     desktop_view_pin_input_lock_input(app->pin_input_view);
     desktop_view_pin_input_set_pin(app->pin_input_view, &app->pincode_buffer);
 
diff --git a/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_menu.c b/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_menu.c
index cf8436dc9..59cb76c49 100644
--- a/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_menu.c
+++ b/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_menu.c
@@ -19,7 +19,7 @@ void desktop_settings_scene_pin_menu_on_enter(void* context) {
     if(!desktop_pin_code_is_set()) {
         submenu_add_item(
             submenu,
-            "Set PIN",
+            "设置PIN",
             DesktopSettingsCustomEventSetPin,
             desktop_settings_scene_pin_menu_submenu_callback,
             app);
@@ -27,20 +27,20 @@ void desktop_settings_scene_pin_menu_on_enter(void* context) {
     } else {
         submenu_add_item(
             submenu,
-            "Change PIN",
+            "更改PIN",
             DesktopSettingsCustomEventChangePin,
             desktop_settings_scene_pin_menu_submenu_callback,
             app);
 
         submenu_add_item(
             submenu,
-            "Remove PIN",
+            "移除PIN",
             DesktopSettingsCustomEventDisablePin,
             desktop_settings_scene_pin_menu_submenu_callback,
             app);
     }
 
-    submenu_set_header(app->submenu, "PIN Code Settings");
+    submenu_set_header(app->submenu, "PIN码设置");
     submenu_set_selected_item(app->submenu, app->pin_menu_idx);
     view_dispatcher_switch_to_view(app->view_dispatcher, DesktopSettingsAppViewMenu);
 }
diff --git a/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_setup.c b/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_setup.c
index 95f50d2e1..2cf7c9e66 100644
--- a/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_setup.c
+++ b/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_setup.c
@@ -44,10 +44,10 @@ void desktop_settings_scene_pin_setup_on_enter(void* context) {
     desktop_view_pin_input_set_context(app->pin_input_view, app);
     desktop_view_pin_input_set_back_callback(app->pin_input_view, pin_setup_back_callback);
     desktop_view_pin_input_set_done_callback(app->pin_input_view, pin_setup_done_callback);
-    desktop_view_pin_input_set_label_button(app->pin_input_view, "OK");
+    desktop_view_pin_input_set_label_button(app->pin_input_view, "确定");
     desktop_view_pin_input_set_label_primary(app->pin_input_view, 0, 0, NULL);
     desktop_view_pin_input_set_label_secondary(
-        app->pin_input_view, 0, 8, "Enter from 4 to 10 arrows:");
+        app->pin_input_view, 0, 8, "输入4到10个箭头：");
     desktop_view_pin_input_reset_pin(app->pin_input_view);
     desktop_view_pin_input_unlock_input(app->pin_input_view);
     view_dispatcher_switch_to_view(app->view_dispatcher, DesktopSettingsAppViewIdPinInput);
@@ -60,10 +60,10 @@ bool desktop_settings_scene_pin_setup_on_event(void* context, SceneManagerEvent
     if(event.type == SceneManagerEventTypeCustom) {
         switch(event.event) {
         case DesktopSettingsCustomEvent1stPinEntered:
-            desktop_view_pin_input_set_label_button(app->pin_input_view, "OK");
+            desktop_view_pin_input_set_label_button(app->pin_input_view, "确定");
             desktop_view_pin_input_set_label_primary(app->pin_input_view, 0, 0, NULL);
             desktop_view_pin_input_set_label_secondary(
-                app->pin_input_view, 0, 8, "Confirm your PIN:");
+                app->pin_input_view, 0, 8, "确认您的PIN码：");
             desktop_view_pin_input_reset_pin(app->pin_input_view);
             desktop_view_pin_input_unlock_input(app->pin_input_view);
             consumed = true;
diff --git a/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_setup_done.c b/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_setup_done.c
index ad5784b55..71e2d8f25 100644
--- a/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_setup_done.c
+++ b/applications/settings/desktop_settings/scenes/desktop_settings_scene_pin_setup_done.c
@@ -32,10 +32,10 @@ void desktop_settings_scene_pin_setup_done_on_enter(void* context) {
     desktop_view_pin_input_set_back_callback(app->pin_input_view, NULL);
     desktop_view_pin_input_set_done_callback(app->pin_input_view, pin_setup_done_callback);
     desktop_view_pin_input_set_pin(app->pin_input_view, &app->pincode_buffer);
-    desktop_view_pin_input_set_label_button(app->pin_input_view, "Done");
-    desktop_view_pin_input_set_label_primary(app->pin_input_view, 29, 8, "PIN Activated!");
+    desktop_view_pin_input_set_label_button(app->pin_input_view, "完成");
+    desktop_view_pin_input_set_label_primary(app->pin_input_view, 29, 8, "PIN已激活！");
     desktop_view_pin_input_set_label_secondary(
-        app->pin_input_view, 7, 45, "Remember or write it down");
+        app->pin_input_view, 7, 45, "请记住或写下来");
     desktop_view_pin_input_lock_input(app->pin_input_view);
     desktop_view_pin_input_set_pin_position(app->pin_input_view, 64, 24);
     view_dispatcher_switch_to_view(app->view_dispatcher, DesktopSettingsAppViewIdPinInput);
diff --git a/applications/settings/desktop_settings/scenes/desktop_settings_scene_start.c b/applications/settings/desktop_settings/scenes/desktop_settings_scene_start.c
index 16e32e324..32b3d0ed3 100644
--- a/applications/settings/desktop_settings/scenes/desktop_settings_scene_start.c
+++ b/applications/settings/desktop_settings/scenes/desktop_settings_scene_start.c
@@ -16,23 +16,23 @@ typedef enum {
 
 #define AUTO_LOCK_DELAY_COUNT 9
 static const char* const auto_lock_delay_text[AUTO_LOCK_DELAY_COUNT] = {
-    "OFF",
-    "10s",
-    "15s",
-    "30s",
-    "60s",
-    "90s",
-    "2min",
-    "5min",
-    "10min",
+    "关闭",
+    "10秒",
+    "15秒",
+    "30秒",
+    "60秒",
+    "90秒",
+    "2分钟",
+    "5分钟",
+    "10分钟",
 };
 static const uint32_t auto_lock_delay_value[AUTO_LOCK_DELAY_COUNT] =
     {0, 10000, 15000, 30000, 60000, 90000, 120000, 300000, 600000};
 
 #define CLOCK_ENABLE_COUNT 2
 const char* const clock_enable_text[CLOCK_ENABLE_COUNT] = {
-    "OFF",
-    "ON",
+    "关闭",
+    "开启",
 };
 
 const uint32_t clock_enable_value[CLOCK_ENABLE_COUNT] = {0, 1};
@@ -62,7 +62,7 @@ static void desktop_settings_scene_start_auto_lock_pin_changed(VariableItem* ite
     DesktopSettingsApp* app = variable_item_get_context(item);
     uint8_t value = variable_item_get_current_value_index(item);
 
-    variable_item_set_current_value_text(item, value ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, value ? "开启" : "关闭");
     app->settings.auto_lock_with_pin = value;
 }
 
@@ -73,15 +73,15 @@ void desktop_settings_scene_start_on_enter(void* context) {
     VariableItem* item;
     uint8_t value_index;
 
-    variable_item_list_add(variable_item_list, "PIN Setup", 1, NULL, NULL);
+    variable_item_list_add(variable_item_list, "PIN设置", 1, NULL, NULL);
 
-    variable_item_list_add(variable_item_list, "Keybinds Setup", 1, NULL, NULL);
+    variable_item_list_add(variable_item_list, "快捷键设置", 1, NULL, NULL);
 
-    variable_item_list_add(variable_item_list, "Reset Keybinds to Default", 1, NULL, NULL);
+    variable_item_list_add(variable_item_list, "重置快捷键为默认", 1, NULL, NULL);
 
     item = variable_item_list_add(
         variable_item_list,
-        "Auto Lock Time",
+        "自动锁定时间",
         AUTO_LOCK_DELAY_COUNT,
         desktop_settings_scene_start_auto_lock_delay_changed,
         app);
@@ -93,17 +93,17 @@ void desktop_settings_scene_start_on_enter(void* context) {
 
     item = variable_item_list_add(
         variable_item_list,
-        "Auto Lock Pin",
+        "自动锁定PIN",
         2,
         desktop_settings_scene_start_auto_lock_pin_changed,
         app);
 
     variable_item_set_current_value_index(item, app->settings.auto_lock_with_pin);
-    variable_item_set_current_value_text(item, app->settings.auto_lock_with_pin ? "ON" : "OFF");
+    variable_item_set_current_value_text(item, app->settings.auto_lock_with_pin ? "开启" : "关闭");
 
     item = variable_item_list_add(
         variable_item_list,
-        "Show Clock",
+        "显示时钟",
         CLOCK_ENABLE_COUNT,
         desktop_settings_scene_start_clock_enable_changed,
         app);
@@ -113,7 +113,7 @@ void desktop_settings_scene_start_on_enter(void* context) {
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, clock_enable_text[value_index]);
 
-    variable_item_list_add(variable_item_list, "Happy Mode", 1, NULL, NULL);
+    variable_item_list_add(variable_item_list, "快乐模式", 1, NULL, NULL);
 
     variable_item_list_set_enter_callback(
         variable_item_list, desktop_settings_scene_start_var_list_enter_callback, app);
diff --git a/applications/settings/desktop_settings/views/desktop_settings_view_pin_setup_howto.c b/applications/settings/desktop_settings/views/desktop_settings_view_pin_setup_howto.c
index b86d6c045..027593a8f 100644
--- a/applications/settings/desktop_settings/views/desktop_settings_view_pin_setup_howto.c
+++ b/applications/settings/desktop_settings/views/desktop_settings_view_pin_setup_howto.c
@@ -20,13 +20,13 @@ static void desktop_settings_view_pin_setup_howto_draw(Canvas* canvas, void* mod
     UNUSED(model);
 
     canvas_draw_icon(canvas, 16, 18, &I_Pin_attention_dpad_29x29);
-    elements_button_right(canvas, "Next");
+    elements_button_right(canvas, "下一步");
 
     canvas_set_font(canvas, FontPrimary);
-    elements_multiline_text_aligned(canvas, 64, 0, AlignCenter, AlignTop, "Setting Up PIN");
+    elements_multiline_text_aligned(canvas, 64, 0, AlignCenter, AlignTop, "设置PIN码");
 
     canvas_set_font(canvas, FontSecondary);
-    elements_multiline_text(canvas, 58, 24, "Prepare to use\narrows as\nPIN symbols");
+    elements_multiline_text(canvas, 58, 24, "准备使用\n箭头作为\nPIN符号");
 }
 
 static bool desktop_settings_view_pin_setup_howto_input(InputEvent* event, void* context) {
diff --git a/applications/settings/desktop_settings/views/desktop_settings_view_pin_setup_howto2.c b/applications/settings/desktop_settings/views/desktop_settings_view_pin_setup_howto2.c
index ee33a7e0a..d4f9dae89 100644
--- a/applications/settings/desktop_settings/views/desktop_settings_view_pin_setup_howto2.c
+++ b/applications/settings/desktop_settings/views/desktop_settings_view_pin_setup_howto2.c
@@ -27,12 +27,12 @@ static void desktop_settings_view_pin_setup_howto2_draw(Canvas* canvas, void* mo
         0,
         AlignCenter,
         AlignTop,
-        "Forgotten PIN can only be\n"
-        "reset with entire device.\n"
-        "Read docs: How to reset PIN.");
+        "忘记 PIN 码只能通过\n"
+        "重置整个设备来恢复。\n"
+        "请阅读文档：如何重置 PIN。");
 
-    elements_button_right(canvas, "OK");
-    elements_button_left(canvas, "Cancel");
+    elements_button_right(canvas, "确定");
+    elements_button_left(canvas, "取消");
 }
 
 static bool desktop_settings_view_pin_setup_howto2_input(InputEvent* event, void* context) {
diff --git a/applications/settings/dolphin_passport/application.fam b/applications/settings/dolphin_passport/application.fam
index 9d4f31144..f393665a2 100644
--- a/applications/settings/dolphin_passport/application.fam
+++ b/applications/settings/dolphin_passport/application.fam
@@ -1,6 +1,6 @@
 App(
     appid="passport",
-    name="Passport",
+    name="护照",
     apptype=FlipperAppType.SETTINGS,
     entry_point="passport_app",
     cdefines=["APP_PASSPORT"],
diff --git a/applications/settings/dolphin_passport/passport.c b/applications/settings/dolphin_passport/passport.c
index ac1a39456..38cdfe3cd 100644
--- a/applications/settings/dolphin_passport/passport.c
+++ b/applications/settings/dolphin_passport/passport.c
@@ -33,20 +33,20 @@ static void render_callback(Canvas* canvas, void* _ctx) {
     PassportContext* ctx = _ctx;
     DolphinStats* stats = ctx->stats;
 
-    char level_str[12];
-    char xp_str[12];
+    char level_str[32];
+    char xp_str[32];
     const char* mood_str = NULL;
     const Icon* portrait = NULL;
 
     if(stats->butthurt <= 4) {
         portrait = &I_passport_happy_46x49;
-        mood_str = "Mood: Happy";
+        mood_str = "心情：开心";
     } else if(stats->butthurt <= 9) {
         portrait = &I_passport_okay_46x49;
-        mood_str = "Mood: Okay";
+        mood_str = "心情：一般";
     } else {
         portrait = &I_passport_bad_46x49;
-        mood_str = "Mood: Angry";
+        mood_str = "心情：生气";
     }
 
     uint32_t xp_progress = 0;
@@ -77,13 +77,13 @@ static void render_callback(Canvas* canvas, void* _ctx) {
     canvas_draw_icon(canvas, 11, 2, portrait);
 
     const char* my_name = furi_hal_version_get_name_ptr();
-    snprintf(level_str, sizeof(level_str), "Level: %hu", stats->level);
-    canvas_draw_str(canvas, 59, 10, my_name ? my_name : "Unknown");
+    snprintf(level_str, sizeof(level_str), "等级：%hu", stats->level);
+    canvas_draw_str(canvas, 59, 10, my_name ? my_name : "未知");
     canvas_draw_str(canvas, 59, 22, mood_str);
     canvas_draw_str(canvas, 59, 34, level_str);
 
     if(stats->level == DOLPHIN_LEVEL_COUNT + 1) {
-        snprintf(xp_str, sizeof(xp_str), "Max Level!");
+        snprintf(xp_str, sizeof(xp_str), "最高等级！");
     } else {
         snprintf(xp_str, sizeof(xp_str), "%lu/%lu", xp_have, xp_target);
     }
diff --git a/applications/settings/expansion_settings_app/application.fam b/applications/settings/expansion_settings_app/application.fam
index 75418cdd3..0ccdedd55 100644
--- a/applications/settings/expansion_settings_app/application.fam
+++ b/applications/settings/expansion_settings_app/application.fam
@@ -1,6 +1,6 @@
 App(
     appid="expansion_settings",
-    name="Expansion Modules",
+    name="扩展模块",
     apptype=FlipperAppType.SETTINGS,
     entry_point="expansion_settings_app",
     requires=["gui"],
diff --git a/applications/settings/expansion_settings_app/expansion_settings_app.c b/applications/settings/expansion_settings_app/expansion_settings_app.c
index 639f7f23d..25c0b1533 100644
--- a/applications/settings/expansion_settings_app/expansion_settings_app.c
+++ b/applications/settings/expansion_settings_app/expansion_settings_app.c
@@ -44,7 +44,7 @@ static ExpansionSettingsApp* expansion_settings_app_alloc(void) {
 
     item = variable_item_list_add(
         app->var_item_list,
-        "Listen UART",
+        "监听 UART",
         COUNT_OF(expansion_uart_text),
         expansion_settings_app_uart_changed,
         app);
diff --git a/applications/settings/notification_settings/notification_settings_app.c b/applications/settings/notification_settings/notification_settings_app.c
index 2462b32bd..0548d785e 100644
--- a/applications/settings/notification_settings/notification_settings_app.c
+++ b/applications/settings/notification_settings/notification_settings_app.c
@@ -99,8 +99,8 @@ const uint32_t delay_value[DELAY_COUNT] =
 
 #define VIBRO_COUNT 2
 const char* const vibro_text[VIBRO_COUNT] = {
-    "OFF",
-    "ON",
+    "关闭",
+    "开启",
 };
 const bool vibro_value[VIBRO_COUNT] = {false, true};
 
@@ -186,41 +186,41 @@ static NotificationAppSettings* alloc_settings(void) {
     uint8_t value_index;
 
     item = variable_item_list_add(
-        app->variable_item_list, "LCD Contrast", CONTRAST_COUNT, contrast_changed, app);
+        app->variable_item_list, "LCD对比度", CONTRAST_COUNT, contrast_changed, app);
     value_index =
         value_index_int32(app->notification->settings.contrast, contrast_value, CONTRAST_COUNT);
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, contrast_text[value_index]);
 
     item = variable_item_list_add(
-        app->variable_item_list, "LCD Backlight", BACKLIGHT_COUNT, backlight_changed, app);
+        app->variable_item_list, "LCD背光", BACKLIGHT_COUNT, backlight_changed, app);
     value_index = value_index_float(
         app->notification->settings.display_brightness, backlight_value, BACKLIGHT_COUNT);
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, backlight_text[value_index]);
 
     item = variable_item_list_add(
-        app->variable_item_list, "Backlight Time", DELAY_COUNT, screen_changed, app);
+        app->variable_item_list, "背光时间", DELAY_COUNT, screen_changed, app);
     value_index = value_index_uint32(
         app->notification->settings.display_off_delay_ms, delay_value, DELAY_COUNT);
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, delay_text[value_index]);
 
     item = variable_item_list_add(
-        app->variable_item_list, "LED Brightness", BACKLIGHT_COUNT, led_changed, app);
+        app->variable_item_list, "LED亮度", BACKLIGHT_COUNT, led_changed, app);
     value_index = value_index_float(
         app->notification->settings.led_brightness, backlight_value, BACKLIGHT_COUNT);
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, backlight_text[value_index]);
 
     if(furi_hal_rtc_is_flag_set(FuriHalRtcFlagStealthMode)) {
-        item = variable_item_list_add(app->variable_item_list, "Volume", 1, NULL, app);
+        item = variable_item_list_add(app->variable_item_list, "音量", 1, NULL, app);
         value_index = 0;
         variable_item_set_current_value_index(item, value_index);
-        variable_item_set_current_value_text(item, "Stealth");
+        variable_item_set_current_value_text(item, "隐匿模式");
     } else {
         item = variable_item_list_add(
-            app->variable_item_list, "Volume", VOLUME_COUNT, volume_changed, app);
+            app->variable_item_list, "音量", VOLUME_COUNT, volume_changed, app);
         value_index = value_index_float(
             app->notification->settings.speaker_volume, volume_value, VOLUME_COUNT);
         variable_item_set_current_value_index(item, value_index);
@@ -228,13 +228,13 @@ static NotificationAppSettings* alloc_settings(void) {
     }
 
     if(furi_hal_rtc_is_flag_set(FuriHalRtcFlagStealthMode)) {
-        item = variable_item_list_add(app->variable_item_list, "Vibro", 1, NULL, app);
+        item = variable_item_list_add(app->variable_item_list, "震动", 1, NULL, app);
         value_index = 0;
         variable_item_set_current_value_index(item, value_index);
-        variable_item_set_current_value_text(item, "Stealth");
+        variable_item_set_current_value_text(item, "隐匿模式");
     } else {
         item = variable_item_list_add(
-            app->variable_item_list, "Vibro", VIBRO_COUNT, vibro_changed, app);
+            app->variable_item_list, "震动", VIBRO_COUNT, vibro_changed, app);
         value_index =
             value_index_bool(app->notification->settings.vibro_on, vibro_value, VIBRO_COUNT);
         variable_item_set_current_value_index(item, value_index);
diff --git a/applications/settings/power_settings_app/application.fam b/applications/settings/power_settings_app/application.fam
index 23cfdfabc..18993dfe5 100644
--- a/applications/settings/power_settings_app/application.fam
+++ b/applications/settings/power_settings_app/application.fam
@@ -1,6 +1,6 @@
 App(
     appid="power_settings",
-    name="Power",
+    name="电源",
     apptype=FlipperAppType.SETTINGS,
     entry_point="power_settings_app",
     requires=[
diff --git a/applications/settings/power_settings_app/scenes/power_settings_scene_power_off.c b/applications/settings/power_settings_app/scenes/power_settings_scene_power_off.c
index fb3b7575b..7046c6b31 100644
--- a/applications/settings/power_settings_app/scenes/power_settings_scene_power_off.c
+++ b/applications/settings/power_settings_app/scenes/power_settings_scene_power_off.c
@@ -17,18 +17,18 @@ void power_settings_scene_power_off_on_enter(void* context) {
 
     dialog_ex_set_header(
         dialog,
-        "Turn Off Device?",
+        "关闭设备？",
         64,
-        settings.happy_mode ? 32 : 0,
+        settings.happy_mode ? 32 : 2,
         AlignCenter,
         settings.happy_mode ? AlignCenter : AlignTop);
     if(!settings.happy_mode) {
         dialog_ex_set_text(
-            dialog, "   I will be\nwaiting for\n you here...", 78, 14, AlignLeft, AlignTop);
+            dialog, "我会在这里\n等着你...", 78, 14, AlignLeft, AlignTop);
         dialog_ex_set_icon(dialog, 14, 10, &I_dolph_cry_49x54);
     }
-    dialog_ex_set_left_button_text(dialog, "Battery");
-    dialog_ex_set_right_button_text(dialog, "Power Off");
+    dialog_ex_set_left_button_text(dialog, "电池");
+    dialog_ex_set_right_button_text(dialog, "关机");
     dialog_ex_set_result_callback(dialog, power_settings_scene_power_off_dialog_callback);
     dialog_ex_set_context(dialog, app);
 
diff --git a/applications/settings/power_settings_app/scenes/power_settings_scene_reboot.c b/applications/settings/power_settings_app/scenes/power_settings_scene_reboot.c
index 187d969ed..d6de12908 100644
--- a/applications/settings/power_settings_app/scenes/power_settings_scene_reboot.c
+++ b/applications/settings/power_settings_app/scenes/power_settings_scene_reboot.c
@@ -15,16 +15,16 @@ void power_settings_scene_reboot_on_enter(void* context) {
     PowerSettingsApp* app = context;
     Submenu* submenu = app->submenu;
 
-    submenu_set_header(submenu, "Reboot Type");
+    submenu_set_header(submenu, "重启类型");
     submenu_add_item(
         submenu,
-        "Firmware Upgrade",
+        "固件升级",
         PowerSettingsRebootSubmenuIndexDfu,
         power_settings_scene_reboot_submenu_callback,
         app);
     submenu_add_item(
         submenu,
-        "Reboot Flipper",
+        "重启Flipper",
         PowerSettingsRebootSubmenuIndexOs,
         power_settings_scene_reboot_submenu_callback,
         app);
diff --git a/applications/settings/power_settings_app/scenes/power_settings_scene_reboot_confirm.c b/applications/settings/power_settings_app/scenes/power_settings_scene_reboot_confirm.c
index 25e7b2bc4..fefdc0126 100644
--- a/applications/settings/power_settings_app/scenes/power_settings_scene_reboot_confirm.c
+++ b/applications/settings/power_settings_app/scenes/power_settings_scene_reboot_confirm.c
@@ -14,24 +14,24 @@ void power_settings_scene_reboot_confirm_on_enter(void* context) {
         scene_manager_get_scene_state(app->scene_manager, PowerSettingsAppSceneRebootConfirm);
 
     if(reboot_type == RebootTypeDFU) {
-        dialog_ex_set_header(dialog, "Reboot to DFU Mode?", 64, 0, AlignCenter, AlignTop);
+        dialog_ex_set_header(dialog, "重启到 DFU 模式？", 64, 0, AlignCenter, AlignTop);
         dialog_ex_set_text(
             dialog,
-            "Needed for device maintenance\nor firmware upgrades",
+            "用于设备维护或固件升级",
             64,
             14,
             AlignCenter,
             AlignTop);
     } else if(reboot_type == RebootTypeNormal) {
-        dialog_ex_set_header(dialog, "Reboot Flipper?", 64, 0, AlignCenter, AlignTop);
+        dialog_ex_set_header(dialog, "重启 Flipper？", 64, 0, AlignCenter, AlignTop);
         dialog_ex_set_text(
-            dialog, "May help with some firmware\n issues", 64, 14, AlignCenter, AlignTop);
+            dialog, "可能有助于解决一些固件问题", 64, 14, AlignCenter, AlignTop);
     } else {
-        furi_crash("Invalid reboot type");
+        furi_crash("无效的重启类型");
     }
 
-    dialog_ex_set_left_button_text(dialog, "Cancel");
-    dialog_ex_set_right_button_text(dialog, "Reboot");
+    dialog_ex_set_left_button_text(dialog, "取消");
+    dialog_ex_set_right_button_text(dialog, "重启");
 
     dialog_ex_set_result_callback(dialog, power_settings_scene_reboot_confirm_dialog_callback);
     dialog_ex_set_context(dialog, app);
diff --git a/applications/settings/power_settings_app/scenes/power_settings_scene_start.c b/applications/settings/power_settings_app/scenes/power_settings_scene_start.c
index cf9616d96..9dc41c263 100644
--- a/applications/settings/power_settings_app/scenes/power_settings_scene_start.c
+++ b/applications/settings/power_settings_app/scenes/power_settings_scene_start.c
@@ -11,7 +11,7 @@ enum PowerSettingsSubmenuIndex {
 
 #define SHUTDOWN_IDLE_DELAY_COUNT 9
 const char* const shutdown_idle_delay_text[SHUTDOWN_IDLE_DELAY_COUNT] = {
-    "OFF",
+    "禁用",
     "15m",
     "30m",
     "1h",
@@ -45,15 +45,15 @@ void power_settings_scene_start_on_enter(void* context) {
     VariableItem* item;
     uint8_t value_index;
 
-    variable_item_list_add(variable_item_list, "Battery Info", 1, NULL, NULL);
+    variable_item_list_add(variable_item_list, "电池信息", 1, NULL, NULL);
 
-    variable_item_list_add(variable_item_list, "Reboot", 1, NULL, NULL);
+    variable_item_list_add(variable_item_list, "重启", 1, NULL, NULL);
 
-    variable_item_list_add(variable_item_list, "Power OFF", 1, NULL, NULL);
+    variable_item_list_add(variable_item_list, "关机", 1, NULL, NULL);
 
     item = variable_item_list_add(
         variable_item_list,
-        "Shutdown on Idle",
+        "闲置时关机",
         SHUTDOWN_IDLE_DELAY_COUNT,
         power_settings_scene_start_auto_lock_delay_changed,
         app);
diff --git a/applications/settings/power_settings_app/views/battery_info.c b/applications/settings/power_settings_app/views/battery_info.c
index ba2d85bd3..305872a98 100644
--- a/applications/settings/power_settings_app/views/battery_info.c
+++ b/applications/settings/power_settings_app/views/battery_info.c
@@ -40,8 +40,8 @@ static void draw_battery(Canvas* canvas, BatteryInfoModel* data, int x, int y) {
 
     // Set text
     if(current > 0) {
-        snprintf(emote, sizeof(emote), "%s", "Yummy!");
-        snprintf(header, sizeof(header), "%s", "Charging at");
+        snprintf(emote, sizeof(emote), "%s", "好吃!");
+        snprintf(header, sizeof(header), "%s", "正在充电");
         snprintf(
             value,
             sizeof(value),
@@ -55,8 +55,8 @@ static void draw_battery(Canvas* canvas, BatteryInfoModel* data, int x, int y) {
             emote,
             sizeof(emote),
             "%s",
-            current < HIGH_DRAIN_CURRENT_THRESHOLD ? "Oh no!" : "Om-nom-nom!");
-        snprintf(header, sizeof(header), "%s", "Consumption is");
+            current < HIGH_DRAIN_CURRENT_THRESHOLD ? "糟糕!" : "好吃好吃!");
+        snprintf(header, sizeof(header), "%s", "消耗为");
         snprintf(
             value,
             sizeof(value),
@@ -65,9 +65,8 @@ static void draw_battery(Canvas* canvas, BatteryInfoModel* data, int x, int y) {
             current < HIGH_DRAIN_CURRENT_THRESHOLD ? "mA!" : "mA");
     } else if(data->vbus_voltage > 0) {
         if(data->charge_voltage_limit < 4.2f) {
-            // Non-default battery charging limit, mention it
-            snprintf(emote, sizeof(emote), "Charged!");
-            snprintf(header, sizeof(header), "Limited to");
+            snprintf(emote, sizeof(emote), "已充满!");
+            snprintf(header, sizeof(header), "限制为");
             snprintf(
                 value,
                 sizeof(value),
@@ -75,10 +74,10 @@ static void draw_battery(Canvas* canvas, BatteryInfoModel* data, int x, int y) {
                 (uint32_t)(data->charge_voltage_limit),
                 (uint32_t)(data->charge_voltage_limit * 10) % 10);
         } else {
-            snprintf(header, sizeof(header), "Charged!");
+            snprintf(header, sizeof(header), "已充满!");
         }
     } else {
-        snprintf(header, sizeof(header), "Napping...");
+        snprintf(header, sizeof(header), "小憩中...");
         snprintf(value, sizeof(value), "(~%ld mA)", ABS(current));
     }
 
@@ -141,8 +140,8 @@ static void battery_info_draw_callback(Canvas* canvas, void* context) {
     draw_stat(canvas, 104, h, &I_Health_16x16, health);
 
     if(model->alt) {
-        elements_button_left(canvas, "Back");
-        elements_button_right(canvas, "Next");
+        elements_button_left(canvas, "返回");
+        elements_button_right(canvas, "下一页");
         char uptime[15];
         uint32_t sec = furi_get_tick() / furi_kernel_get_tick_frequency();
         snprintf(
diff --git a/applications/settings/storage_settings/application.fam b/applications/settings/storage_settings/application.fam
index 560f1f56c..0b54760a5 100644
--- a/applications/settings/storage_settings/application.fam
+++ b/applications/settings/storage_settings/application.fam
@@ -1,6 +1,6 @@
 App(
     appid="storage_settings",
-    name="Storage",
+    name="存储",
     apptype=FlipperAppType.SETTINGS,
     entry_point="storage_settings_app",
     requires=["storage"],
diff --git a/applications/settings/storage_settings/scenes/storage_settings_scene_benchmark.c b/applications/settings/storage_settings/scenes/storage_settings_scene_benchmark.c
index c07ab1ae6..ea0331c56 100644
--- a/applications/settings/storage_settings/scenes/storage_settings_scene_benchmark.c
+++ b/applications/settings/storage_settings/scenes/storage_settings_scene_benchmark.c
@@ -77,7 +77,7 @@ static bool
 static void storage_settings_scene_benchmark(StorageSettings* app) {
     DialogEx* dialog_ex = app->dialog_ex;
     uint8_t* bench_data;
-    dialog_ex_set_header(dialog_ex, "Preparing Data...", 64, 32, AlignCenter, AlignCenter);
+    dialog_ex_set_header(dialog_ex, "准备数据...", 64, 32, AlignCenter, AlignCenter);
 
     bench_data = malloc(BENCH_DATA_SIZE);
     for(size_t i = 0; i < BENCH_DATA_SIZE; i++) {
@@ -88,7 +88,7 @@ static void storage_settings_scene_benchmark(StorageSettings* app) {
     uint32_t bench_w_speed[BENCH_COUNT] = {0, 0, 0, 0, 0, 0};
     uint32_t bench_r_speed[BENCH_COUNT] = {0, 0, 0, 0, 0, 0};
 
-    dialog_ex_set_header(dialog_ex, "Benchmarking...", 74, 32, AlignCenter, AlignCenter);
+    dialog_ex_set_header(dialog_ex, "基准测试中...", 74, 32, AlignCenter, AlignCenter);
     dialog_ex_set_icon(dialog_ex, 12, 20, &I_LoadingHourglass_24x24);
     for(size_t i = 0; i < BENCH_COUNT; i++) {
         if(!storage_settings_scene_bench_write(
@@ -136,10 +136,10 @@ void storage_settings_scene_benchmark_on_enter(void* context) {
 
     if(sd_status != FSE_OK) {
         dialog_ex_set_icon(dialog_ex, 83, 22, &I_WarningDolphinFlip_45x42);
-        dialog_ex_set_header(dialog_ex, "SD Card Not Mounted", 64, 3, AlignCenter, AlignTop);
+        dialog_ex_set_header(dialog_ex, "SD卡未安装", 64, 3, AlignCenter, AlignTop);
         dialog_ex_set_text(
-            dialog_ex, "Try to reinsert\nor format SD\ncard.", 3, 19, AlignLeft, AlignTop);
-        dialog_ex_set_center_button_text(dialog_ex, "Ok");
+            dialog_ex, "请尝试重新插入\n或格式化 SD\n卡。", 3, 19, AlignLeft, AlignTop);
+        dialog_ex_set_center_button_text(dialog_ex, "确定");
     } else {
         storage_settings_scene_benchmark(app);
         notification_message(app->notification, &sequence_blink_green_100);
diff --git a/applications/settings/storage_settings/scenes/storage_settings_scene_benchmark_confirm.c b/applications/settings/storage_settings/scenes/storage_settings_scene_benchmark_confirm.c
index 2f8644761..aa3194de7 100644
--- a/applications/settings/storage_settings/scenes/storage_settings_scene_benchmark_confirm.c
+++ b/applications/settings/storage_settings/scenes/storage_settings_scene_benchmark_confirm.c
@@ -15,22 +15,22 @@ void storage_settings_scene_benchmark_confirm_on_enter(void* context) {
 
     if(sd_status == FSE_NOT_READY) {
         dialog_ex_set_icon(dialog_ex, 83, 22, &I_WarningDolphinFlip_45x42);
-        dialog_ex_set_header(dialog_ex, "SD Card Not Mounted", 64, 3, AlignCenter, AlignTop);
+        dialog_ex_set_header(dialog_ex, "SD 卡未挂载", 64, 3, AlignCenter, AlignTop);
         dialog_ex_set_text(
-            dialog_ex, "Try to reinsert\nor format SD\ncard.", 3, 19, AlignLeft, AlignTop);
-        dialog_ex_set_center_button_text(dialog_ex, "Ok");
+            dialog_ex, "请尝试重新插入\n或格式化 SD 卡。", 3, 19, AlignLeft, AlignTop);
+        dialog_ex_set_center_button_text(dialog_ex, "确定");
     } else {
-        dialog_ex_set_header(dialog_ex, "Benchmark SD Card?", 64, 0, AlignCenter, AlignTop);
+        dialog_ex_set_header(dialog_ex, "测试 SD 卡性能？", 64, 2, AlignCenter, AlignTop);
         dialog_ex_set_text(
             dialog_ex,
-            "SD will be tested in SPI\nmode. Learn more:\nr.flipper.net/sd_test",
+            "SD 卡将以 SPI 模式\n进行测试。\n了解更多：\nr.flipper.net/sd_test",
             0,
             12,
             AlignLeft,
             AlignTop);
         dialog_ex_set_icon(dialog_ex, 103, 12, &I_qr_benchmark_25x25);
-        dialog_ex_set_left_button_text(dialog_ex, "Cancel");
-        dialog_ex_set_right_button_text(dialog_ex, "Benchmark");
+        dialog_ex_set_left_button_text(dialog_ex, "取消");
+        dialog_ex_set_right_button_text(dialog_ex, "基准测试");
     }
 
     dialog_ex_set_context(dialog_ex, app);
diff --git a/applications/settings/storage_settings/scenes/storage_settings_scene_factory_reset.c b/applications/settings/storage_settings/scenes/storage_settings_scene_factory_reset.c
index 0f8e1aa96..8486b97f1 100644
--- a/applications/settings/storage_settings/scenes/storage_settings_scene_factory_reset.c
+++ b/applications/settings/storage_settings/scenes/storage_settings_scene_factory_reset.c
@@ -18,13 +18,13 @@ void storage_settings_scene_factory_reset_on_enter(void* context) {
     dialog_ex_set_context(dialog_ex, app);
     dialog_ex_set_result_callback(dialog_ex, storage_settings_scene_factory_reset_dialog_callback);
 
-    dialog_ex_set_left_button_text(dialog_ex, "Cancel");
-    dialog_ex_set_right_button_text(dialog_ex, "Erase");
+    dialog_ex_set_left_button_text(dialog_ex, "取消");
+    dialog_ex_set_right_button_text(dialog_ex, "擦除");
 
-    dialog_ex_set_header(dialog_ex, "Confirm Factory Reset?", 64, 0, AlignCenter, AlignTop);
+    dialog_ex_set_header(dialog_ex, "确定恢复出厂模式？", 64, 2, AlignCenter, AlignTop);
     dialog_ex_set_text(
         dialog_ex,
-        "Internal storage will be erased\ndata and settings will be lost!",
+        "内部存储将被清除\n数据和设置将会丢失！",
         64,
         14,
         AlignCenter,
diff --git a/applications/settings/storage_settings/scenes/storage_settings_scene_format_confirm.c b/applications/settings/storage_settings/scenes/storage_settings_scene_format_confirm.c
index c79647ad2..e9e4c1e83 100644
--- a/applications/settings/storage_settings/scenes/storage_settings_scene_format_confirm.c
+++ b/applications/settings/storage_settings/scenes/storage_settings_scene_format_confirm.c
@@ -15,15 +15,15 @@ void storage_settings_scene_format_confirm_on_enter(void* context) {
 
     if(sd_status == FSE_NOT_READY) {
         dialog_ex_set_icon(dialog_ex, 83, 22, &I_WarningDolphinFlip_45x42);
-        dialog_ex_set_header(dialog_ex, "SD Card Not Mounted", 64, 3, AlignCenter, AlignTop);
+        dialog_ex_set_header(dialog_ex, "SD 卡未挂载", 64, 3, AlignCenter, AlignTop);
         dialog_ex_set_text(
-            dialog_ex, "Try to reinsert\nor format SD\ncard.", 3, 19, AlignLeft, AlignTop);
-        dialog_ex_set_center_button_text(dialog_ex, "Ok");
+            dialog_ex, "请尝试重新插入\n或格式化 SD 卡。", 3, 19, AlignLeft, AlignTop);
+        dialog_ex_set_center_button_text(dialog_ex, "确定");
     } else {
-        dialog_ex_set_header(dialog_ex, "Format SD Card?", 64, 0, AlignCenter, AlignTop);
-        dialog_ex_set_text(dialog_ex, "All data will be lost!", 64, 12, AlignCenter, AlignTop);
-        dialog_ex_set_left_button_text(dialog_ex, "Cancel");
-        dialog_ex_set_right_button_text(dialog_ex, "Format");
+        dialog_ex_set_header(dialog_ex, "格式化 SD 卡？", 64, 2, AlignCenter, AlignTop);
+        dialog_ex_set_text(dialog_ex, "所有数据将会丢失！", 64, 14, AlignCenter, AlignTop);
+        dialog_ex_set_left_button_text(dialog_ex, "取消");
+        dialog_ex_set_right_button_text(dialog_ex, "格式化");
     }
 
     dialog_ex_set_context(dialog_ex, app);
diff --git a/applications/settings/storage_settings/scenes/storage_settings_scene_formatting.c b/applications/settings/storage_settings/scenes/storage_settings_scene_formatting.c
index d1652fa20..2d83c1c1c 100644
--- a/applications/settings/storage_settings/scenes/storage_settings_scene_formatting.c
+++ b/applications/settings/storage_settings/scenes/storage_settings_scene_formatting.c
@@ -34,7 +34,7 @@ void storage_settings_scene_formatting_on_enter(void* context) {
     FS_Error error;
     DialogEx* dialog_ex = app->dialog_ex;
 
-    dialog_ex_set_header(dialog_ex, "Formatting...", 70, 32, AlignCenter, AlignCenter);
+    dialog_ex_set_header(dialog_ex, "正在格式化...", 70, 32, AlignCenter, AlignCenter);
     dialog_ex_set_icon(dialog_ex, 15, 20, &I_LoadingHourglass_24x24);
     view_dispatcher_switch_to_view(app->view_dispatcher, StorageSettingsViewDialogEx);
 
@@ -47,7 +47,7 @@ void storage_settings_scene_formatting_on_enter(void* context) {
     dialog_ex_set_result_callback(dialog_ex, storage_settings_scene_formatting_dialog_callback);
 
     if(error != FSE_OK) {
-        dialog_ex_set_header(dialog_ex, "Cannot Format SD Card", 64, 10, AlignCenter, AlignCenter);
+        dialog_ex_set_header(dialog_ex, "无法格式化 SD 卡", 64, 10, AlignCenter, AlignCenter);
         dialog_ex_set_icon(dialog_ex, 0, 0, NULL);
         dialog_ex_set_text(
             dialog_ex, storage_error_get_desc(error), 64, 32, AlignCenter, AlignCenter);
@@ -57,7 +57,7 @@ void storage_settings_scene_formatting_on_enter(void* context) {
             power_reboot(power, PowerBootModeNormal);
         } else {
             dialog_ex_set_icon(dialog_ex, 48, 6, &I_DolphinDone_80x58);
-            dialog_ex_set_header(dialog_ex, "Formatted", 5, 10, AlignLeft, AlignTop);
+            dialog_ex_set_header(dialog_ex, "已格式化", 5, 10, AlignLeft, AlignTop);
             NotificationApp* notification = furi_record_open(RECORD_NOTIFICATION);
             notification_message(notification, &sequence_single_vibro);
             notification_message(notification, &sequence_set_green_255);
@@ -65,7 +65,7 @@ void storage_settings_scene_formatting_on_enter(void* context) {
             furi_record_close(RECORD_NOTIFICATION);
         }
     }
-    dialog_ex_set_left_button_text(dialog_ex, "Finish");
+    dialog_ex_set_left_button_text(dialog_ex, "完成");
 }
 
 bool storage_settings_scene_formatting_on_event(void* context, SceneManagerEvent event) {
diff --git a/applications/settings/storage_settings/scenes/storage_settings_scene_internal_info.c b/applications/settings/storage_settings/scenes/storage_settings_scene_internal_info.c
index 87a7ac655..24a8b687f 100644
--- a/applications/settings/storage_settings/scenes/storage_settings_scene_internal_info.c
+++ b/applications/settings/storage_settings/scenes/storage_settings_scene_internal_info.c
@@ -22,24 +22,24 @@ void storage_settings_scene_internal_info_on_enter(void* context) {
 
     if(error != FSE_OK) {
         dialog_ex_set_header(
-            dialog_ex, "Internal Storage Error", 64, 10, AlignCenter, AlignCenter);
+            dialog_ex, "内部存储错误", 64, 10, AlignCenter, AlignCenter);
         dialog_ex_set_text(
             dialog_ex, storage_error_get_desc(error), 64, 32, AlignCenter, AlignCenter);
     } else {
         furi_string_printf(
             app->text_string,
-            "Name: %s\nType: Virtual (/.int on SD)\nTotal: %lu KiB\nFree: %lu KiB\n",
-            furi_hal_version_get_name_ptr() ? furi_hal_version_get_name_ptr() : "Unknown",
+            "名称: %s\n类型: 虚拟 (/.int 在 SD 卡上)\n总计: %lu KiB\n剩余: %lu KiB\n",
+            furi_hal_version_get_name_ptr() ? furi_hal_version_get_name_ptr() : "未知",
             (uint32_t)(total_space / 1024),
             (uint32_t)(free_space / 1024));
 
         uint32_t free_flash =
             furi_hal_flash_get_free_end_address() - furi_hal_flash_get_free_start_address();
         if(free_flash < 1024) {
-            furi_string_cat_printf(app->text_string, "Flash: %lu B free", free_flash);
+            furi_string_cat_printf(app->text_string, "闪存: %lu B 剩余", free_flash);
         } else {
             furi_string_cat_printf(
-                app->text_string, "Flash: %.2f KiB free", (double)free_flash / 1024);
+                app->text_string, "闪存: %.2f KiB 剩余", (double)free_flash / 1024);
         }
 
         dialog_ex_set_text(
diff --git a/applications/settings/storage_settings/scenes/storage_settings_scene_sd_info.c b/applications/settings/storage_settings/scenes/storage_settings_scene_sd_info.c
index a24e2c282..faa048e62 100644
--- a/applications/settings/storage_settings/scenes/storage_settings_scene_sd_info.c
+++ b/applications/settings/storage_settings/scenes/storage_settings_scene_sd_info.c
@@ -20,38 +20,39 @@ void storage_settings_scene_sd_info_on_enter(void* context) {
 
     if(sd_status != FSE_OK) {
         dialog_ex_set_icon(dialog_ex, 83, 22, &I_WarningDolphinFlip_45x42);
-        dialog_ex_set_header(dialog_ex, "SD Card Not Mounted", 64, 3, AlignCenter, AlignTop);
+        dialog_ex_set_header(dialog_ex, "SD卡未安装", 64, 3, AlignCenter, AlignTop);
         dialog_ex_set_text(
-            dialog_ex, "Try to reinsert\nor format SD\ncard.", 3, 19, AlignLeft, AlignTop);
-        dialog_ex_set_center_button_text(dialog_ex, "Ok");
+            dialog_ex, "请尝试重新插入\n或格式化 SD\n卡。", 3, 19, AlignLeft, AlignTop);
+        dialog_ex_set_center_button_text(dialog_ex, "确定");
     } else {
         furi_string_printf(
             app->text_string,
-            "Label: %s\nType: %s\n",
+            "标签: %s\n类型: %s\n",
             sd_info.label,
             sd_api_get_fs_type_text(sd_info.fs_type));
 
         if(sd_info.kb_total < 1024) {
-            furi_string_cat_printf(app->text_string, "Total: %lu KiB\n", sd_info.kb_total);
+            furi_string_cat_printf(app->text_string, "总计: %lu KiB\n", sd_info.kb_total);
         } else if(sd_info.kb_total < 1024 * 1024) {
             furi_string_cat_printf(
-                app->text_string, "Total: %.2f MiB\n", (double)sd_info.kb_total / 1024);
+                app->text_string, "总计: %.2f MiB\n", (double)sd_info.kb_total / 1024);
         } else {
             furi_string_cat_printf(
-                app->text_string, "Total: %.2f GiB\n", (double)sd_info.kb_total / (1024 * 1024));
+                app->text_string, "总计: %.2f GiB\n", (double)sd_info.kb_total / (1024 * 1024));
         }
 
         if(sd_info.kb_free < 1024) {
-            furi_string_cat_printf(app->text_string, "Free: %lu KiB", sd_info.kb_free);
+            furi_string_cat_printf(app->text_string, "剩余: %lu KiB", sd_info.kb_free);
         } else if(sd_info.kb_free < 1024 * 1024) {
             furi_string_cat_printf(
-                app->text_string, "Free: %.2f MiB", (double)sd_info.kb_free / 1024);
+                app->text_string, "剩余: %.2f MiB", (double)sd_info.kb_free / 1024);
         } else {
             furi_string_cat_printf(
-                app->text_string, "Free: %.2f GiB", (double)sd_info.kb_free / (1024 * 1024));
+                app->text_string, "剩余: %.2f GiB", (double)sd_info.kb_free / (1024 * 1024));
         }
         furi_string_cat_printf(
-            app->text_string, "  (%.2f%%)\n", (double)sd_info.kb_free * 100 / sd_info.kb_total);
+            app->text_string,
+            "  (%.2f%%)\n", (double)sd_info.kb_free * 100 / sd_info.kb_total);
 
         furi_string_cat_printf(
             app->text_string,
diff --git a/applications/settings/storage_settings/scenes/storage_settings_scene_start.c b/applications/settings/storage_settings/scenes/storage_settings_scene_start.c
index ec0e8f2f9..6c7cf6168 100644
--- a/applications/settings/storage_settings/scenes/storage_settings_scene_start.c
+++ b/applications/settings/storage_settings/scenes/storage_settings_scene_start.c
@@ -22,13 +22,13 @@ void storage_settings_scene_start_on_enter(void* context) {
 
     submenu_add_item(
         submenu,
-        "About Internal Storage",
+        "关于内部存储",
         StorageSettingsStartSubmenuIndexInternalInfo,
         storage_settings_scene_start_submenu_callback,
         app);
     submenu_add_item(
         submenu,
-        "About SD Card",
+        "关于 SD 卡",
         StorageSettingsStartSubmenuIndexSDInfo,
         storage_settings_scene_start_submenu_callback,
         app);
@@ -37,14 +37,14 @@ void storage_settings_scene_start_on_enter(void* context) {
     if(sd_status != FSE_OK) {
         submenu_add_item(
             submenu,
-            "Mount SD Card",
+            "挂载 SD 卡",
             StorageSettingsStartSubmenuIndexUnmount,
             storage_settings_scene_start_submenu_callback,
             app);
     } else {
         submenu_add_item(
             submenu,
-            "Unmount SD Card",
+            "卸载 SD 卡",
             StorageSettingsStartSubmenuIndexUnmount,
             storage_settings_scene_start_submenu_callback,
             app);
@@ -52,25 +52,25 @@ void storage_settings_scene_start_on_enter(void* context) {
 
     submenu_add_item(
         submenu,
-        "Format SD Card",
+        "格式化 SD 卡",
         StorageSettingsStartSubmenuIndexFormat,
         storage_settings_scene_start_submenu_callback,
         app);
     submenu_add_item(
         submenu,
-        "Benchmark SD Card",
+        "基准测试 SD 卡",
         StorageSettingsStartSubmenuIndexBenchy,
         storage_settings_scene_start_submenu_callback,
         app);
     submenu_add_item(
         submenu,
-        "Factory Reset",
+        "恢复出厂设置",
         StorageSettingsStartSubmenuIndexFactoryReset,
         storage_settings_scene_start_submenu_callback,
         app);
     submenu_add_item(
         submenu,
-        "Wipe Device",
+        "清除设备",
         StorageSettingsStartSubmenuIndexWipeDevice,
         storage_settings_scene_start_submenu_callback,
         app);
diff --git a/applications/settings/storage_settings/scenes/storage_settings_scene_unmount_confirm.c b/applications/settings/storage_settings/scenes/storage_settings_scene_unmount_confirm.c
index 1b9970f9f..b3ab2f931 100644
--- a/applications/settings/storage_settings/scenes/storage_settings_scene_unmount_confirm.c
+++ b/applications/settings/storage_settings/scenes/storage_settings_scene_unmount_confirm.c
@@ -13,22 +13,22 @@ void storage_settings_scene_unmount_confirm_on_enter(void* context) {
 
     FS_Error sd_status = storage_sd_status(app->fs_api);
     if(sd_status == FSE_NOT_READY) {
-        dialog_ex_set_header(dialog_ex, "Mount SD Card?", 64, 10, AlignCenter, AlignCenter);
+        dialog_ex_set_header(dialog_ex, "是否挂载 SD 卡？", 64, 10, AlignCenter, AlignCenter);
         dialog_ex_set_text(
             dialog_ex,
-            "This may turn off power\nfor external modules",
+            "这可能会关闭外部模块的电源",
             64,
             32,
             AlignCenter,
             AlignCenter);
-        dialog_ex_set_left_button_text(dialog_ex, "Cancel");
-        dialog_ex_set_right_button_text(dialog_ex, "Mount");
+        dialog_ex_set_left_button_text(dialog_ex, "取消");
+        dialog_ex_set_right_button_text(dialog_ex, "挂载");
     } else {
-        dialog_ex_set_header(dialog_ex, "Unmount SD Card?", 64, 10, AlignCenter, AlignCenter);
+        dialog_ex_set_header(dialog_ex, "是否卸载 SD 卡？", 64, 10, AlignCenter, AlignCenter);
         dialog_ex_set_text(
-            dialog_ex, "SD card will be\nunavailable", 64, 32, AlignCenter, AlignCenter);
-        dialog_ex_set_left_button_text(dialog_ex, "Cancel");
-        dialog_ex_set_right_button_text(dialog_ex, "Unmount");
+            dialog_ex, "SD 卡将变为不可用", 64, 32, AlignCenter, AlignCenter);
+        dialog_ex_set_left_button_text(dialog_ex, "取消");
+        dialog_ex_set_right_button_text(dialog_ex, "卸载");
     }
 
     dialog_ex_set_context(dialog_ex, app);
diff --git a/applications/settings/storage_settings/scenes/storage_settings_scene_unmounted.c b/applications/settings/storage_settings/scenes/storage_settings_scene_unmounted.c
index 86398b1c9..af74b835d 100644
--- a/applications/settings/storage_settings/scenes/storage_settings_scene_unmounted.c
+++ b/applications/settings/storage_settings/scenes/storage_settings_scene_unmounted.c
@@ -15,12 +15,12 @@ void storage_settings_scene_unmounted_on_enter(void* context) {
     if(sd_status == FSE_NOT_READY) {
         FS_Error error = storage_sd_mount(app->fs_api);
         if(error == FSE_OK) {
-            dialog_ex_set_header(dialog_ex, "SD Card Mounted", 64, 3, AlignCenter, AlignTop);
+            dialog_ex_set_header(dialog_ex, "SD 卡已挂载", 64, 3, AlignCenter, AlignTop);
             dialog_ex_set_text(
-                dialog_ex, "Flipper can use\nSD card now.", 3, 22, AlignLeft, AlignTop);
+                dialog_ex, "Flipper 现在可以使用\nSD 卡了。", 3, 22, AlignLeft, AlignTop);
             notification_message(app->notification, &sequence_blink_green_100);
         } else {
-            dialog_ex_set_header(dialog_ex, "Cannot Mount SD Card", 64, 3, AlignCenter, AlignTop);
+            dialog_ex_set_header(dialog_ex, "无法挂载 SD 卡", 64, 3, AlignCenter, AlignTop);
             dialog_ex_set_text(
                 dialog_ex, storage_error_get_desc(error), 3, 22, AlignLeft, AlignTop);
             notification_message(app->notification, &sequence_blink_red_100);
@@ -28,20 +28,20 @@ void storage_settings_scene_unmounted_on_enter(void* context) {
     } else {
         FS_Error error = storage_sd_unmount(app->fs_api);
         if(error == FSE_OK) {
-            dialog_ex_set_header(dialog_ex, "SD Card Unmounted", 64, 3, AlignCenter, AlignTop);
+            dialog_ex_set_header(dialog_ex, "SD 卡已卸载", 64, 3, AlignCenter, AlignTop);
             dialog_ex_set_text(
-                dialog_ex, "You can remove\nSD card now.", 3, 22, AlignLeft, AlignTop);
+                dialog_ex, "您可以现在移除\nSD 卡。", 3, 22, AlignLeft, AlignTop);
             notification_message(app->notification, &sequence_blink_green_100);
         } else {
             dialog_ex_set_header(
-                dialog_ex, "Cannot Unmount SD Card", 64, 3, AlignCenter, AlignTop);
+                dialog_ex, "无法卸载 SD 卡", 64, 3, AlignCenter, AlignTop);
             dialog_ex_set_text(
                 dialog_ex, storage_error_get_desc(error), 3, 22, AlignLeft, AlignTop);
             notification_message(app->notification, &sequence_blink_red_100);
         }
     }
 
-    dialog_ex_set_center_button_text(dialog_ex, "OK");
+    dialog_ex_set_center_button_text(dialog_ex, "确定");
     dialog_ex_set_icon(dialog_ex, 83, 22, &I_WarningDolphinFlip_45x42);
 
     dialog_ex_set_context(dialog_ex, app);
diff --git a/applications/settings/storage_settings/scenes/storage_settings_scene_wipe_device.c b/applications/settings/storage_settings/scenes/storage_settings_scene_wipe_device.c
index adecdf798..716cb295e 100644
--- a/applications/settings/storage_settings/scenes/storage_settings_scene_wipe_device.c
+++ b/applications/settings/storage_settings/scenes/storage_settings_scene_wipe_device.c
@@ -17,13 +17,13 @@ void storage_settings_scene_wipe_device_on_enter(void* context) {
     dialog_ex_set_context(dialog_ex, app);
     dialog_ex_set_result_callback(dialog_ex, storage_settings_scene_wipe_device_dialog_callback);
 
-    dialog_ex_set_left_button_text(dialog_ex, "Cancel");
-    dialog_ex_set_right_button_text(dialog_ex, "Erase");
+    dialog_ex_set_left_button_text(dialog_ex, "取消");
+    dialog_ex_set_right_button_text(dialog_ex, "擦除");
 
-    dialog_ex_set_header(dialog_ex, "Confirm full Wipe", 64, 10, AlignCenter, AlignCenter);
+    dialog_ex_set_header(dialog_ex, "确认完全擦除", 64, 10, AlignCenter, AlignCenter);
     dialog_ex_set_text(
         dialog_ex,
-        "Everything will be erased\r\nData and settings will be lost!",
+        "所有内容将被擦除\r\n数据和设置将丢失！",
         64,
         32,
         AlignCenter,
diff --git a/applications/settings/system/application.fam b/applications/settings/system/application.fam
index f9668e5f4..42c9fdb86 100644
--- a/applications/settings/system/application.fam
+++ b/applications/settings/system/application.fam
@@ -1,6 +1,6 @@
 App(
     appid="system_settings",
-    name="System",
+    name="系统",
     apptype=FlipperAppType.SETTINGS,
     entry_point="system_settings_app",
     requires=["gui", "locale"],
diff --git a/applications/settings/system/system_settings.c b/applications/settings/system/system_settings.c
index 43163dc17..cce3f1654 100644
--- a/applications/settings/system/system_settings.c
+++ b/applications/settings/system/system_settings.c
@@ -19,13 +19,13 @@ enum VarItemListIndex {
 };
 
 const char* const log_level_text[] = {
-    "Default",
-    "None",
-    "Error",
-    "Warning",
-    "Info",
-    "Debug",
-    "Trace",
+    "默认",
+    "无",
+    "错误",
+    "警告",
+    "信息",
+    "调试",
+    "跟踪",
 };
 
 const uint32_t log_level_value[] = {
@@ -90,8 +90,8 @@ static void log_baud_rate_changed(VariableItem* item) {
 }
 
 const char* const debug_text[] = {
-    "OFF",
-    "ON",
+    "关闭",
+    "开启",
 };
 
 static void debug_changed(VariableItem* item) {
@@ -134,8 +134,8 @@ static void heap_trace_mode_changed(VariableItem* item) {
 }
 
 const char* const measurement_units_text[] = {
-    "Metric",
-    "Imperial",
+    "公制",
+    "英制",
 };
 
 const uint32_t measurement_units_value[] = {
@@ -184,8 +184,8 @@ static void date_format_changed(VariableItem* item) {
 }
 
 const char* const hand_mode[] = {
-    "Righty",
-    "Lefty",
+    "右手",
+    "左手",
 };
 
 static void hand_orient_changed(VariableItem* item) {
@@ -199,8 +199,8 @@ static void hand_orient_changed(VariableItem* item) {
 }
 
 const char* const sleep_method[] = {
-    "Default",
-    "Legacy",
+    "默认",
+    "旧版",
 };
 
 static void sleep_method_changed(VariableItem* item) {
@@ -215,8 +215,8 @@ static void sleep_method_changed(VariableItem* item) {
 }
 
 const char* const filename_scheme[] = {
-    "Time",
-    "Random",
+    "时间",
+    "随机",
 };
 
 static void filename_scheme_changed(VariableItem* item) {
@@ -312,7 +312,7 @@ static bool system_settings_custom_event_callback(void* context, uint32_t event)
 SystemSettings* system_settings_alloc(void) {
     SystemSettings* app = malloc(sizeof(SystemSettings));
 
-    // Load settings
+    // 加载设置
     app->gui = furi_record_open(RECORD_GUI);
 
     app->view_dispatcher = view_dispatcher_alloc();
@@ -327,14 +327,14 @@ SystemSettings* system_settings_alloc(void) {
     app->var_item_list = variable_item_list_alloc();
 
     item = variable_item_list_add(
-        app->var_item_list, "Hand Orient", COUNT_OF(hand_mode), hand_orient_changed, app);
+        app->var_item_list, "手部方向", COUNT_OF(hand_mode), hand_orient_changed, app);
     value_index = furi_hal_rtc_is_flag_set(FuriHalRtcFlagHandOrient) ? 1 : 0;
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, hand_mode[value_index]);
 
     item = variable_item_list_add(
         app->var_item_list,
-        "Units",
+        "单位",
         COUNT_OF(measurement_units_text),
         measurement_units_changed,
         app);
@@ -344,53 +344,49 @@ SystemSettings* system_settings_alloc(void) {
     variable_item_set_current_value_text(item, measurement_units_text[value_index]);
 
     item = variable_item_list_add(
-        app->var_item_list, "Time Format", COUNT_OF(time_format_text), time_format_changed, app);
+        app->var_item_list, "时间格式", COUNT_OF(time_format_text), time_format_changed, app);
     value_index = value_index_uint32(
         locale_get_time_format(), time_format_value, COUNT_OF(time_format_value));
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, time_format_text[value_index]);
 
     item = variable_item_list_add(
-        app->var_item_list, "Date Format", COUNT_OF(date_format_text), date_format_changed, app);
+        app->var_item_list, "日期格式", COUNT_OF(date_format_text), date_format_changed, app);
     value_index = value_index_uint32(
         locale_get_date_format(), date_format_value, COUNT_OF(date_format_value));
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, date_format_text[value_index]);
 
     item = variable_item_list_add(
-        app->var_item_list, "Log Level", COUNT_OF(log_level_text), log_level_changed, app);
+        app->var_item_list, "日志级别", COUNT_OF(log_level_text), log_level_changed, app);
     value_index = value_index_uint32(
         furi_hal_rtc_get_log_level(), log_level_value, COUNT_OF(log_level_text));
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, log_level_text[value_index]);
 
     item = variable_item_list_add(
-        app->var_item_list, "Log Device", COUNT_OF(log_device_text), log_device_changed, app);
+        app->var_item_list, "日志设备", COUNT_OF(log_device_text), log_device_changed, app);
     value_index = value_index_uint32(
         furi_hal_rtc_get_log_device(), log_device_value, COUNT_OF(log_device_text));
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, log_device_text[value_index]);
 
     item = variable_item_list_add(
-        app->var_item_list,
-        "Log Baud Rate",
-        COUNT_OF(log_baud_rate_text),
-        log_baud_rate_changed,
-        app);
+        app->var_item_list, "日志波特率", COUNT_OF(log_baud_rate_text), log_baud_rate_changed, app);
     value_index = value_index_uint32(
         furi_hal_rtc_get_log_baud_rate(), log_baud_rate_value, COUNT_OF(log_baud_rate_text));
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, log_baud_rate_text[value_index]);
 
     item = variable_item_list_add(
-        app->var_item_list, "Debug", COUNT_OF(debug_text), debug_changed, app);
+        app->var_item_list, "调试", COUNT_OF(debug_text), debug_changed, app);
     value_index = furi_hal_rtc_is_flag_set(FuriHalRtcFlagDebug) ? 1 : 0;
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, debug_text[value_index]);
 
     item = variable_item_list_add(
         app->var_item_list,
-        "Heap Trace",
+        "堆栈跟踪",
         COUNT_OF(heap_trace_mode_text),
         heap_trace_mode_changed,
         app);
@@ -401,13 +397,13 @@ SystemSettings* system_settings_alloc(void) {
     variable_item_set_current_value_text(item, heap_trace_mode_text[value_index]);
 
     item = variable_item_list_add(
-        app->var_item_list, "Sleep Method", COUNT_OF(sleep_method), sleep_method_changed, app);
+        app->var_item_list, "睡眠方式", COUNT_OF(sleep_method), sleep_method_changed, app);
     value_index = furi_hal_rtc_is_flag_set(FuriHalRtcFlagLegacySleep) ? 1 : 0;
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, sleep_method[value_index]);
 
     item = variable_item_list_add(
-        app->var_item_list, "File Naming", COUNT_OF(filename_scheme), filename_scheme_changed, app);
+        app->var_item_list, "文件命名", COUNT_OF(filename_scheme), filename_scheme_changed, app);
     value_index = furi_hal_rtc_is_flag_set(FuriHalRtcFlagRandomFilename) ? 1 : 0;
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, filename_scheme[value_index]);
diff --git a/applications/system/updater/util/update_task.c b/applications/system/updater/util/update_task.c
index b6e99e135..81df3241e 100644
--- a/applications/system/updater/util/update_task.c
+++ b/applications/system/updater/util/update_task.c
@@ -12,25 +12,25 @@
 
 static const char* update_task_stage_descr[] = {
     [UpdateTaskStageProgress] = "...",
-    [UpdateTaskStageReadManifest] = "Loading update manifest",
-    [UpdateTaskStageValidateDFUImage] = "Checking DFU file",
-    [UpdateTaskStageFlashWrite] = "Writing flash",
-    [UpdateTaskStageFlashValidate] = "Validating flash",
-    [UpdateTaskStageRadioImageValidate] = "Checking radio FW",
-    [UpdateTaskStageRadioErase] = "Uninstalling radio FW",
-    [UpdateTaskStageRadioWrite] = "Writing radio FW",
-    [UpdateTaskStageRadioInstall] = "Installing radio FW",
-    [UpdateTaskStageRadioBusy] = "Core 2 busy",
-    [UpdateTaskStageOBValidation] = "Validating opt. bytes",
-    [UpdateTaskStageIntBackup] = "Backing up configuration",
-    [UpdateTaskStageIntRestore] = "Restoring configuration",
-    [UpdateTaskStageResourcesFileCleanup] = "Cleaning up files",
-    [UpdateTaskStageResourcesDirCleanup] = "Cleaning up directories",
-    [UpdateTaskStageResourcesFileUnpack] = "Extracting resources",
-    [UpdateTaskStageSplashscreenInstall] = "Installing splashscreen",
-    [UpdateTaskStageCompleted] = "Restarting...",
-    [UpdateTaskStageError] = "Error",
-    [UpdateTaskStageOBError] = "OB, report",
+    [UpdateTaskStageReadManifest] = "加载更新清单",
+    [UpdateTaskStageValidateDFUImage] = "检查 DFU 文件",
+    [UpdateTaskStageFlashWrite] = "写入闪存",
+    [UpdateTaskStageFlashValidate] = "验证闪存",
+    [UpdateTaskStageRadioImageValidate] = "检查无线固件",
+    [UpdateTaskStageRadioErase] = "卸载无线固件",
+    [UpdateTaskStageRadioWrite] = "写入无线固件",
+    [UpdateTaskStageRadioInstall] = "安装无线固件",
+    [UpdateTaskStageRadioBusy] = "核心 2 繁忙",
+    [UpdateTaskStageOBValidation] = "验证选项字节",
+    [UpdateTaskStageIntBackup] = "备份配置",
+    [UpdateTaskStageIntRestore] = "恢复配置",
+    [UpdateTaskStageResourcesFileCleanup] = "清理文件",
+    [UpdateTaskStageResourcesDirCleanup] = "清理目录",
+    [UpdateTaskStageResourcesFileUnpack] = "解压资源",
+    [UpdateTaskStageSplashscreenInstall] = "安装启动画面",
+    [UpdateTaskStageCompleted] = "正在重启...",
+    [UpdateTaskStageError] = "错误",
+    [UpdateTaskStageOBError] = "选项字节错误，请报告",
 };
 
 static const struct {
diff --git a/applications/system/updater/views/updater_main.c b/applications/system/updater/views/updater_main.c
index 243430fe6..b01ff49a5 100644
--- a/applications/system/updater/views/updater_main.c
+++ b/applications/system/updater/views/updater_main.c
@@ -94,7 +94,7 @@ static void updater_main_draw_callback(Canvas* canvas, void* _model) {
         canvas_draw_icon(canvas, 75, 55, &I_Pin_back_arrow_10x8);
     } else {
         canvas_set_font(canvas, FontSecondary);
-        canvas_draw_str_aligned(canvas, 82, 5, AlignCenter, AlignTop, "Installing");
+        canvas_draw_str_aligned(canvas, 82, 5, AlignCenter, AlignTop, "正在安装");
         canvas_draw_str_aligned(
             canvas, 64, 51, AlignCenter, AlignTop, furi_string_get_cstr(model->status));
         canvas_draw_icon(canvas, 4, 5, &I_Updating_32x40);
diff --git a/lib/momentum/settings.c b/lib/momentum/settings.c
index 9da9a4762..4766fa920 100644
--- a/lib/momentum/settings.c
+++ b/lib/momentum/settings.c
@@ -42,6 +42,7 @@ MomentumSettings momentum_settings = {
     .uart_nmea_channel = FuriHalSerialIdUsart, // pin 13,14
     .file_naming_prefix_after = false, // Before
     .spoof_color = FuriHalVersionColorUnknown, // Real
+    .spoof_status = false, // OFF
     .rpc_color_fg = {{ScreenColorModeDefault, {.value = 0x000000}}}, // Default Black
     .rpc_color_bg = {{ScreenColorModeDefault, {.value = 0xFF8200}}}, // Default Orange
 };
@@ -113,6 +114,7 @@ static const struct {
     {setting_enum(uart_nmea_channel, FuriHalSerialIdMax)},
     {setting_bool(file_naming_prefix_after)},
     {setting_enum(spoof_color, FuriHalVersionColorCount)},
+    {setting_bool(spoof_status)},
     {setting_uint(rpc_color_fg, 0x000000, 0xFFFFFF)},
     {setting_uint(rpc_color_bg, 0x000000, 0xFFFFFF)},
 };
diff --git a/lib/momentum/settings.h b/lib/momentum/settings.h
index 573924ee6..71f9e430a 100644
--- a/lib/momentum/settings.h
+++ b/lib/momentum/settings.h
@@ -99,6 +99,7 @@ typedef struct {
     FuriHalSerialId uart_nmea_channel;
     bool file_naming_prefix_after;
     FuriHalVersionColor spoof_color;
+    bool spoof_status;
     ScreenFrameColor rpc_color_fg;
     ScreenFrameColor rpc_color_bg;
 } MomentumSettings;
diff --git a/scripts/fbt/elfmanifest.py b/scripts/fbt/elfmanifest.py
index 4096d279b..8f448e591 100644
--- a/scripts/fbt/elfmanifest.py
+++ b/scripts/fbt/elfmanifest.py
@@ -47,7 +47,7 @@ class ElfManifestV1:
             "<hI32s?32s",
             self.stack_size,
             self.app_version,
-            bytes(self.name.encode("ascii")),
+            bytes(self.name.encode("UTF-8")),
             bool(self.icon),
             self.icon,
         )
@@ -66,7 +66,7 @@ class ElfManifestV1Ext:
             "<hI32s?32sB",
             self.stack_size,
             self.app_version,
-            bytes(self.name.encode("ascii")),
+            bytes(self.name.encode("UTF-8")),
             bool(self.icon),
             self.icon,
             self.flags,
diff --git a/targets/f7/api_symbols.csv b/targets/f7/api_symbols.csv
index b96e8770c..c9380c42f 100644
--- a/targets/f7/api_symbols.csv
+++ b/targets/f7/api_symbols.csv
@@ -4267,6 +4267,7 @@ Variable,+,gpio_usb_dp,const GpioPin,
 Variable,+,gpio_vibro,const GpioPin,
 Variable,+,input_pins,const InputPin[],
 Variable,+,input_pins_count,const size_t,
+Variable,+,kalicyh,const uint8_t[],
 Variable,+,lfrfid_protocols,const ProtocolBase*[],
 Variable,+,message_blink_set_color_blue,const NotificationMessage,
 Variable,+,message_blink_set_color_cyan,const NotificationMessage,
diff --git a/targets/f7/furi_hal/furi_hal_crypto.c b/targets/f7/furi_hal/furi_hal_crypto.c
index 4deda293a..bf2f97aa0 100644
--- a/targets/f7/furi_hal/furi_hal_crypto.c
+++ b/targets/f7/furi_hal/furi_hal_crypto.c
@@ -3,6 +3,7 @@
 #include <furi_hal_bt.h>
 #include <furi_hal_random.h>
 #include <furi_hal_bus.h>
+#include <momentum/momentum.h>
 
 #include <stm32wbxx_ll_cortex.h>
 #include <furi.h>
@@ -148,6 +149,9 @@ bool furi_hal_crypto_enclave_verify(uint8_t* keys_nb, uint8_t* valid_keys_nb) {
     }
     *keys_nb = keys;
     *valid_keys_nb = keys_valid;
+    if(momentum_settings.spoof_status) {
+    *valid_keys_nb = ENCLAVE_FACTORY_KEY_SLOTS;
+    }
     if(*valid_keys_nb == ENCLAVE_FACTORY_KEY_SLOTS)
         return true;
     else
-- 
2.39.5 (Apple Git-154)

